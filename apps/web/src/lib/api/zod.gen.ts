// @ts-nocheck
// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zAddress = z.object({
  id: z.number().int().gte(-2147483648).lte(2147483647),
  streetLine1: z.string().max(255),
  streetLine2: z.union([z.string().max(255), z.null()]),
  city: z.string().max(100),
  state: z.union([z.string().max(100), z.null()]),
  postalCode: z.union([z.string().max(20), z.null()]),
  country: z.string().max(100),
  createdAt: z.unknown(),
  updatedAt: z.unknown(),
});

export const zClient = z
  .object({
    id: z.number().int().gte(-2147483648).lte(2147483647),
    companyName: z.string(),
    contactName: z.string(),
    email: z.union([z.string(), z.null()]),
  })
  .and(
    z.object({
      address: z.union([
        z.object({
          id: z.number().int().gte(-2147483648).lte(2147483647),
          streetLine1: z.string().max(255),
          streetLine2: z.union([z.string().max(255), z.null()]),
          city: z.string().max(100),
          state: z.union([z.string().max(100), z.null()]),
          postalCode: z.union([z.string().max(20), z.null()]),
          country: z.string().max(100),
          createdAt: z.unknown(),
          updatedAt: z.unknown(),
        }),
        z.null(),
      ]),
    }),
  );

export const zClient2 = z.array(
  z.union([
    z.object({
      id: z.number().int().gte(-2147483648).lte(2147483647),
      companyName: z.string(),
      contactName: z.string(),
      email: z.union([z.string(), z.null()]),
    }),
    z.object({
      address: z.union([
        z.object({
          id: z.number().int().gte(-2147483648).lte(2147483647),
          streetLine1: z.string().max(255),
          streetLine2: z.union([z.string().max(255), z.null()]),
          city: z.string().max(100),
          state: z.union([z.string().max(100), z.null()]),
          postalCode: z.union([z.string().max(20), z.null()]),
          country: z.string().max(100),
          createdAt: z.unknown(),
          updatedAt: z.unknown(),
        }),
        z.null(),
      ]),
    }),
  ]),
);

export const zInvoice = z
  .object({
    id: z.number().int().gte(-2147483648).lte(2147483647),
    amount: z.number().int().gte(-2147483648).lte(2147483647),
    currency: z.union([z.literal("czk"), z.literal("eur"), z.literal("usd")]),
    dueDate: z.union([z.unknown(), z.null()]),
    paidAt: z.union([z.unknown(), z.null()]),
    sentAt: z.union([z.unknown(), z.null()]),
    issuedAt: z.unknown(),
    createdAt: z.unknown(),
    updatedAt: z.unknown(),
    ownerId: z.union([z.string(), z.null()]),
    clientId: z.union([
      z.number().int().gte(-2147483648).lte(2147483647),
      z.null(),
    ]),
    projectId: z.union([
      z.number().int().gte(-2147483648).lte(2147483647),
      z.null(),
    ]),
    generatedFileId: z.union([z.string(), z.null()]),
    language: z.union([z.literal("cs"), z.literal("en")]),
  })
  .and(
    z.object({
      id: z.number(),
      client: z.union([
        z.object({
          id: z.number().int().gte(-2147483648).lte(2147483647),
          companyName: z.string(),
          contactName: z.string(),
          email: z.union([z.string(), z.null()]),
          ownerId: z.union([z.string(), z.null()]),
          addressId: z.union([
            z.number().int().gte(-2147483648).lte(2147483647),
            z.null(),
          ]),
          companyId: z.union([z.string(), z.null()]),
          vatNumber: z.union([z.string(), z.null()]),
          vatPayer: z.union([z.boolean(), z.null()]),
          createdAt: z.unknown(),
        }),
        z.null(),
      ]),
      project: z.union([
        z.object({
          id: z.number().int().gte(-2147483648).lte(2147483647),
          title: z.union([z.string(), z.null()]),
          ownerId: z.union([z.string(), z.null()]),
          clientId: z.union([
            z.number().int().gte(-2147483648).lte(2147483647),
            z.null(),
          ]),
          createdAt: z.unknown(),
        }),
        z.null(),
      ]),
      items: z.array(
        z.object({
          id: z.number().int().gte(-2147483648).lte(2147483647),
          timeEntryId: z.union([
            z.number().int().gte(-2147483648).lte(2147483647),
            z.null(),
          ]),
          name: z.string(),
          qty: z.number().int().gte(-2147483648).lte(2147483647),
          unitPrice: z.number().int().gte(-2147483648).lte(2147483647),
          invoiceId: z.union([
            z.number().int().gte(-2147483648).lte(2147483647),
            z.null(),
          ]),
          timeEntry: z.union([
            z.object({
              id: z.number().int().gte(-2147483648).lte(2147483647),
              title: z.union([z.string(), z.null()]),
              userId: z.string(),
              projectId: z.union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.null(),
              ]),
              projectTaskId: z.union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.null(),
              ]),
              invoiceId: z.union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.null(),
              ]),
              startAt: z.union([z.unknown(), z.null()]),
              endAt: z.union([z.unknown(), z.null()]),
              createdAt: z.unknown(),
            }),
            z.null(),
          ]),
        }),
      ),
    }),
  );

export const zInvoice2 = z.array(
  z.union([
    z.object({
      id: z.number().int().gte(-2147483648).lte(2147483647),
      amount: z.number().int().gte(-2147483648).lte(2147483647),
      currency: z.union([z.literal("czk"), z.literal("eur"), z.literal("usd")]),
      dueDate: z.union([z.unknown(), z.null()]),
      paidAt: z.union([z.unknown(), z.null()]),
      sentAt: z.union([z.unknown(), z.null()]),
      issuedAt: z.unknown(),
      createdAt: z.unknown(),
      updatedAt: z.unknown(),
      ownerId: z.union([z.string(), z.null()]),
      clientId: z.union([
        z.number().int().gte(-2147483648).lte(2147483647),
        z.null(),
      ]),
      projectId: z.union([
        z.number().int().gte(-2147483648).lte(2147483647),
        z.null(),
      ]),
      generatedFileId: z.union([z.string(), z.null()]),
      language: z.union([z.literal("cs"), z.literal("en")]),
    }),
    z.object({
      id: z.number(),
      client: z.union([
        z.object({
          id: z.number().int().gte(-2147483648).lte(2147483647),
          companyName: z.string(),
          contactName: z.string(),
          email: z.union([z.string(), z.null()]),
          ownerId: z.union([z.string(), z.null()]),
          addressId: z.union([
            z.number().int().gte(-2147483648).lte(2147483647),
            z.null(),
          ]),
          companyId: z.union([z.string(), z.null()]),
          vatNumber: z.union([z.string(), z.null()]),
          vatPayer: z.union([z.boolean(), z.null()]),
          createdAt: z.unknown(),
        }),
        z.null(),
      ]),
      project: z.union([
        z.object({
          id: z.number().int().gte(-2147483648).lte(2147483647),
          title: z.union([z.string(), z.null()]),
          ownerId: z.union([z.string(), z.null()]),
          clientId: z.union([
            z.number().int().gte(-2147483648).lte(2147483647),
            z.null(),
          ]),
          createdAt: z.unknown(),
        }),
        z.null(),
      ]),
      items: z.array(
        z.object({
          id: z.number().int().gte(-2147483648).lte(2147483647),
          timeEntryId: z.union([
            z.number().int().gte(-2147483648).lte(2147483647),
            z.null(),
          ]),
          name: z.string(),
          qty: z.number().int().gte(-2147483648).lte(2147483647),
          unitPrice: z.number().int().gte(-2147483648).lte(2147483647),
          invoiceId: z.union([
            z.number().int().gte(-2147483648).lte(2147483647),
            z.null(),
          ]),
          timeEntry: z.union([
            z.object({
              id: z.number().int().gte(-2147483648).lte(2147483647),
              title: z.union([z.string(), z.null()]),
              userId: z.string(),
              projectId: z.union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.null(),
              ]),
              projectTaskId: z.union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.null(),
              ]),
              invoiceId: z.union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.null(),
              ]),
              startAt: z.union([z.unknown(), z.null()]),
              endAt: z.union([z.unknown(), z.null()]),
              createdAt: z.unknown(),
            }),
            z.null(),
          ]),
        }),
      ),
    }),
  ]),
);

export const zProjectTask = z.object({
  id: z.number().int().gte(-2147483648).lte(2147483647),
  title: z.string(),
  description: z.union([z.string(), z.null()]),
  createdAt: z.unknown(),
  project: z.object({
    id: z.number().int().gte(-2147483648).lte(2147483647),
    title: z.union([z.string(), z.null()]),
    createdAt: z.unknown(),
    client: z.union([
      z.object({
        id: z.number().int().gte(-2147483648).lte(2147483647),
        companyName: z.string(),
        contactName: z.string(),
        email: z.union([z.string(), z.null()]),
        ownerId: z.union([z.string(), z.null()]),
        addressId: z.union([
          z.number().int().gte(-2147483648).lte(2147483647),
          z.null(),
        ]),
        companyId: z.union([z.string(), z.null()]),
        vatNumber: z.union([z.string(), z.null()]),
        vatPayer: z.union([z.boolean(), z.null()]),
        createdAt: z.unknown(),
      }),
      z.null(),
    ]),
  }),
});

export const zProjectTask2 = z.array(
  z.object({
    id: z.number().int().gte(-2147483648).lte(2147483647),
    title: z.string(),
    description: z.union([z.string(), z.null()]),
    createdAt: z.unknown(),
    project: z.object({
      id: z.number().int().gte(-2147483648).lte(2147483647),
      title: z.union([z.string(), z.null()]),
      createdAt: z.unknown(),
      client: z.union([
        z.object({
          id: z.number().int().gte(-2147483648).lte(2147483647),
          companyName: z.string(),
          contactName: z.string(),
          email: z.union([z.string(), z.null()]),
          ownerId: z.union([z.string(), z.null()]),
          addressId: z.union([
            z.number().int().gte(-2147483648).lte(2147483647),
            z.null(),
          ]),
          companyId: z.union([z.string(), z.null()]),
          vatNumber: z.union([z.string(), z.null()]),
          vatPayer: z.union([z.boolean(), z.null()]),
          createdAt: z.unknown(),
        }),
        z.null(),
      ]),
    }),
  }),
);

export const zProjectTaskCount = z.object({
  count: z.number(),
});

export const zProject = z.object({
  id: z.number().int().gte(-2147483648).lte(2147483647),
  title: z.union([z.string(), z.null()]),
  createdAt: z.unknown(),
  client: z.union([
    z.object({
      id: z.number().int().gte(-2147483648).lte(2147483647),
      companyName: z.string(),
      contactName: z.string(),
      email: z.union([z.string(), z.null()]),
      ownerId: z.union([z.string(), z.null()]),
      addressId: z.union([
        z.number().int().gte(-2147483648).lte(2147483647),
        z.null(),
      ]),
      companyId: z.union([z.string(), z.null()]),
      vatNumber: z.union([z.string(), z.null()]),
      vatPayer: z.union([z.boolean(), z.null()]),
      createdAt: z.unknown(),
    }),
    z.null(),
  ]),
});

export const zProject2 = z.array(
  z.object({
    id: z.number().int().gte(-2147483648).lte(2147483647),
    title: z.union([z.string(), z.null()]),
    createdAt: z.unknown(),
    client: z.union([
      z.object({
        id: z.number().int().gte(-2147483648).lte(2147483647),
        companyName: z.string(),
        contactName: z.string(),
        email: z.union([z.string(), z.null()]),
        ownerId: z.union([z.string(), z.null()]),
        addressId: z.union([
          z.number().int().gte(-2147483648).lte(2147483647),
          z.null(),
        ]),
        companyId: z.union([z.string(), z.null()]),
        vatNumber: z.union([z.string(), z.null()]),
        vatPayer: z.union([z.boolean(), z.null()]),
        createdAt: z.unknown(),
      }),
      z.null(),
    ]),
  }),
);

export const zProjectCount = z.object({
  count: z.number(),
});

export const zTimeEntry = z.object({
  id: z.number().int().gte(-2147483648).lte(2147483647),
  title: z.union([z.string(), z.null()]),
  invoiceId: z.union([
    z.number().int().gte(-2147483648).lte(2147483647),
    z.null(),
  ]),
  startAt: z.union([z.unknown(), z.null()]),
  endAt: z.union([z.unknown(), z.null()]),
  createdAt: z.unknown(),
  project: z.union([
    z.object({
      id: z.number().int().gte(-2147483648).lte(2147483647),
      title: z.union([z.string(), z.null()]),
      createdAt: z.unknown(),
      client: z.union([
        z.object({
          id: z.number().int().gte(-2147483648).lte(2147483647),
          companyName: z.string(),
          contactName: z.string(),
          email: z.union([z.string(), z.null()]),
          ownerId: z.union([z.string(), z.null()]),
          addressId: z.union([
            z.number().int().gte(-2147483648).lte(2147483647),
            z.null(),
          ]),
          companyId: z.union([z.string(), z.null()]),
          vatNumber: z.union([z.string(), z.null()]),
          vatPayer: z.union([z.boolean(), z.null()]),
          createdAt: z.unknown(),
        }),
        z.null(),
      ]),
    }),
    z.null(),
  ]),
  projectTask: z.union([
    z.object({
      id: z.number().int().gte(-2147483648).lte(2147483647),
      title: z.string(),
      description: z.union([z.string(), z.null()]),
      createdAt: z.unknown(),
    }),
    z.null(),
  ]),
});

export const zTimeEntry2 = z.array(
  z.object({
    id: z.number().int().gte(-2147483648).lte(2147483647),
    title: z.union([z.string(), z.null()]),
    invoiceId: z.union([
      z.number().int().gte(-2147483648).lte(2147483647),
      z.null(),
    ]),
    startAt: z.union([z.unknown(), z.null()]),
    endAt: z.union([z.unknown(), z.null()]),
    createdAt: z.unknown(),
    project: z.union([
      z.object({
        id: z.number().int().gte(-2147483648).lte(2147483647),
        title: z.union([z.string(), z.null()]),
        createdAt: z.unknown(),
        client: z.union([
          z.object({
            id: z.number().int().gte(-2147483648).lte(2147483647),
            companyName: z.string(),
            contactName: z.string(),
            email: z.union([z.string(), z.null()]),
            ownerId: z.union([z.string(), z.null()]),
            addressId: z.union([
              z.number().int().gte(-2147483648).lte(2147483647),
              z.null(),
            ]),
            companyId: z.union([z.string(), z.null()]),
            vatNumber: z.union([z.string(), z.null()]),
            vatPayer: z.union([z.boolean(), z.null()]),
            createdAt: z.unknown(),
          }),
          z.null(),
        ]),
      }),
      z.null(),
    ]),
    projectTask: z.union([
      z.object({
        id: z.number().int().gte(-2147483648).lte(2147483647),
        title: z.string(),
        description: z.union([z.string(), z.null()]),
        createdAt: z.unknown(),
      }),
      z.null(),
    ]),
  }),
);

export const zTimeEntryDurationByDate = z.array(
  z.object({
    date: z.union([
      z.unknown(),
      z.string().datetime(),
      z.string().date(),
      z.number(),
    ]),
    duration: z.number(),
  }),
);

export const zUserBilling = z
  .object({
    userId: z.string(),
    addressId: z.number().int().gte(-2147483648).lte(2147483647),
    bankAccount: z.string(),
    companyName: z.string(),
    companyId: z.string(),
    vatNumber: z.union([z.string(), z.null()]),
    vatPayer: z.union([z.boolean(), z.null()]),
  })
  .and(
    z.object({
      address: z.object({
        id: z.number().int().gte(-2147483648).lte(2147483647),
        streetLine1: z.string().max(255),
        streetLine2: z.union([z.string().max(255), z.null()]),
        city: z.string().max(100),
        state: z.union([z.string().max(100), z.null()]),
        postalCode: z.union([z.string().max(20), z.null()]),
        country: z.string().max(100),
        createdAt: z.unknown(),
        updatedAt: z.unknown(),
      }),
    }),
  );

export const zUser = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean().default("Generated at runtime"),
  image: z.string().optional(),
  createdAt: z.string().default("Generated at runtime"),
  updatedAt: z.string().default("Generated at runtime"),
});

export const zSession = z.object({
  id: z.string().optional(),
  expiresAt: z.string(),
  token: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  ipAddress: z.string().optional(),
  userAgent: z.string().optional(),
  userId: z.string(),
});

export const zAccount = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional(),
  refreshToken: z.string().optional(),
  idToken: z.string().optional(),
  accessTokenExpiresAt: z.string().optional(),
  refreshTokenExpiresAt: z.string().optional(),
  scope: z.string().optional(),
  password: z.string().optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
});

export const zVerification = z.object({
  id: z.string().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.string(),
  createdAt: z.string().optional().default("Generated at runtime"),
  updatedAt: z.string().optional().default("Generated at runtime"),
});

export const zGetClientsData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetClientsResponse = zClient2;

export const zPostClientsData = z.object({
  body: z
    .object({
      companyName: z.string(),
      contactName: z.string(),
      email: z.union([z.string(), z.null()]).optional(),
    })
    .and(
      z.object({
        address: z
          .object({
            streetLine1: z.string().max(255),
            streetLine2: z.union([z.string().max(255), z.null()]).optional(),
            city: z.string().max(100),
            state: z.union([z.string().max(100), z.null()]).optional(),
            postalCode: z.union([z.string().max(20), z.null()]).optional(),
            country: z.string().max(100),
          })
          .optional(),
      }),
    ),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zPostClientsResponse = zClient;

export const zDeleteClientsByIdData = z.object({
  body: z.never().optional(),
  path: z.object({
    id: z.number(),
  }),
  query: z.never().optional(),
});

export const zGetClientsByIdData = z.object({
  body: z.never().optional(),
  path: z.object({
    id: z.number(),
  }),
  query: z.never().optional(),
});

export const zGetClientsByIdResponse = zClient;

export const zPatchClientsByIdData = z.object({
  body: z
    .object({
      companyName: z.string().optional(),
      contactName: z.string().optional(),
      email: z.union([z.string(), z.null()]).optional(),
    })
    .and(
      z.object({
        address: z
          .object({
            streetLine1: z.string().max(255),
            streetLine2: z.union([z.string().max(255), z.null()]).optional(),
            city: z.string().max(100),
            state: z.union([z.string().max(100), z.null()]).optional(),
            postalCode: z.union([z.string().max(20), z.null()]).optional(),
            country: z.string().max(100),
          })
          .optional(),
      }),
    ),
  path: z.object({
    id: z.number(),
  }),
  query: z.never().optional(),
});

export const zPatchClientsByIdResponse = zClient;

export const zGetInvoicesData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetInvoicesResponse = zInvoice2;

export const zPostInvoicesData = z.object({
  body: z
    .object({
      dueDate: z.union([
        z.unknown(),
        z.string().datetime(),
        z.string().date(),
        z.number(),
      ]),
      currency: z.union([z.literal("czk"), z.literal("eur"), z.literal("usd")]),
      projectId: z.number(),
      language: z.union([z.literal("cs"), z.literal("en")]),
    })
    .and(
      z.object({
        items: z.array(
          z.object({
            name: z.string(),
            qty: z.number(),
            unitPrice: z.number(),
            timeEntryId: z.union([z.number(), z.null()]).optional(),
          }),
        ),
      }),
    ),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zPostInvoicesResponse = zInvoice;

export const zDeleteInvoicesByIdData = z.object({
  body: z.never().optional(),
  path: z.object({
    id: z.number(),
  }),
  query: z.never().optional(),
});

export const zDeleteInvoicesByIdResponse = z.object({
  success: z.boolean(),
});

export const zGetInvoicesByIdData = z.object({
  body: z.never().optional(),
  path: z.object({
    id: z.number(),
  }),
  query: z.never().optional(),
});

export const zGetInvoicesByIdResponse = zInvoice;

export const zGetInvoicesByIdGeneratedData = z.object({
  body: z.never().optional(),
  path: z.object({
    id: z.number(),
  }),
  query: z.never().optional(),
});

export const zGetProjectTasksCountData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      project: z.number().optional(),
      from: z
        .union([
          z.unknown(),
          z.string().datetime(),
          z.string().date(),
          z.number(),
        ])
        .optional(),
      to: z
        .union([
          z.unknown(),
          z.string().datetime(),
          z.string().date(),
          z.number(),
        ])
        .optional(),
    })
    .optional(),
});

export const zGetProjectTasksCountResponse = zProjectTaskCount;

export const zGetProjectTasksData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      take: z.number().optional(),
      skip: z.number().optional(),
      project: z.number().optional(),
    })
    .optional(),
});

export const zGetProjectTasksResponse = zProjectTask2;

export const zDeleteProjectTasksByIdData = z.object({
  body: z.never().optional(),
  path: z.object({
    id: z.number(),
  }),
  query: z.never().optional(),
});

export const zPatchProjectTasksByIdData = z.object({
  body: z.object({
    title: z.string().optional(),
    description: z.union([z.string(), z.null()]).optional(),
  }),
  path: z.object({
    id: z.number(),
  }),
  query: z.never().optional(),
});

export const zPostProjectTasksByIdData = z.object({
  body: z.object({
    title: z.string(),
    description: z.union([z.string(), z.null()]).optional(),
  }),
  path: z.object({
    id: z.number(),
  }),
  query: z.never().optional(),
});

export const zPostProjectTasksByIdResponse = zProjectTask;

export const zGetProjectsCountData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      client: z.number().optional().default(0),
      from: z
        .union([
          z.unknown(),
          z.string().datetime(),
          z.string().date(),
          z.number(),
        ])
        .optional(),
      to: z
        .union([
          z.unknown(),
          z.string().datetime(),
          z.string().date(),
          z.number(),
        ])
        .optional(),
    })
    .optional(),
});

export const zGetProjectsCountResponse = zProjectCount;

export const zGetProjectsData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .optional(),
});

export const zGetProjectsResponse = zProject2;

export const zPostProjectsData = z.object({
  body: z.object({
    clientId: z
      .union([z.number().int().gte(-2147483648).lte(2147483647), z.null()])
      .optional(),
    title: z.union([z.string(), z.null()]).optional(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zPostProjectsResponse = zProject;

export const zDeleteProjectsByIdData = z.object({
  body: z.never().optional(),
  path: z.object({
    id: z.number(),
  }),
  query: z.never().optional(),
});

export const zGetProjectsByIdData = z.object({
  body: z.never().optional(),
  path: z.object({
    id: z.number(),
  }),
  query: z.never().optional(),
});

export const zGetProjectsByIdResponse = zProject;

export const zPatchProjectsByIdData = z.object({
  body: z.object({
    clientId: z
      .union([z.number().int().gte(-2147483648).lte(2147483647), z.null()])
      .optional(),
    title: z.union([z.string(), z.null()]).optional(),
  }),
  path: z.object({
    id: z.number(),
  }),
  query: z.never().optional(),
});

export const zGetTimeEntriesActiveData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetTimeEntriesActiveResponse = zTimeEntry;

export const zDeleteTimeEntriesByIdData = z.object({
  body: z.never().optional(),
  path: z.object({
    id: z.number().default(0),
  }),
  query: z.never().optional(),
});

export const zGetTimeEntriesByIdData = z.object({
  body: z.never().optional(),
  path: z.object({
    id: z.number().default(0),
  }),
  query: z.never().optional(),
});

export const zGetTimeEntriesByIdResponse = zTimeEntry;

export const zPatchTimeEntriesByIdData = z.object({
  body: z.object({
    title: z.string().optional(),
    projectId: z.union([z.number(), z.null()]).optional(),
    projectTaskId: z
      .union([z.number().int().gte(-2147483648).lte(2147483647), z.null()])
      .optional(),
    invoiceId: z
      .union([z.number().int().gte(-2147483648).lte(2147483647), z.null()])
      .optional(),
    startAt: z
      .union([
        z.unknown(),
        z.string().datetime(),
        z.string().date(),
        z.number(),
      ])
      .optional(),
    endAt: z
      .union([
        z.union([
          z.unknown(),
          z.string().datetime(),
          z.string().date(),
          z.number(),
        ]),
        z.null(),
      ])
      .optional(),
  }),
  path: z.object({
    id: z.number().default(0),
  }),
  query: z.never().optional(),
});

export const zPatchTimeEntriesByIdResponse = zTimeEntry;

export const zGetTimeEntriesData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      take: z.number().optional(),
      skip: z.number().optional(),
      projectId: z.union([z.number(), z.null()]).optional(),
      from: z
        .union([
          z.unknown(),
          z.string().datetime(),
          z.string().date(),
          z.number(),
        ])
        .optional(),
      to: z
        .union([
          z.unknown(),
          z.string().datetime(),
          z.string().date(),
          z.number(),
        ])
        .optional(),
      billed: z.boolean().optional(),
    })
    .optional(),
});

export const zGetTimeEntriesResponse = zTimeEntry2;

export const zPostTimeEntriesData = z.object({
  body: z.object({
    title: z.string(),
    projectId: z.union([z.number(), z.null()]),
    projectTaskId: z
      .union([z.number().int().gte(-2147483648).lte(2147483647), z.null()])
      .optional(),
    invoiceId: z
      .union([z.number().int().gte(-2147483648).lte(2147483647), z.null()])
      .optional(),
    startAt: z.union([
      z.unknown(),
      z.string().datetime(),
      z.string().date(),
      z.number(),
    ]),
    endAt: z.union([
      z.union([
        z.unknown(),
        z.string().datetime(),
        z.string().date(),
        z.number(),
      ]),
      z.null(),
    ]),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zPostTimeEntriesResponse = zTimeEntry;

export const zGetTimeEntriesAnalyzeDurationByDateData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      projectId: z.union([z.number(), z.null()]).optional(),
      from: z
        .union([
          z.unknown(),
          z.string().datetime(),
          z.string().date(),
          z.number(),
        ])
        .optional(),
      to: z
        .union([
          z.unknown(),
          z.string().datetime(),
          z.string().date(),
          z.number(),
        ])
        .optional(),
      billed: z.boolean().optional(),
    })
    .optional(),
});

export const zGetTimeEntriesAnalyzeDurationByDateResponse =
  zTimeEntryDurationByDate;

export const zGetCalendarsData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetUserBillingData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetUserBillingResponse = zUserBilling;

export const zPutUserBillingData = z.object({
  body: z
    .object({
      bankAccount: z.string(),
      companyName: z.string(),
      companyId: z.string(),
      vatNumber: z.union([z.string(), z.null()]).optional(),
      vatPayer: z.union([z.boolean(), z.null()]).optional(),
    })
    .and(
      z.object({
        address: z.object({
          streetLine1: z.string().max(255),
          streetLine2: z.union([z.string().max(255), z.null()]).optional(),
          city: z.string().max(100),
          state: z.union([z.string().max(100), z.null()]).optional(),
          postalCode: z.union([z.string().max(20), z.null()]).optional(),
          country: z.string().max(100),
        }),
      }),
    ),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zPutUserBillingResponse = zUserBilling;

export const zGetStatusData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zHeadStatusData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zSocialSignInData = z.object({
  body: z.object({
    callbackURL: z.string().optional(),
    newUserCallbackURL: z.string().optional(),
    errorCallbackURL: z.string().optional(),
    provider: z.string(),
    disableRedirect: z.string().optional(),
    idToken: z.string().optional(),
    scopes: z.string().optional(),
    requestSignUp: z.string().optional(),
    loginHint: z.string().optional(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Session response when idToken is provided
 */
export const zSocialSignInResponse = z.object({
  redirect: z.unknown(),
  token: z.string(),
});

export const zGetAuthGetSessionData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zGetAuthGetSessionResponse = z.object({
  session: zSession,
  user: zUser,
});

export const zPostAuthSignOutData = z.object({
  body: z.object({}).optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zPostAuthSignOutResponse = z.object({
  success: z.boolean().optional(),
});

export const zPostAuthSignUpEmailData = z.object({
  body: z
    .object({
      name: z.string(),
      email: z.string(),
      password: z.string(),
      image: z.string().optional(),
      callbackURL: z.string().optional(),
      rememberMe: z.boolean().optional(),
    })
    .optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Successfully created user
 */
export const zPostAuthSignUpEmailResponse = z.object({
  token: z.string().optional(),
  user: z.object({
    id: z.string(),
    email: z.string().email(),
    name: z.string(),
    image: z.string().url().optional(),
    emailVerified: z.boolean(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
  }),
});

export const zPostAuthSignInEmailData = z.object({
  body: z.object({
    email: z.string(),
    password: z.string(),
    callbackURL: z.string().optional(),
    rememberMe: z.string().optional(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Session response when idToken is provided
 */
export const zPostAuthSignInEmailResponse = z.object({
  redirect: z.unknown(),
  token: z.string(),
  url: z.null().optional(),
  user: z.object({
    id: z.string(),
    email: z.string(),
    name: z.string().optional(),
    image: z.string().optional(),
    emailVerified: z.boolean(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
  }),
});

export const zPostAuthForgetPasswordData = z.object({
  body: z.object({
    email: z.string(),
    redirectTo: z.string().optional(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zPostAuthForgetPasswordResponse = z.object({
  status: z.boolean().optional(),
  message: z.string().optional(),
});

export const zPostAuthResetPasswordData = z.object({
  body: z.object({
    newPassword: z.string(),
    token: z.string().optional(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zPostAuthResetPasswordResponse = z.object({
  status: z.boolean().optional(),
});

export const zGetAuthVerifyEmailData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.object({
    token: z.string(),
    callbackURL: z.string().optional(),
  }),
});

/**
 * Success
 */
export const zGetAuthVerifyEmailResponse = z.object({
  user: z.object({
    id: z.string(),
    email: z.string(),
    name: z.string(),
    image: z.string(),
    emailVerified: z.boolean(),
    createdAt: z.string(),
    updatedAt: z.string(),
  }),
  status: z.boolean(),
});

export const zPostAuthSendVerificationEmailData = z.object({
  body: z
    .object({
      email: z.string(),
      callbackURL: z.string().optional(),
    })
    .optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zPostAuthSendVerificationEmailResponse = z.object({
  status: z.boolean().optional(),
});

export const zPostAuthChangeEmailData = z.object({
  body: z.object({
    newEmail: z.string(),
    callbackURL: z.string().optional(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Email change request processed successfully
 */
export const zPostAuthChangeEmailResponse = z.object({
  status: z.boolean(),
  message: z.enum(["Email updated", "Verification email sent"]).optional(),
});

export const zPostAuthChangePasswordData = z.object({
  body: z.object({
    newPassword: z.string(),
    currentPassword: z.string(),
    revokeOtherSessions: z.string().optional(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Password successfully changed
 */
export const zPostAuthChangePasswordResponse = z.object({
  token: z.string().optional(),
  user: z.object({
    id: z.string(),
    email: z.string().email(),
    name: z.string(),
    image: z.string().url().optional(),
    emailVerified: z.boolean(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
  }),
});

export const zPostAuthUpdateUserData = z.object({
  body: z
    .object({
      name: z.string().optional(),
      image: z.string().optional(),
    })
    .optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zPostAuthUpdateUserResponse = z.object({
  status: z.boolean().optional(),
});

export const zPostAuthDeleteUserData = z.object({
  body: z.object({
    callbackURL: z.string().optional(),
    password: z.string().optional(),
    token: z.string().optional(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * User deletion processed successfully
 */
export const zPostAuthDeleteUserResponse = z.object({
  success: z.boolean(),
  message: z.enum(["User deleted", "Verification email sent"]),
});

export const zGetAuthResetPasswordByTokenData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      callbackURL: z.string().optional(),
    })
    .optional(),
});

/**
 * Success
 */
export const zGetAuthResetPasswordByTokenResponse = z.object({
  token: z.string().optional(),
});

export const zPostAuthRequestPasswordResetData = z.object({
  body: z.object({
    email: z.string(),
    redirectTo: z.string().optional(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zPostAuthRequestPasswordResetResponse = z.object({
  status: z.boolean().optional(),
  message: z.string().optional(),
});

export const zGetAuthListSessionsData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zGetAuthListSessionsResponse = z.array(zSession);

export const zPostAuthRevokeSessionData = z.object({
  body: z
    .object({
      token: z.string(),
    })
    .optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zPostAuthRevokeSessionResponse = z.object({
  status: z.boolean(),
});

export const zPostAuthRevokeSessionsData = z.object({
  body: z.object({}).optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zPostAuthRevokeSessionsResponse = z.object({
  status: z.boolean(),
});

export const zPostAuthRevokeOtherSessionsData = z.object({
  body: z.object({}).optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zPostAuthRevokeOtherSessionsResponse = z.object({
  status: z.boolean(),
});

export const zPostAuthLinkSocialData = z.object({
  body: z.object({
    callbackURL: z.string().optional(),
    provider: z.string(),
    idToken: z.string().optional(),
    requestSignUp: z.string().optional(),
    scopes: z.string().optional(),
    errorCallbackURL: z.string().optional(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zPostAuthLinkSocialResponse = z.object({
  url: z.string().optional(),
  redirect: z.boolean(),
  status: z.boolean().optional(),
});

export const zGetAuthListAccountsData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zGetAuthListAccountsResponse = z.array(
  z.object({
    id: z.string().optional(),
    provider: z.string().optional(),
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
  }),
);

export const zGetAuthDeleteUserCallbackData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      token: z.string().optional(),
      callbackURL: z.string().optional(),
    })
    .optional(),
});

/**
 * User successfully deleted
 */
export const zGetAuthDeleteUserCallbackResponse = z.object({
  success: z.boolean(),
  message: z.enum(["User deleted"]),
});

export const zPostAuthUnlinkAccountData = z.object({
  body: z.object({
    providerId: z.string(),
    accountId: z.string().optional(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zPostAuthUnlinkAccountResponse = z.object({
  status: z.boolean().optional(),
});

export const zPostAuthRefreshTokenData = z.object({
  body: z.object({
    providerId: z.string(),
    accountId: z.string().optional(),
    userId: z.string().optional(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Access token refreshed successfully
 */
export const zPostAuthRefreshTokenResponse = z.object({
  tokenType: z.string().optional(),
  idToken: z.string().optional(),
  accessToken: z.string().optional(),
  refreshToken: z.string().optional(),
  accessTokenExpiresAt: z.string().datetime().optional(),
  refreshTokenExpiresAt: z.string().datetime().optional(),
});

export const zPostAuthGetAccessTokenData = z.object({
  body: z.object({
    providerId: z.string(),
    accountId: z.string().optional(),
    userId: z.string().optional(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * A Valid access token
 */
export const zPostAuthGetAccessTokenResponse = z.object({
  tokenType: z.string().optional(),
  idToken: z.string().optional(),
  accessToken: z.string().optional(),
  refreshToken: z.string().optional(),
  accessTokenExpiresAt: z.string().datetime().optional(),
  refreshTokenExpiresAt: z.string().datetime().optional(),
});

export const zPostAuthAccountInfoData = z.object({
  body: z.object({
    accountId: z.string(),
  }),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Success
 */
export const zPostAuthAccountInfoResponse = z.object({
  user: z.object({
    id: z.string(),
    name: z.string().optional(),
    email: z.string().optional(),
    image: z.string().optional(),
    emailVerified: z.boolean(),
  }),
  data: z.object({}),
});

export const zGetAuthOkData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * API is working
 */
export const zGetAuthOkResponse = z.object({
  ok: z.boolean(),
});

export const zGetAuthErrorData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * The HTML content of the error page
 */
export const zGetAuthErrorResponse = z.string();
