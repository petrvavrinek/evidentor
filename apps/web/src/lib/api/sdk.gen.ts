// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  GetClientsData,
  GetClientsResponses,
  PostClientsData,
  PostClientsResponses,
  DeleteClientsByIdData,
  DeleteClientsByIdResponses,
  GetClientsByIdData,
  GetClientsByIdResponses,
  PatchClientsByIdData,
  PatchClientsByIdResponses,
  GetInvoicesData,
  GetInvoicesResponses,
  PostInvoicesData,
  PostInvoicesResponses,
  DeleteInvoicesByIdData,
  DeleteInvoicesByIdResponses,
  GetInvoicesByIdData,
  GetInvoicesByIdResponses,
  GetInvoicesByIdGeneratedData,
  GetInvoicesByIdGeneratedResponses,
  GetProjectTasksCountData,
  GetProjectTasksCountResponses,
  GetProjectTasksData,
  GetProjectTasksResponses,
  DeleteProjectTasksByIdData,
  DeleteProjectTasksByIdResponses,
  PatchProjectTasksByIdData,
  PatchProjectTasksByIdResponses,
  PostProjectTasksByIdData,
  PostProjectTasksByIdResponses,
  GetProjectsCountData,
  GetProjectsCountResponses,
  GetProjectsData,
  GetProjectsResponses,
  PostProjectsData,
  PostProjectsResponses,
  DeleteProjectsByIdData,
  DeleteProjectsByIdResponses,
  GetProjectsByIdData,
  GetProjectsByIdResponses,
  PatchProjectsByIdData,
  PatchProjectsByIdResponses,
  GetTimeEntriesActiveData,
  GetTimeEntriesActiveResponses,
  DeleteTimeEntriesByIdData,
  DeleteTimeEntriesByIdResponses,
  DeleteTimeEntriesByIdErrors,
  GetTimeEntriesByIdData,
  GetTimeEntriesByIdResponses,
  PatchTimeEntriesByIdData,
  PatchTimeEntriesByIdResponses,
  GetTimeEntriesData,
  GetTimeEntriesResponses,
  PostTimeEntriesData,
  PostTimeEntriesResponses,
  GetTimeEntriesAnalyzeDurationByDateData,
  GetTimeEntriesAnalyzeDurationByDateResponses,
  GetCalendarsData,
  GetCalendarsResponses,
  GetUserBillingData,
  GetUserBillingResponses,
  PutUserBillingData,
  PutUserBillingResponses,
  GetInvoiceAutomationsData,
  GetInvoiceAutomationsResponses,
  PostInvoiceAutomationsData,
  PostInvoiceAutomationsResponses,
  GetInvoiceAutomationsByIdData,
  GetInvoiceAutomationsByIdResponses,
  GetStatusData,
  GetStatusResponses,
  HeadStatusData,
  HeadStatusResponses,
  SocialSignInData,
  SocialSignInResponses,
  SocialSignInErrors,
  GetAuthGetSessionData,
  GetAuthGetSessionResponses,
  GetAuthGetSessionErrors,
  PostAuthSignOutData,
  PostAuthSignOutResponses,
  PostAuthSignOutErrors,
  PostAuthSignUpEmailData,
  PostAuthSignUpEmailResponses,
  PostAuthSignUpEmailErrors,
  PostAuthSignInEmailData,
  PostAuthSignInEmailResponses,
  PostAuthSignInEmailErrors,
  PostAuthForgetPasswordData,
  PostAuthForgetPasswordResponses,
  PostAuthForgetPasswordErrors,
  PostAuthResetPasswordData,
  PostAuthResetPasswordResponses,
  PostAuthResetPasswordErrors,
  GetAuthVerifyEmailData,
  GetAuthVerifyEmailResponses,
  GetAuthVerifyEmailErrors,
  PostAuthSendVerificationEmailData,
  PostAuthSendVerificationEmailResponses,
  PostAuthSendVerificationEmailErrors,
  PostAuthChangeEmailData,
  PostAuthChangeEmailResponses,
  PostAuthChangeEmailErrors,
  PostAuthChangePasswordData,
  PostAuthChangePasswordResponses,
  PostAuthChangePasswordErrors,
  PostAuthUpdateUserData,
  PostAuthUpdateUserResponses,
  PostAuthUpdateUserErrors,
  PostAuthDeleteUserData,
  PostAuthDeleteUserResponses,
  PostAuthDeleteUserErrors,
  GetAuthResetPasswordByTokenData,
  GetAuthResetPasswordByTokenResponses,
  GetAuthResetPasswordByTokenErrors,
  PostAuthRequestPasswordResetData,
  PostAuthRequestPasswordResetResponses,
  PostAuthRequestPasswordResetErrors,
  GetAuthListSessionsData,
  GetAuthListSessionsResponses,
  GetAuthListSessionsErrors,
  PostAuthRevokeSessionData,
  PostAuthRevokeSessionResponses,
  PostAuthRevokeSessionErrors,
  PostAuthRevokeSessionsData,
  PostAuthRevokeSessionsResponses,
  PostAuthRevokeSessionsErrors,
  PostAuthRevokeOtherSessionsData,
  PostAuthRevokeOtherSessionsResponses,
  PostAuthRevokeOtherSessionsErrors,
  PostAuthLinkSocialData,
  PostAuthLinkSocialResponses,
  PostAuthLinkSocialErrors,
  GetAuthListAccountsData,
  GetAuthListAccountsResponses,
  GetAuthListAccountsErrors,
  GetAuthDeleteUserCallbackData,
  GetAuthDeleteUserCallbackResponses,
  GetAuthDeleteUserCallbackErrors,
  PostAuthUnlinkAccountData,
  PostAuthUnlinkAccountResponses,
  PostAuthUnlinkAccountErrors,
  PostAuthRefreshTokenData,
  PostAuthRefreshTokenResponses,
  PostAuthRefreshTokenErrors,
  PostAuthGetAccessTokenData,
  PostAuthGetAccessTokenResponses,
  PostAuthGetAccessTokenErrors,
  PostAuthAccountInfoData,
  PostAuthAccountInfoResponses,
  PostAuthAccountInfoErrors,
  GetAuthOkData,
  GetAuthOkResponses,
  GetAuthOkErrors,
  GetAuthErrorData,
  GetAuthErrorResponses,
  GetAuthErrorErrors,
} from "./types.gen";
import {
  zGetClientsData,
  zGetClientsResponse,
  zPostClientsData,
  zPostClientsResponse,
  zDeleteClientsByIdData,
  zGetClientsByIdData,
  zGetClientsByIdResponse,
  zPatchClientsByIdData,
  zPatchClientsByIdResponse,
  zGetInvoicesData,
  zGetInvoicesResponse,
  zPostInvoicesData,
  zPostInvoicesResponse,
  zDeleteInvoicesByIdData,
  zDeleteInvoicesByIdResponse,
  zGetInvoicesByIdData,
  zGetInvoicesByIdResponse,
  zGetInvoicesByIdGeneratedData,
  zGetProjectTasksCountData,
  zGetProjectTasksCountResponse,
  zGetProjectTasksData,
  zGetProjectTasksResponse,
  zDeleteProjectTasksByIdData,
  zPatchProjectTasksByIdData,
  zPostProjectTasksByIdData,
  zPostProjectTasksByIdResponse,
  zGetProjectsCountData,
  zGetProjectsCountResponse,
  zGetProjectsData,
  zGetProjectsResponse,
  zPostProjectsData,
  zPostProjectsResponse,
  zDeleteProjectsByIdData,
  zGetProjectsByIdData,
  zGetProjectsByIdResponse,
  zPatchProjectsByIdData,
  zGetTimeEntriesActiveData,
  zGetTimeEntriesActiveResponse,
  zDeleteTimeEntriesByIdData,
  zGetTimeEntriesByIdData,
  zGetTimeEntriesByIdResponse,
  zPatchTimeEntriesByIdData,
  zPatchTimeEntriesByIdResponse,
  zGetTimeEntriesData,
  zGetTimeEntriesResponse,
  zPostTimeEntriesData,
  zPostTimeEntriesResponse,
  zGetTimeEntriesAnalyzeDurationByDateData,
  zGetTimeEntriesAnalyzeDurationByDateResponse,
  zGetCalendarsData,
  zGetUserBillingData,
  zGetUserBillingResponse,
  zPutUserBillingData,
  zPutUserBillingResponse,
  zGetInvoiceAutomationsData,
  zGetInvoiceAutomationsResponse,
  zPostInvoiceAutomationsData,
  zPostInvoiceAutomationsResponse,
  zGetInvoiceAutomationsByIdData,
  zGetInvoiceAutomationsByIdResponse,
  zGetStatusData,
  zHeadStatusData,
  zSocialSignInData,
  zSocialSignInResponse,
  zGetAuthGetSessionData,
  zGetAuthGetSessionResponse,
  zPostAuthSignOutData,
  zPostAuthSignOutResponse,
  zPostAuthSignUpEmailData,
  zPostAuthSignUpEmailResponse,
  zPostAuthSignInEmailData,
  zPostAuthSignInEmailResponse,
  zPostAuthForgetPasswordData,
  zPostAuthForgetPasswordResponse,
  zPostAuthResetPasswordData,
  zPostAuthResetPasswordResponse,
  zGetAuthVerifyEmailData,
  zGetAuthVerifyEmailResponse,
  zPostAuthSendVerificationEmailData,
  zPostAuthSendVerificationEmailResponse,
  zPostAuthChangeEmailData,
  zPostAuthChangeEmailResponse,
  zPostAuthChangePasswordData,
  zPostAuthChangePasswordResponse,
  zPostAuthUpdateUserData,
  zPostAuthUpdateUserResponse,
  zPostAuthDeleteUserData,
  zPostAuthDeleteUserResponse,
  zGetAuthResetPasswordByTokenData,
  zGetAuthResetPasswordByTokenResponse,
  zPostAuthRequestPasswordResetData,
  zPostAuthRequestPasswordResetResponse,
  zGetAuthListSessionsData,
  zGetAuthListSessionsResponse,
  zPostAuthRevokeSessionData,
  zPostAuthRevokeSessionResponse,
  zPostAuthRevokeSessionsData,
  zPostAuthRevokeSessionsResponse,
  zPostAuthRevokeOtherSessionsData,
  zPostAuthRevokeOtherSessionsResponse,
  zPostAuthLinkSocialData,
  zPostAuthLinkSocialResponse,
  zGetAuthListAccountsData,
  zGetAuthListAccountsResponse,
  zGetAuthDeleteUserCallbackData,
  zGetAuthDeleteUserCallbackResponse,
  zPostAuthUnlinkAccountData,
  zPostAuthUnlinkAccountResponse,
  zPostAuthRefreshTokenData,
  zPostAuthRefreshTokenResponse,
  zPostAuthGetAccessTokenData,
  zPostAuthGetAccessTokenResponse,
  zPostAuthAccountInfoData,
  zPostAuthAccountInfoResponse,
  zGetAuthOkData,
  zGetAuthOkResponse,
  zGetAuthErrorData,
  zGetAuthErrorResponse,
} from "./zod.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get all user-defined clients
 */
export const getClients = <ThrowOnError extends boolean = false>(
  options?: Options<GetClientsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetClientsResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetClientsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetClientsResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/clients",
    ...options,
  });
};

/**
 * Create new client
 */
export const postClients = <ThrowOnError extends boolean = false>(
  options: Options<PostClientsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostClientsResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostClientsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostClientsResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/clients",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete user-defined client, all projects containing this client will be unset
 */
export const deleteClientsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteClientsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteClientsByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zDeleteClientsByIdData.parseAsync(data);
    },
    responseStyle: "data",
    url: "/clients/{id}",
    ...options,
  });
};

/**
 * Get user-defined client by ID
 */
export const getClientsById = <ThrowOnError extends boolean = false>(
  options: Options<GetClientsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetClientsByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetClientsByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetClientsByIdResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/clients/{id}",
    ...options,
  });
};

/**
 * Update user-defined client data
 */
export const patchClientsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchClientsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchClientsByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPatchClientsByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPatchClientsByIdResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/clients/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get all user invoices
 */
export const getInvoices = <ThrowOnError extends boolean = false>(
  options?: Options<GetInvoicesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetInvoicesResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetInvoicesData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetInvoicesResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/invoices",
    ...options,
  });
};

/**
 * Create invoice
 */
export const postInvoices = <ThrowOnError extends boolean = false>(
  options: Options<PostInvoicesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostInvoicesResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostInvoicesData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostInvoicesResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/invoices",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete invoice
 */
export const deleteInvoicesById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteInvoicesByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteInvoicesByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zDeleteInvoicesByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zDeleteInvoicesByIdResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/invoices/{id}",
    ...options,
  });
};

/**
 * Get invoice by id
 */
export const getInvoicesById = <ThrowOnError extends boolean = false>(
  options: Options<GetInvoicesByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetInvoicesByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetInvoicesByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetInvoicesByIdResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/invoices/{id}",
    ...options,
  });
};

export const getInvoicesByIdGenerated = <ThrowOnError extends boolean = false>(
  options: Options<GetInvoicesByIdGeneratedData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetInvoicesByIdGeneratedResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetInvoicesByIdGeneratedData.parseAsync(data);
    },
    responseStyle: "data",
    url: "/invoices/{id}/generated",
    ...options,
  });
};

export const getProjectTasksCount = <ThrowOnError extends boolean = false>(
  options?: Options<GetProjectTasksCountData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetProjectTasksCountResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetProjectTasksCountData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetProjectTasksCountResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/project-tasks/count",
    ...options,
  });
};

export const getProjectTasks = <ThrowOnError extends boolean = false>(
  options?: Options<GetProjectTasksData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetProjectTasksResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetProjectTasksData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetProjectTasksResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/project-tasks",
    ...options,
  });
};

/**
 * Delete project task by ID
 */
export const deleteProjectTasksById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectTasksByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectTasksByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zDeleteProjectTasksByIdData.parseAsync(data);
    },
    responseStyle: "data",
    url: "/project-tasks/{id}",
    ...options,
  });
};

export const patchProjectTasksById = <ThrowOnError extends boolean = false>(
  options: Options<PatchProjectTasksByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchProjectTasksByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPatchProjectTasksByIdData.parseAsync(data);
    },
    responseStyle: "data",
    url: "/project-tasks/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create new project task
 */
export const postProjectTasksById = <ThrowOnError extends boolean = false>(
  options: Options<PostProjectTasksByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostProjectTasksByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostProjectTasksByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostProjectTasksByIdResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/project-tasks/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getProjectsCount = <ThrowOnError extends boolean = false>(
  options?: Options<GetProjectsCountData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetProjectsCountResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetProjectsCountData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetProjectsCountResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/projects/count",
    ...options,
  });
};

/**
 * Get all user projects
 */
export const getProjects = <ThrowOnError extends boolean = false>(
  options?: Options<GetProjectsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetProjectsResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetProjectsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetProjectsResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/projects",
    ...options,
  });
};

/**
 * Create new user project
 */
export const postProjects = <ThrowOnError extends boolean = false>(
  options: Options<PostProjectsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostProjectsResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostProjectsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostProjectsResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/projects",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete user project, all time entries will be removed
 */
export const deleteProjectsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectsByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zDeleteProjectsByIdData.parseAsync(data);
    },
    responseStyle: "data",
    url: "/projects/{id}",
    ...options,
  });
};

/**
 * Get user project by ID
 */
export const getProjectsById = <ThrowOnError extends boolean = false>(
  options: Options<GetProjectsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProjectsByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetProjectsByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetProjectsByIdResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/projects/{id}",
    ...options,
  });
};

/**
 * Update user project data
 */
export const patchProjectsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchProjectsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchProjectsByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPatchProjectsByIdData.parseAsync(data);
    },
    responseStyle: "data",
    url: "/projects/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get active time entry
 */
export const getTimeEntriesActive = <ThrowOnError extends boolean = false>(
  options?: Options<GetTimeEntriesActiveData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetTimeEntriesActiveResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetTimeEntriesActiveData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetTimeEntriesActiveResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/time-entries/active",
    ...options,
  });
};

/**
 * Delete time entry
 */
export const deleteTimeEntriesById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTimeEntriesByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteTimeEntriesByIdResponses,
    DeleteTimeEntriesByIdErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zDeleteTimeEntriesByIdData.parseAsync(data);
    },
    responseStyle: "data",
    url: "/time-entries/{id}",
    ...options,
  });
};

/**
 * Return time entry by ID
 */
export const getTimeEntriesById = <ThrowOnError extends boolean = false>(
  options: Options<GetTimeEntriesByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetTimeEntriesByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetTimeEntriesByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetTimeEntriesByIdResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/time-entries/{id}",
    ...options,
  });
};

/**
 * Update existing time entry
 */
export const patchTimeEntriesById = <ThrowOnError extends boolean = false>(
  options: Options<PatchTimeEntriesByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchTimeEntriesByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPatchTimeEntriesByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPatchTimeEntriesByIdResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/time-entries/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getTimeEntries = <ThrowOnError extends boolean = false>(
  options?: Options<GetTimeEntriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetTimeEntriesResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetTimeEntriesData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetTimeEntriesResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/time-entries",
    ...options,
  });
};

/**
 * Create new time entry
 */
export const postTimeEntries = <ThrowOnError extends boolean = false>(
  options: Options<PostTimeEntriesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostTimeEntriesResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostTimeEntriesData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostTimeEntriesResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/time-entries",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getTimeEntriesAnalyzeDurationByDate = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetTimeEntriesAnalyzeDurationByDateData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetTimeEntriesAnalyzeDurationByDateResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetTimeEntriesAnalyzeDurationByDateData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetTimeEntriesAnalyzeDurationByDateResponse.parseAsync(
        data,
      );
    },
    responseStyle: "data",
    url: "/time-entries/analyze/duration-by-date",
    ...options,
  });
};

export const getCalendars = <ThrowOnError extends boolean = false>(
  options?: Options<GetCalendarsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCalendarsResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetCalendarsData.parseAsync(data);
    },
    responseStyle: "data",
    url: "/calendars",
    ...options,
  });
};

export const getUserBilling = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserBillingData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserBillingResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetUserBillingData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetUserBillingResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/user-billing",
    ...options,
  });
};

export const putUserBilling = <ThrowOnError extends boolean = false>(
  options: Options<PutUserBillingData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutUserBillingResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPutUserBillingData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPutUserBillingResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/user-billing",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getInvoiceAutomations = <ThrowOnError extends boolean = false>(
  options?: Options<GetInvoiceAutomationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetInvoiceAutomationsResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetInvoiceAutomationsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetInvoiceAutomationsResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/invoice-automations",
    ...options,
  });
};

export const postInvoiceAutomations = <ThrowOnError extends boolean = false>(
  options: Options<PostInvoiceAutomationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostInvoiceAutomationsResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostInvoiceAutomationsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostInvoiceAutomationsResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/invoice-automations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getInvoiceAutomationsById = <ThrowOnError extends boolean = false>(
  options: Options<GetInvoiceAutomationsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetInvoiceAutomationsByIdResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetInvoiceAutomationsByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetInvoiceAutomationsByIdResponse.parseAsync(data);
    },
    responseStyle: "data",
    url: "/invoice-automations/{id}",
    ...options,
  });
};

export const getStatus = <ThrowOnError extends boolean = false>(
  options?: Options<GetStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetStatusResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetStatusData.parseAsync(data);
    },
    responseStyle: "data",
    url: "/status",
    ...options,
  });
};

export const headStatus = <ThrowOnError extends boolean = false>(
  options?: Options<HeadStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).head<
    HeadStatusResponses,
    unknown,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zHeadStatusData.parseAsync(data);
    },
    responseStyle: "data",
    url: "/status",
    ...options,
  });
};

/**
 * Sign in with a social provider
 */
export const socialSignIn = <ThrowOnError extends boolean = false>(
  options: Options<SocialSignInData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SocialSignInResponses,
    SocialSignInErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zSocialSignInData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zSocialSignInResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/sign-in/social",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get the current session
 */
export const getAuthGetSession = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthGetSessionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthGetSessionResponses,
    GetAuthGetSessionErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetAuthGetSessionData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthGetSessionResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/get-session",
    ...options,
  });
};

/**
 * Sign out the current user
 */
export const postAuthSignOut = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthSignOutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthSignOutResponses,
    PostAuthSignOutErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthSignOutData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthSignOutResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/sign-out",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sign up a user using email and password
 */
export const postAuthSignUpEmail = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthSignUpEmailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthSignUpEmailResponses,
    PostAuthSignUpEmailErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthSignUpEmailData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthSignUpEmailResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/sign-up/email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sign in with email and password
 */
export const postAuthSignInEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthSignInEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthSignInEmailResponses,
    PostAuthSignInEmailErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthSignInEmailData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthSignInEmailResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/sign-in/email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthForgetPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthForgetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthForgetPasswordResponses,
    PostAuthForgetPasswordErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthForgetPasswordData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthForgetPasswordResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/forget-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Reset the password for a user
 */
export const postAuthResetPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthResetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthResetPasswordResponses,
    PostAuthResetPasswordErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthResetPasswordData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthResetPasswordResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/reset-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Verify the email of the user
 */
export const getAuthVerifyEmail = <ThrowOnError extends boolean = false>(
  options: Options<GetAuthVerifyEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAuthVerifyEmailResponses,
    GetAuthVerifyEmailErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetAuthVerifyEmailData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthVerifyEmailResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/verify-email",
    ...options,
  });
};

/**
 * Send a verification email to the user
 */
export const postAuthSendVerificationEmail = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthSendVerificationEmailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthSendVerificationEmailResponses,
    PostAuthSendVerificationEmailErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthSendVerificationEmailData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthSendVerificationEmailResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/send-verification-email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postAuthChangeEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthChangeEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthChangeEmailResponses,
    PostAuthChangeEmailErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthChangeEmailData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthChangeEmailResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/change-email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Change the password of the user
 */
export const postAuthChangePassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthChangePasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthChangePasswordResponses,
    PostAuthChangePasswordErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthChangePasswordData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthChangePasswordResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/change-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update the current user
 */
export const postAuthUpdateUser = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthUpdateUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthUpdateUserResponses,
    PostAuthUpdateUserErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthUpdateUserData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthUpdateUserResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/update-user",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete the user
 */
export const postAuthDeleteUser = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthDeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthDeleteUserResponses,
    PostAuthDeleteUserErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthDeleteUserData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthDeleteUserResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/delete-user",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Redirects the user to the callback URL with the token
 */
export const getAuthResetPasswordByToken = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAuthResetPasswordByTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthResetPasswordByTokenResponses,
    GetAuthResetPasswordByTokenErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetAuthResetPasswordByTokenData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthResetPasswordByTokenResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/reset-password/{token}",
    ...options,
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthRequestPasswordReset = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRequestPasswordResetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthRequestPasswordResetResponses,
    PostAuthRequestPasswordResetErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthRequestPasswordResetData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthRequestPasswordResetResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/request-password-reset",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all active sessions for the user
 */
export const getAuthListSessions = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthListSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthListSessionsResponses,
    GetAuthListSessionsErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetAuthListSessionsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthListSessionsResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/list-sessions",
    ...options,
  });
};

/**
 * Revoke a single session
 */
export const postAuthRevokeSession = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRevokeSessionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthRevokeSessionResponses,
    PostAuthRevokeSessionErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthRevokeSessionData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthRevokeSessionResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/revoke-session",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Revoke all sessions for the user
 */
export const postAuthRevokeSessions = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRevokeSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthRevokeSessionsResponses,
    PostAuthRevokeSessionsErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthRevokeSessionsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthRevokeSessionsResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/revoke-sessions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Revoke all other sessions for the user except the current one
 */
export const postAuthRevokeOtherSessions = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRevokeOtherSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthRevokeOtherSessionsResponses,
    PostAuthRevokeOtherSessionsErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthRevokeOtherSessionsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthRevokeOtherSessionsResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/revoke-other-sessions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Link a social account to the user
 */
export const postAuthLinkSocial = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthLinkSocialData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthLinkSocialResponses,
    PostAuthLinkSocialErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthLinkSocialData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthLinkSocialResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/link-social",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all accounts linked to the user
 */
export const getAuthListAccounts = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthListAccountsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthListAccountsResponses,
    GetAuthListAccountsErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetAuthListAccountsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthListAccountsResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/list-accounts",
    ...options,
  });
};

/**
 * Callback to complete user deletion with verification token
 */
export const getAuthDeleteUserCallback = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthDeleteUserCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthDeleteUserCallbackResponses,
    GetAuthDeleteUserCallbackErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetAuthDeleteUserCallbackData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthDeleteUserCallbackResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/delete-user/callback",
    ...options,
  });
};

/**
 * Unlink an account
 */
export const postAuthUnlinkAccount = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthUnlinkAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthUnlinkAccountResponses,
    PostAuthUnlinkAccountErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthUnlinkAccountData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthUnlinkAccountResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/unlink-account",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Refresh the access token using a refresh token
 */
export const postAuthRefreshToken = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthRefreshTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthRefreshTokenResponses,
    PostAuthRefreshTokenErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthRefreshTokenData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthRefreshTokenResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/refresh-token",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a valid access token, doing a refresh if needed
 */
export const postAuthGetAccessToken = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthGetAccessTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthGetAccessTokenResponses,
    PostAuthGetAccessTokenErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthGetAccessTokenData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthGetAccessTokenResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/get-access-token",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get the account info provided by the provider
 */
export const postAuthAccountInfo = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthAccountInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthAccountInfoResponses,
    PostAuthAccountInfoErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zPostAuthAccountInfoData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthAccountInfoResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/account-info",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Check if the API is working
 */
export const getAuthOk = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthOkData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthOkResponses,
    GetAuthOkErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetAuthOkData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthOkResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/ok",
    ...options,
  });
};

/**
 * Displays an error page
 */
export const getAuthError = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthErrorData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthErrorResponses,
    GetAuthErrorErrors,
    ThrowOnError,
    "data"
  >({
    requestValidator: async (data) => {
      return await zGetAuthErrorData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthErrorResponse.parseAsync(data);
    },
    responseStyle: "data",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/error",
    ...options,
  });
};
