// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  GetClientData,
  GetClientResponses,
  PostClientData,
  PostClientResponses,
  DeleteClientByIdData,
  DeleteClientByIdResponses,
  GetClientByIdData,
  GetClientByIdResponses,
  PatchClientByIdData,
  PatchClientByIdResponses,
  GetProjectCountData,
  GetProjectCountResponses,
  GetProjectData,
  GetProjectResponses,
  PostProjectData,
  PostProjectResponses,
  DeleteProjectByIdData,
  DeleteProjectByIdResponses,
  GetProjectByIdData,
  GetProjectByIdResponses,
  PatchProjectByIdData,
  PatchProjectByIdResponses,
  GetTimeEntryActiveData,
  GetTimeEntryActiveResponses,
  DeleteTimeEntryByIdData,
  DeleteTimeEntryByIdResponses,
  DeleteTimeEntryByIdErrors,
  GetTimeEntryByIdData,
  GetTimeEntryByIdResponses,
  PatchTimeEntryByIdData,
  PatchTimeEntryByIdResponses,
  GetTimeEntryData,
  GetTimeEntryResponses,
  PostTimeEntryData,
  PostTimeEntryResponses,
  GetTimeEntryAnalyzeDurationByDateData,
  GetTimeEntryAnalyzeDurationByDateResponses,
  GetProjectTaskCountData,
  GetProjectTaskCountResponses,
  GetProjectTaskData,
  GetProjectTaskResponses,
  DeleteProjectTaskByIdData,
  DeleteProjectTaskByIdResponses,
  PatchProjectTaskByIdData,
  PatchProjectTaskByIdResponses,
  PostProjectTaskByIdData,
  PostProjectTaskByIdResponses,
  GetStatusData,
  GetStatusResponses,
  HeadStatusData,
  HeadStatusResponses,
  SocialSignInData,
  SocialSignInResponses,
  SocialSignInErrors,
  GetAuthGetSessionData,
  GetAuthGetSessionResponses,
  GetAuthGetSessionErrors,
  PostAuthSignOutData,
  PostAuthSignOutResponses,
  PostAuthSignOutErrors,
  PostAuthSignUpEmailData,
  PostAuthSignUpEmailResponses,
  PostAuthSignUpEmailErrors,
  PostAuthSignInEmailData,
  PostAuthSignInEmailResponses,
  PostAuthSignInEmailErrors,
  PostAuthForgetPasswordData,
  PostAuthForgetPasswordResponses,
  PostAuthForgetPasswordErrors,
  PostAuthResetPasswordData,
  PostAuthResetPasswordResponses,
  PostAuthResetPasswordErrors,
  GetAuthVerifyEmailData,
  GetAuthVerifyEmailResponses,
  GetAuthVerifyEmailErrors,
  PostAuthSendVerificationEmailData,
  PostAuthSendVerificationEmailResponses,
  PostAuthSendVerificationEmailErrors,
  PostAuthChangeEmailData,
  PostAuthChangeEmailResponses,
  PostAuthChangeEmailErrors,
  PostAuthChangePasswordData,
  PostAuthChangePasswordResponses,
  PostAuthChangePasswordErrors,
  PostAuthUpdateUserData,
  PostAuthUpdateUserResponses,
  PostAuthUpdateUserErrors,
  PostAuthDeleteUserData,
  PostAuthDeleteUserResponses,
  PostAuthDeleteUserErrors,
  GetAuthResetPasswordByTokenData,
  GetAuthResetPasswordByTokenResponses,
  GetAuthResetPasswordByTokenErrors,
  PostAuthRequestPasswordResetData,
  PostAuthRequestPasswordResetResponses,
  PostAuthRequestPasswordResetErrors,
  GetAuthListSessionsData,
  GetAuthListSessionsResponses,
  GetAuthListSessionsErrors,
  PostAuthRevokeSessionData,
  PostAuthRevokeSessionResponses,
  PostAuthRevokeSessionErrors,
  PostAuthRevokeSessionsData,
  PostAuthRevokeSessionsResponses,
  PostAuthRevokeSessionsErrors,
  PostAuthRevokeOtherSessionsData,
  PostAuthRevokeOtherSessionsResponses,
  PostAuthRevokeOtherSessionsErrors,
  PostAuthLinkSocialData,
  PostAuthLinkSocialResponses,
  PostAuthLinkSocialErrors,
  GetAuthListAccountsData,
  GetAuthListAccountsResponses,
  GetAuthListAccountsErrors,
  GetAuthDeleteUserCallbackData,
  GetAuthDeleteUserCallbackResponses,
  GetAuthDeleteUserCallbackErrors,
  PostAuthUnlinkAccountData,
  PostAuthUnlinkAccountResponses,
  PostAuthUnlinkAccountErrors,
  PostAuthRefreshTokenData,
  PostAuthRefreshTokenResponses,
  PostAuthRefreshTokenErrors,
  PostAuthGetAccessTokenData,
  PostAuthGetAccessTokenResponses,
  PostAuthGetAccessTokenErrors,
  PostAuthAccountInfoData,
  PostAuthAccountInfoResponses,
  PostAuthAccountInfoErrors,
  GetAuthOkData,
  GetAuthOkResponses,
  GetAuthOkErrors,
  GetAuthErrorData,
  GetAuthErrorResponses,
  GetAuthErrorErrors,
} from "./types.gen";
import {
  zGetClientData,
  zGetClientResponse,
  zPostClientData,
  zPostClientResponse,
  zDeleteClientByIdData,
  zGetClientByIdData,
  zGetClientByIdResponse,
  zPatchClientByIdData,
  zPatchClientByIdResponse,
  zGetProjectCountData,
  zGetProjectCountResponse,
  zGetProjectData,
  zGetProjectResponse,
  zPostProjectData,
  zPostProjectResponse,
  zDeleteProjectByIdData,
  zGetProjectByIdData,
  zGetProjectByIdResponse,
  zPatchProjectByIdData,
  zGetTimeEntryActiveData,
  zGetTimeEntryActiveResponse,
  zDeleteTimeEntryByIdData,
  zGetTimeEntryByIdData,
  zGetTimeEntryByIdResponse,
  zPatchTimeEntryByIdData,
  zPatchTimeEntryByIdResponse,
  zGetTimeEntryData,
  zGetTimeEntryResponse,
  zPostTimeEntryData,
  zPostTimeEntryResponse,
  zGetTimeEntryAnalyzeDurationByDateData,
  zGetTimeEntryAnalyzeDurationByDateResponse,
  zGetProjectTaskCountData,
  zGetProjectTaskCountResponse,
  zGetProjectTaskData,
  zGetProjectTaskResponse,
  zDeleteProjectTaskByIdData,
  zPatchProjectTaskByIdData,
  zPostProjectTaskByIdData,
  zPostProjectTaskByIdResponse,
  zGetStatusData,
  zHeadStatusData,
  zSocialSignInData,
  zSocialSignInResponse,
  zGetAuthGetSessionData,
  zGetAuthGetSessionResponse,
  zPostAuthSignOutData,
  zPostAuthSignOutResponse,
  zPostAuthSignUpEmailData,
  zPostAuthSignUpEmailResponse,
  zPostAuthSignInEmailData,
  zPostAuthSignInEmailResponse,
  zPostAuthForgetPasswordData,
  zPostAuthForgetPasswordResponse,
  zPostAuthResetPasswordData,
  zPostAuthResetPasswordResponse,
  zGetAuthVerifyEmailData,
  zGetAuthVerifyEmailResponse,
  zPostAuthSendVerificationEmailData,
  zPostAuthSendVerificationEmailResponse,
  zPostAuthChangeEmailData,
  zPostAuthChangeEmailResponse,
  zPostAuthChangePasswordData,
  zPostAuthChangePasswordResponse,
  zPostAuthUpdateUserData,
  zPostAuthUpdateUserResponse,
  zPostAuthDeleteUserData,
  zPostAuthDeleteUserResponse,
  zGetAuthResetPasswordByTokenData,
  zGetAuthResetPasswordByTokenResponse,
  zPostAuthRequestPasswordResetData,
  zPostAuthRequestPasswordResetResponse,
  zGetAuthListSessionsData,
  zGetAuthListSessionsResponse,
  zPostAuthRevokeSessionData,
  zPostAuthRevokeSessionResponse,
  zPostAuthRevokeSessionsData,
  zPostAuthRevokeSessionsResponse,
  zPostAuthRevokeOtherSessionsData,
  zPostAuthRevokeOtherSessionsResponse,
  zPostAuthLinkSocialData,
  zPostAuthLinkSocialResponse,
  zGetAuthListAccountsData,
  zGetAuthListAccountsResponse,
  zGetAuthDeleteUserCallbackData,
  zGetAuthDeleteUserCallbackResponse,
  zPostAuthUnlinkAccountData,
  zPostAuthUnlinkAccountResponse,
  zPostAuthRefreshTokenData,
  zPostAuthRefreshTokenResponse,
  zPostAuthGetAccessTokenData,
  zPostAuthGetAccessTokenResponse,
  zPostAuthAccountInfoData,
  zPostAuthAccountInfoResponse,
  zGetAuthOkData,
  zGetAuthOkResponse,
  zGetAuthErrorData,
  zGetAuthErrorResponse,
} from "./zod.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get all user-defined clients
 */
export const getClient = <ThrowOnError extends boolean = false>(
  options?: Options<GetClientData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetClientResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetClientData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetClientResponse.parseAsync(data);
    },
    url: "/client",
    ...options,
  });
};

/**
 * Create new user-defined client
 */
export const postClient = <ThrowOnError extends boolean = false>(
  options: Options<PostClientData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostClientResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostClientData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostClientResponse.parseAsync(data);
    },
    url: "/client",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete user-defined client, all projects containing this client will be unset
 */
export const deleteClientById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteClientByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteClientByIdResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zDeleteClientByIdData.parseAsync(data);
    },
    url: "/client/{id}",
    ...options,
  });
};

/**
 * Get user-defined client by ID
 */
export const getClientById = <ThrowOnError extends boolean = false>(
  options: Options<GetClientByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetClientByIdResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetClientByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetClientByIdResponse.parseAsync(data);
    },
    url: "/client/{id}",
    ...options,
  });
};

/**
 * Update user-defined client data
 */
export const patchClientById = <ThrowOnError extends boolean = false>(
  options: Options<PatchClientByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchClientByIdResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPatchClientByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPatchClientByIdResponse.parseAsync(data);
    },
    url: "/client/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getProjectCount = <ThrowOnError extends boolean = false>(
  options?: Options<GetProjectCountData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetProjectCountResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetProjectCountData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetProjectCountResponse.parseAsync(data);
    },
    url: "/project/count",
    ...options,
  });
};

/**
 * Get all user projects
 */
export const getProject = <ThrowOnError extends boolean = false>(
  options?: Options<GetProjectData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetProjectResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetProjectData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetProjectResponse.parseAsync(data);
    },
    url: "/project",
    ...options,
  });
};

/**
 * Create new user project
 */
export const postProject = <ThrowOnError extends boolean = false>(
  options: Options<PostProjectData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostProjectResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostProjectData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostProjectResponse.parseAsync(data);
    },
    url: "/project",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete user project, all time entries will be removed
 */
export const deleteProjectById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectByIdResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zDeleteProjectByIdData.parseAsync(data);
    },
    url: "/project/{id}",
    ...options,
  });
};

/**
 * Get user project by ID
 */
export const getProjectById = <ThrowOnError extends boolean = false>(
  options: Options<GetProjectByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProjectByIdResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetProjectByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetProjectByIdResponse.parseAsync(data);
    },
    url: "/project/{id}",
    ...options,
  });
};

/**
 * Update user project data
 */
export const patchProjectById = <ThrowOnError extends boolean = false>(
  options: Options<PatchProjectByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchProjectByIdResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPatchProjectByIdData.parseAsync(data);
    },
    url: "/project/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get active time entry
 */
export const getTimeEntryActive = <ThrowOnError extends boolean = false>(
  options?: Options<GetTimeEntryActiveData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetTimeEntryActiveResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetTimeEntryActiveData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetTimeEntryActiveResponse.parseAsync(data);
    },
    url: "/time-entry/active",
    ...options,
  });
};

/**
 * Delete time entry
 */
export const deleteTimeEntryById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTimeEntryByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteTimeEntryByIdResponses,
    DeleteTimeEntryByIdErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zDeleteTimeEntryByIdData.parseAsync(data);
    },
    url: "/time-entry/{id}",
    ...options,
  });
};

/**
 * Return time entry by ID
 */
export const getTimeEntryById = <ThrowOnError extends boolean = false>(
  options: Options<GetTimeEntryByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetTimeEntryByIdResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetTimeEntryByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetTimeEntryByIdResponse.parseAsync(data);
    },
    url: "/time-entry/{id}",
    ...options,
  });
};

/**
 * Update existing time entry
 */
export const patchTimeEntryById = <ThrowOnError extends boolean = false>(
  options: Options<PatchTimeEntryByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchTimeEntryByIdResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPatchTimeEntryByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPatchTimeEntryByIdResponse.parseAsync(data);
    },
    url: "/time-entry/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getTimeEntry = <ThrowOnError extends boolean = false>(
  options?: Options<GetTimeEntryData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetTimeEntryResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetTimeEntryData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetTimeEntryResponse.parseAsync(data);
    },
    url: "/time-entry",
    ...options,
  });
};

/**
 * Create new time entry
 */
export const postTimeEntry = <ThrowOnError extends boolean = false>(
  options: Options<PostTimeEntryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostTimeEntryResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostTimeEntryData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostTimeEntryResponse.parseAsync(data);
    },
    url: "/time-entry",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getTimeEntryAnalyzeDurationByDate = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetTimeEntryAnalyzeDurationByDateData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetTimeEntryAnalyzeDurationByDateResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetTimeEntryAnalyzeDurationByDateData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetTimeEntryAnalyzeDurationByDateResponse.parseAsync(data);
    },
    url: "/time-entry/analyze/duration-by-date",
    ...options,
  });
};

export const getProjectTaskCount = <ThrowOnError extends boolean = false>(
  options?: Options<GetProjectTaskCountData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetProjectTaskCountResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetProjectTaskCountData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetProjectTaskCountResponse.parseAsync(data);
    },
    url: "/project-task/count",
    ...options,
  });
};

export const getProjectTask = <ThrowOnError extends boolean = false>(
  options?: Options<GetProjectTaskData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetProjectTaskResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetProjectTaskData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetProjectTaskResponse.parseAsync(data);
    },
    url: "/project-task",
    ...options,
  });
};

/**
 * Delete project task by ID
 */
export const deleteProjectTaskById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectTaskByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectTaskByIdResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zDeleteProjectTaskByIdData.parseAsync(data);
    },
    url: "/project-task/{id}",
    ...options,
  });
};

export const patchProjectTaskById = <ThrowOnError extends boolean = false>(
  options: Options<PatchProjectTaskByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchProjectTaskByIdResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPatchProjectTaskByIdData.parseAsync(data);
    },
    url: "/project-task/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create new project task
 */
export const postProjectTaskById = <ThrowOnError extends boolean = false>(
  options: Options<PostProjectTaskByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostProjectTaskByIdResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostProjectTaskByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostProjectTaskByIdResponse.parseAsync(data);
    },
    url: "/project-task/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getStatus = <ThrowOnError extends boolean = false>(
  options?: Options<GetStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetStatusResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetStatusData.parseAsync(data);
    },
    url: "/status",
    ...options,
  });
};

export const headStatus = <ThrowOnError extends boolean = false>(
  options?: Options<HeadStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).head<
    HeadStatusResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zHeadStatusData.parseAsync(data);
    },
    url: "/status",
    ...options,
  });
};

/**
 * Sign in with a social provider
 */
export const socialSignIn = <ThrowOnError extends boolean = false>(
  options: Options<SocialSignInData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SocialSignInResponses,
    SocialSignInErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zSocialSignInData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zSocialSignInResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/sign-in/social",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get the current session
 */
export const getAuthGetSession = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthGetSessionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthGetSessionResponses,
    GetAuthGetSessionErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetAuthGetSessionData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthGetSessionResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/get-session",
    ...options,
  });
};

/**
 * Sign out the current user
 */
export const postAuthSignOut = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthSignOutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthSignOutResponses,
    PostAuthSignOutErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthSignOutData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthSignOutResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/sign-out",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sign up a user using email and password
 */
export const postAuthSignUpEmail = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthSignUpEmailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthSignUpEmailResponses,
    PostAuthSignUpEmailErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthSignUpEmailData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthSignUpEmailResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/sign-up/email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sign in with email and password
 */
export const postAuthSignInEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthSignInEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthSignInEmailResponses,
    PostAuthSignInEmailErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthSignInEmailData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthSignInEmailResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/sign-in/email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthForgetPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthForgetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthForgetPasswordResponses,
    PostAuthForgetPasswordErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthForgetPasswordData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthForgetPasswordResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/forget-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Reset the password for a user
 */
export const postAuthResetPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthResetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthResetPasswordResponses,
    PostAuthResetPasswordErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthResetPasswordData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthResetPasswordResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/reset-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Verify the email of the user
 */
export const getAuthVerifyEmail = <ThrowOnError extends boolean = false>(
  options: Options<GetAuthVerifyEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAuthVerifyEmailResponses,
    GetAuthVerifyEmailErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetAuthVerifyEmailData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthVerifyEmailResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/verify-email",
    ...options,
  });
};

/**
 * Send a verification email to the user
 */
export const postAuthSendVerificationEmail = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthSendVerificationEmailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthSendVerificationEmailResponses,
    PostAuthSendVerificationEmailErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthSendVerificationEmailData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthSendVerificationEmailResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/send-verification-email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postAuthChangeEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthChangeEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthChangeEmailResponses,
    PostAuthChangeEmailErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthChangeEmailData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthChangeEmailResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/change-email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Change the password of the user
 */
export const postAuthChangePassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthChangePasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthChangePasswordResponses,
    PostAuthChangePasswordErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthChangePasswordData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthChangePasswordResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/change-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update the current user
 */
export const postAuthUpdateUser = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthUpdateUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthUpdateUserResponses,
    PostAuthUpdateUserErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthUpdateUserData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthUpdateUserResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/update-user",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete the user
 */
export const postAuthDeleteUser = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthDeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthDeleteUserResponses,
    PostAuthDeleteUserErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthDeleteUserData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthDeleteUserResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/delete-user",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Redirects the user to the callback URL with the token
 */
export const getAuthResetPasswordByToken = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAuthResetPasswordByTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthResetPasswordByTokenResponses,
    GetAuthResetPasswordByTokenErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetAuthResetPasswordByTokenData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthResetPasswordByTokenResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/reset-password/{token}",
    ...options,
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthRequestPasswordReset = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRequestPasswordResetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthRequestPasswordResetResponses,
    PostAuthRequestPasswordResetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthRequestPasswordResetData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthRequestPasswordResetResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/request-password-reset",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all active sessions for the user
 */
export const getAuthListSessions = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthListSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthListSessionsResponses,
    GetAuthListSessionsErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetAuthListSessionsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthListSessionsResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/list-sessions",
    ...options,
  });
};

/**
 * Revoke a single session
 */
export const postAuthRevokeSession = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRevokeSessionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthRevokeSessionResponses,
    PostAuthRevokeSessionErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthRevokeSessionData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthRevokeSessionResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/revoke-session",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Revoke all sessions for the user
 */
export const postAuthRevokeSessions = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRevokeSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthRevokeSessionsResponses,
    PostAuthRevokeSessionsErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthRevokeSessionsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthRevokeSessionsResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/revoke-sessions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Revoke all other sessions for the user except the current one
 */
export const postAuthRevokeOtherSessions = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRevokeOtherSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthRevokeOtherSessionsResponses,
    PostAuthRevokeOtherSessionsErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthRevokeOtherSessionsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthRevokeOtherSessionsResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/revoke-other-sessions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Link a social account to the user
 */
export const postAuthLinkSocial = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthLinkSocialData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthLinkSocialResponses,
    PostAuthLinkSocialErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthLinkSocialData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthLinkSocialResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/link-social",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all accounts linked to the user
 */
export const getAuthListAccounts = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthListAccountsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthListAccountsResponses,
    GetAuthListAccountsErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetAuthListAccountsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthListAccountsResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/list-accounts",
    ...options,
  });
};

/**
 * Callback to complete user deletion with verification token
 */
export const getAuthDeleteUserCallback = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthDeleteUserCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthDeleteUserCallbackResponses,
    GetAuthDeleteUserCallbackErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetAuthDeleteUserCallbackData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthDeleteUserCallbackResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/delete-user/callback",
    ...options,
  });
};

/**
 * Unlink an account
 */
export const postAuthUnlinkAccount = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthUnlinkAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthUnlinkAccountResponses,
    PostAuthUnlinkAccountErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthUnlinkAccountData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthUnlinkAccountResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/unlink-account",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Refresh the access token using a refresh token
 */
export const postAuthRefreshToken = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthRefreshTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthRefreshTokenResponses,
    PostAuthRefreshTokenErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthRefreshTokenData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthRefreshTokenResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/refresh-token",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a valid access token, doing a refresh if needed
 */
export const postAuthGetAccessToken = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthGetAccessTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthGetAccessTokenResponses,
    PostAuthGetAccessTokenErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthGetAccessTokenData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthGetAccessTokenResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/get-access-token",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get the account info provided by the provider
 */
export const postAuthAccountInfo = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthAccountInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthAccountInfoResponses,
    PostAuthAccountInfoErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostAuthAccountInfoData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostAuthAccountInfoResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/account-info",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Check if the API is working
 */
export const getAuthOk = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthOkData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthOkResponses,
    GetAuthOkErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetAuthOkData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthOkResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/ok",
    ...options,
  });
};

/**
 * Displays an error page
 */
export const getAuthError = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthErrorData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthErrorResponses,
    GetAuthErrorErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetAuthErrorData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetAuthErrorResponse.parseAsync(data);
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/error",
    ...options,
  });
};
