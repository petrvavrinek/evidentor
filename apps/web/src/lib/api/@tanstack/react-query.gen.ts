// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getClients,
  postClients,
  deleteClientsById,
  getClientsById,
  patchClientsById,
  getInvoices,
  postInvoices,
  deleteInvoicesById,
  getInvoicesById,
  getInvoicesByIdGenerated,
  getProjectTasksCount,
  getProjectTasks,
  deleteProjectTasksById,
  patchProjectTasksById,
  postProjectTasksById,
  getProjectsCount,
  getProjects,
  postProjects,
  deleteProjectsById,
  getProjectsById,
  patchProjectsById,
  getTimeEntriesActive,
  deleteTimeEntriesById,
  getTimeEntriesById,
  patchTimeEntriesById,
  getTimeEntries,
  postTimeEntries,
  getTimeEntriesAnalyzeDurationByDate,
  getCalendars,
  getUserBilling,
  putUserBilling,
  getInvoiceAutomations,
  postInvoiceAutomations,
  deleteInvoiceAutomationsById,
  getInvoiceAutomationsById,
  patchInvoiceAutomationsById,
  getStatus,
  socialSignIn,
  getAuthGetSession,
  postAuthSignOut,
  postAuthSignUpEmail,
  postAuthSignInEmail,
  postAuthForgetPassword,
  postAuthResetPassword,
  getAuthVerifyEmail,
  postAuthSendVerificationEmail,
  postAuthChangeEmail,
  postAuthChangePassword,
  postAuthUpdateUser,
  postAuthDeleteUser,
  getAuthResetPasswordByToken,
  postAuthRequestPasswordReset,
  getAuthListSessions,
  postAuthRevokeSession,
  postAuthRevokeSessions,
  postAuthRevokeOtherSessions,
  postAuthLinkSocial,
  getAuthListAccounts,
  getAuthDeleteUserCallback,
  postAuthUnlinkAccount,
  postAuthRefreshToken,
  postAuthGetAccessToken,
  postAuthAccountInfo,
  getAuthOk,
  getAuthError,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  GetClientsData,
  PostClientsData,
  PostClientsResponse,
  DeleteClientsByIdData,
  GetClientsByIdData,
  PatchClientsByIdData,
  PatchClientsByIdResponse,
  GetInvoicesData,
  PostInvoicesData,
  PostInvoicesResponse,
  DeleteInvoicesByIdData,
  DeleteInvoicesByIdResponse,
  GetInvoicesByIdData,
  GetInvoicesByIdGeneratedData,
  GetProjectTasksCountData,
  GetProjectTasksData,
  DeleteProjectTasksByIdData,
  PatchProjectTasksByIdData,
  PostProjectTasksByIdData,
  PostProjectTasksByIdResponse,
  GetProjectsCountData,
  GetProjectsData,
  PostProjectsData,
  PostProjectsResponse,
  DeleteProjectsByIdData,
  GetProjectsByIdData,
  PatchProjectsByIdData,
  GetTimeEntriesActiveData,
  DeleteTimeEntriesByIdData,
  GetTimeEntriesByIdData,
  PatchTimeEntriesByIdData,
  PatchTimeEntriesByIdResponse,
  GetTimeEntriesData,
  PostTimeEntriesData,
  PostTimeEntriesResponse,
  GetTimeEntriesAnalyzeDurationByDateData,
  GetCalendarsData,
  GetUserBillingData,
  PutUserBillingData,
  PutUserBillingResponse,
  GetInvoiceAutomationsData,
  PostInvoiceAutomationsData,
  PostInvoiceAutomationsResponse,
  DeleteInvoiceAutomationsByIdData,
  GetInvoiceAutomationsByIdData,
  PatchInvoiceAutomationsByIdData,
  PatchInvoiceAutomationsByIdResponse,
  GetStatusData,
  SocialSignInData,
  SocialSignInError,
  SocialSignInResponse,
  GetAuthGetSessionData,
  PostAuthSignOutData,
  PostAuthSignOutError,
  PostAuthSignOutResponse,
  PostAuthSignUpEmailData,
  PostAuthSignUpEmailError,
  PostAuthSignUpEmailResponse,
  PostAuthSignInEmailData,
  PostAuthSignInEmailError,
  PostAuthSignInEmailResponse,
  PostAuthForgetPasswordData,
  PostAuthForgetPasswordError,
  PostAuthForgetPasswordResponse,
  PostAuthResetPasswordData,
  PostAuthResetPasswordError,
  PostAuthResetPasswordResponse,
  GetAuthVerifyEmailData,
  PostAuthSendVerificationEmailData,
  PostAuthSendVerificationEmailError,
  PostAuthSendVerificationEmailResponse,
  PostAuthChangeEmailData,
  PostAuthChangeEmailError,
  PostAuthChangeEmailResponse,
  PostAuthChangePasswordData,
  PostAuthChangePasswordError,
  PostAuthChangePasswordResponse,
  PostAuthUpdateUserData,
  PostAuthUpdateUserError,
  PostAuthUpdateUserResponse,
  PostAuthDeleteUserData,
  PostAuthDeleteUserError,
  PostAuthDeleteUserResponse,
  GetAuthResetPasswordByTokenData,
  PostAuthRequestPasswordResetData,
  PostAuthRequestPasswordResetError,
  PostAuthRequestPasswordResetResponse,
  GetAuthListSessionsData,
  PostAuthRevokeSessionData,
  PostAuthRevokeSessionError,
  PostAuthRevokeSessionResponse,
  PostAuthRevokeSessionsData,
  PostAuthRevokeSessionsError,
  PostAuthRevokeSessionsResponse,
  PostAuthRevokeOtherSessionsData,
  PostAuthRevokeOtherSessionsError,
  PostAuthRevokeOtherSessionsResponse,
  PostAuthLinkSocialData,
  PostAuthLinkSocialError,
  PostAuthLinkSocialResponse,
  GetAuthListAccountsData,
  GetAuthDeleteUserCallbackData,
  PostAuthUnlinkAccountData,
  PostAuthUnlinkAccountError,
  PostAuthUnlinkAccountResponse,
  PostAuthRefreshTokenData,
  PostAuthRefreshTokenError,
  PostAuthRefreshTokenResponse,
  PostAuthGetAccessTokenData,
  PostAuthGetAccessTokenError,
  PostAuthGetAccessTokenResponse,
  PostAuthAccountInfoData,
  PostAuthAccountInfoError,
  PostAuthAccountInfoResponse,
  GetAuthOkData,
  GetAuthErrorData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getClientsQueryKey = (options?: Options<GetClientsData>) =>
  createQueryKey("getClients", options);

/**
 * Get all user-defined clients
 */
export const getClientsOptions = (options?: Options<GetClientsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getClients({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getClientsQueryKey(options),
  });
};

export const postClientsQueryKey = (options: Options<PostClientsData>) =>
  createQueryKey("postClients", options);

/**
 * Create new client
 */
export const postClientsOptions = (options: Options<PostClientsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postClients({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postClientsQueryKey(options),
  });
};

/**
 * Create new client
 */
export const postClientsMutation = (
  options?: Partial<Options<PostClientsData>>,
): UseMutationOptions<
  PostClientsResponse,
  DefaultError,
  Options<PostClientsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostClientsResponse,
    DefaultError,
    Options<PostClientsData>
  > = {
    mutationFn: async (localOptions) => {
      return await postClients({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

/**
 * Delete user-defined client, all projects containing this client will be unset
 */
export const deleteClientsByIdMutation = (
  options?: Partial<Options<DeleteClientsByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteClientsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteClientsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await deleteClientsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getClientsByIdQueryKey = (options: Options<GetClientsByIdData>) =>
  createQueryKey("getClientsById", options);

/**
 * Get user-defined client by ID
 */
export const getClientsByIdOptions = (options: Options<GetClientsByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getClientsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getClientsByIdQueryKey(options),
  });
};

/**
 * Update user-defined client data
 */
export const patchClientsByIdMutation = (
  options?: Partial<Options<PatchClientsByIdData>>,
): UseMutationOptions<
  PatchClientsByIdResponse,
  DefaultError,
  Options<PatchClientsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchClientsByIdResponse,
    DefaultError,
    Options<PatchClientsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await patchClientsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getInvoicesQueryKey = (options?: Options<GetInvoicesData>) =>
  createQueryKey("getInvoices", options);

/**
 * Get all user invoices
 */
export const getInvoicesOptions = (options?: Options<GetInvoicesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getInvoices({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getInvoicesQueryKey(options),
  });
};

export const postInvoicesQueryKey = (options: Options<PostInvoicesData>) =>
  createQueryKey("postInvoices", options);

/**
 * Create invoice
 */
export const postInvoicesOptions = (options: Options<PostInvoicesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postInvoices({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postInvoicesQueryKey(options),
  });
};

/**
 * Create invoice
 */
export const postInvoicesMutation = (
  options?: Partial<Options<PostInvoicesData>>,
): UseMutationOptions<
  PostInvoicesResponse,
  DefaultError,
  Options<PostInvoicesData>
> => {
  const mutationOptions: UseMutationOptions<
    PostInvoicesResponse,
    DefaultError,
    Options<PostInvoicesData>
  > = {
    mutationFn: async (localOptions) => {
      return await postInvoices({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

/**
 * Delete invoice
 */
export const deleteInvoicesByIdMutation = (
  options?: Partial<Options<DeleteInvoicesByIdData>>,
): UseMutationOptions<
  DeleteInvoicesByIdResponse,
  DefaultError,
  Options<DeleteInvoicesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteInvoicesByIdResponse,
    DefaultError,
    Options<DeleteInvoicesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await deleteInvoicesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getInvoicesByIdQueryKey = (
  options: Options<GetInvoicesByIdData>,
) => createQueryKey("getInvoicesById", options);

/**
 * Get invoice by id
 */
export const getInvoicesByIdOptions = (
  options: Options<GetInvoicesByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getInvoicesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getInvoicesByIdQueryKey(options),
  });
};

export const getInvoicesByIdGeneratedQueryKey = (
  options: Options<GetInvoicesByIdGeneratedData>,
) => createQueryKey("getInvoicesByIdGenerated", options);

export const getInvoicesByIdGeneratedOptions = (
  options: Options<GetInvoicesByIdGeneratedData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getInvoicesByIdGenerated({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getInvoicesByIdGeneratedQueryKey(options),
  });
};

export const getProjectTasksCountQueryKey = (
  options?: Options<GetProjectTasksCountData>,
) => createQueryKey("getProjectTasksCount", options);

export const getProjectTasksCountOptions = (
  options?: Options<GetProjectTasksCountData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getProjectTasksCount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getProjectTasksCountQueryKey(options),
  });
};

export const getProjectTasksQueryKey = (
  options?: Options<GetProjectTasksData>,
) => createQueryKey("getProjectTasks", options);

export const getProjectTasksOptions = (
  options?: Options<GetProjectTasksData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getProjectTasks({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getProjectTasksQueryKey(options),
  });
};

/**
 * Delete project task by ID
 */
export const deleteProjectTasksByIdMutation = (
  options?: Partial<Options<DeleteProjectTasksByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteProjectTasksByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteProjectTasksByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await deleteProjectTasksById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const patchProjectTasksByIdMutation = (
  options?: Partial<Options<PatchProjectTasksByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PatchProjectTasksByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PatchProjectTasksByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await patchProjectTasksById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postProjectTasksByIdQueryKey = (
  options: Options<PostProjectTasksByIdData>,
) => createQueryKey("postProjectTasksById", options);

/**
 * Create new project task
 */
export const postProjectTasksByIdOptions = (
  options: Options<PostProjectTasksByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postProjectTasksById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postProjectTasksByIdQueryKey(options),
  });
};

/**
 * Create new project task
 */
export const postProjectTasksByIdMutation = (
  options?: Partial<Options<PostProjectTasksByIdData>>,
): UseMutationOptions<
  PostProjectTasksByIdResponse,
  DefaultError,
  Options<PostProjectTasksByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PostProjectTasksByIdResponse,
    DefaultError,
    Options<PostProjectTasksByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await postProjectTasksById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getProjectsCountQueryKey = (
  options?: Options<GetProjectsCountData>,
) => createQueryKey("getProjectsCount", options);

export const getProjectsCountOptions = (
  options?: Options<GetProjectsCountData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getProjectsCount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getProjectsCountQueryKey(options),
  });
};

export const getProjectsQueryKey = (options?: Options<GetProjectsData>) =>
  createQueryKey("getProjects", options);

/**
 * Get all user projects
 */
export const getProjectsOptions = (options?: Options<GetProjectsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getProjects({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getProjectsQueryKey(options),
  });
};

export const postProjectsQueryKey = (options: Options<PostProjectsData>) =>
  createQueryKey("postProjects", options);

/**
 * Create new user project
 */
export const postProjectsOptions = (options: Options<PostProjectsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postProjects({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postProjectsQueryKey(options),
  });
};

/**
 * Create new user project
 */
export const postProjectsMutation = (
  options?: Partial<Options<PostProjectsData>>,
): UseMutationOptions<
  PostProjectsResponse,
  DefaultError,
  Options<PostProjectsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostProjectsResponse,
    DefaultError,
    Options<PostProjectsData>
  > = {
    mutationFn: async (localOptions) => {
      return await postProjects({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

/**
 * Delete user project, all time entries will be removed
 */
export const deleteProjectsByIdMutation = (
  options?: Partial<Options<DeleteProjectsByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteProjectsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteProjectsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await deleteProjectsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getProjectsByIdQueryKey = (
  options: Options<GetProjectsByIdData>,
) => createQueryKey("getProjectsById", options);

/**
 * Get user project by ID
 */
export const getProjectsByIdOptions = (
  options: Options<GetProjectsByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getProjectsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getProjectsByIdQueryKey(options),
  });
};

/**
 * Update user project data
 */
export const patchProjectsByIdMutation = (
  options?: Partial<Options<PatchProjectsByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PatchProjectsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PatchProjectsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await patchProjectsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getTimeEntriesActiveQueryKey = (
  options?: Options<GetTimeEntriesActiveData>,
) => createQueryKey("getTimeEntriesActive", options);

/**
 * Get active time entry
 */
export const getTimeEntriesActiveOptions = (
  options?: Options<GetTimeEntriesActiveData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getTimeEntriesActive({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getTimeEntriesActiveQueryKey(options),
  });
};

/**
 * Delete time entry
 */
export const deleteTimeEntriesByIdMutation = (
  options?: Partial<Options<DeleteTimeEntriesByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteTimeEntriesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteTimeEntriesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await deleteTimeEntriesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getTimeEntriesByIdQueryKey = (
  options: Options<GetTimeEntriesByIdData>,
) => createQueryKey("getTimeEntriesById", options);

/**
 * Return time entry by ID
 */
export const getTimeEntriesByIdOptions = (
  options: Options<GetTimeEntriesByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getTimeEntriesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getTimeEntriesByIdQueryKey(options),
  });
};

/**
 * Update existing time entry
 */
export const patchTimeEntriesByIdMutation = (
  options?: Partial<Options<PatchTimeEntriesByIdData>>,
): UseMutationOptions<
  PatchTimeEntriesByIdResponse,
  DefaultError,
  Options<PatchTimeEntriesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchTimeEntriesByIdResponse,
    DefaultError,
    Options<PatchTimeEntriesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await patchTimeEntriesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getTimeEntriesQueryKey = (options?: Options<GetTimeEntriesData>) =>
  createQueryKey("getTimeEntries", options);

export const getTimeEntriesOptions = (
  options?: Options<GetTimeEntriesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getTimeEntries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getTimeEntriesQueryKey(options),
  });
};

export const postTimeEntriesQueryKey = (
  options: Options<PostTimeEntriesData>,
) => createQueryKey("postTimeEntries", options);

/**
 * Create new time entry
 */
export const postTimeEntriesOptions = (
  options: Options<PostTimeEntriesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postTimeEntries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postTimeEntriesQueryKey(options),
  });
};

/**
 * Create new time entry
 */
export const postTimeEntriesMutation = (
  options?: Partial<Options<PostTimeEntriesData>>,
): UseMutationOptions<
  PostTimeEntriesResponse,
  DefaultError,
  Options<PostTimeEntriesData>
> => {
  const mutationOptions: UseMutationOptions<
    PostTimeEntriesResponse,
    DefaultError,
    Options<PostTimeEntriesData>
  > = {
    mutationFn: async (localOptions) => {
      return await postTimeEntries({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getTimeEntriesAnalyzeDurationByDateQueryKey = (
  options?: Options<GetTimeEntriesAnalyzeDurationByDateData>,
) => createQueryKey("getTimeEntriesAnalyzeDurationByDate", options);

export const getTimeEntriesAnalyzeDurationByDateOptions = (
  options?: Options<GetTimeEntriesAnalyzeDurationByDateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getTimeEntriesAnalyzeDurationByDate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getTimeEntriesAnalyzeDurationByDateQueryKey(options),
  });
};

export const getCalendarsQueryKey = (options?: Options<GetCalendarsData>) =>
  createQueryKey("getCalendars", options);

export const getCalendarsOptions = (options?: Options<GetCalendarsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getCalendars({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getCalendarsQueryKey(options),
  });
};

export const getUserBillingQueryKey = (options?: Options<GetUserBillingData>) =>
  createQueryKey("getUserBilling", options);

export const getUserBillingOptions = (
  options?: Options<GetUserBillingData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getUserBilling({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getUserBillingQueryKey(options),
  });
};

export const putUserBillingMutation = (
  options?: Partial<Options<PutUserBillingData>>,
): UseMutationOptions<
  PutUserBillingResponse,
  DefaultError,
  Options<PutUserBillingData>
> => {
  const mutationOptions: UseMutationOptions<
    PutUserBillingResponse,
    DefaultError,
    Options<PutUserBillingData>
  > = {
    mutationFn: async (localOptions) => {
      return await putUserBilling({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getInvoiceAutomationsQueryKey = (
  options?: Options<GetInvoiceAutomationsData>,
) => createQueryKey("getInvoiceAutomations", options);

export const getInvoiceAutomationsOptions = (
  options?: Options<GetInvoiceAutomationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getInvoiceAutomations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getInvoiceAutomationsQueryKey(options),
  });
};

export const postInvoiceAutomationsQueryKey = (
  options: Options<PostInvoiceAutomationsData>,
) => createQueryKey("postInvoiceAutomations", options);

export const postInvoiceAutomationsOptions = (
  options: Options<PostInvoiceAutomationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postInvoiceAutomations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postInvoiceAutomationsQueryKey(options),
  });
};

export const postInvoiceAutomationsMutation = (
  options?: Partial<Options<PostInvoiceAutomationsData>>,
): UseMutationOptions<
  PostInvoiceAutomationsResponse,
  DefaultError,
  Options<PostInvoiceAutomationsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostInvoiceAutomationsResponse,
    DefaultError,
    Options<PostInvoiceAutomationsData>
  > = {
    mutationFn: async (localOptions) => {
      return await postInvoiceAutomations({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const deleteInvoiceAutomationsByIdMutation = (
  options?: Partial<Options<DeleteInvoiceAutomationsByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteInvoiceAutomationsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteInvoiceAutomationsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await deleteInvoiceAutomationsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getInvoiceAutomationsByIdQueryKey = (
  options: Options<GetInvoiceAutomationsByIdData>,
) => createQueryKey("getInvoiceAutomationsById", options);

export const getInvoiceAutomationsByIdOptions = (
  options: Options<GetInvoiceAutomationsByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getInvoiceAutomationsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getInvoiceAutomationsByIdQueryKey(options),
  });
};

export const patchInvoiceAutomationsByIdMutation = (
  options?: Partial<Options<PatchInvoiceAutomationsByIdData>>,
): UseMutationOptions<
  PatchInvoiceAutomationsByIdResponse,
  DefaultError,
  Options<PatchInvoiceAutomationsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchInvoiceAutomationsByIdResponse,
    DefaultError,
    Options<PatchInvoiceAutomationsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await patchInvoiceAutomationsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getStatusQueryKey = (options?: Options<GetStatusData>) =>
  createQueryKey("getStatus", options);

export const getStatusOptions = (options?: Options<GetStatusData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getStatusQueryKey(options),
  });
};

export const socialSignInQueryKey = (options: Options<SocialSignInData>) =>
  createQueryKey("socialSignIn", options);

/**
 * Sign in with a social provider
 */
export const socialSignInOptions = (options: Options<SocialSignInData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await socialSignIn({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: socialSignInQueryKey(options),
  });
};

/**
 * Sign in with a social provider
 */
export const socialSignInMutation = (
  options?: Partial<Options<SocialSignInData>>,
): UseMutationOptions<
  SocialSignInResponse,
  SocialSignInError,
  Options<SocialSignInData>
> => {
  const mutationOptions: UseMutationOptions<
    SocialSignInResponse,
    SocialSignInError,
    Options<SocialSignInData>
  > = {
    mutationFn: async (localOptions) => {
      return await socialSignIn({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getAuthGetSessionQueryKey = (
  options?: Options<GetAuthGetSessionData>,
) => createQueryKey("getAuthGetSession", options);

/**
 * Get the current session
 */
export const getAuthGetSessionOptions = (
  options?: Options<GetAuthGetSessionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getAuthGetSession({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getAuthGetSessionQueryKey(options),
  });
};

export const postAuthSignOutQueryKey = (
  options?: Options<PostAuthSignOutData>,
) => createQueryKey("postAuthSignOut", options);

/**
 * Sign out the current user
 */
export const postAuthSignOutOptions = (
  options?: Options<PostAuthSignOutData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthSignOut({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthSignOutQueryKey(options),
  });
};

/**
 * Sign out the current user
 */
export const postAuthSignOutMutation = (
  options?: Partial<Options<PostAuthSignOutData>>,
): UseMutationOptions<
  PostAuthSignOutResponse,
  PostAuthSignOutError,
  Options<PostAuthSignOutData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthSignOutResponse,
    PostAuthSignOutError,
    Options<PostAuthSignOutData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthSignOut({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthSignUpEmailQueryKey = (
  options?: Options<PostAuthSignUpEmailData>,
) => createQueryKey("postAuthSignUpEmail", options);

/**
 * Sign up a user using email and password
 */
export const postAuthSignUpEmailOptions = (
  options?: Options<PostAuthSignUpEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthSignUpEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthSignUpEmailQueryKey(options),
  });
};

/**
 * Sign up a user using email and password
 */
export const postAuthSignUpEmailMutation = (
  options?: Partial<Options<PostAuthSignUpEmailData>>,
): UseMutationOptions<
  PostAuthSignUpEmailResponse,
  PostAuthSignUpEmailError,
  Options<PostAuthSignUpEmailData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthSignUpEmailResponse,
    PostAuthSignUpEmailError,
    Options<PostAuthSignUpEmailData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthSignUpEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthSignInEmailQueryKey = (
  options: Options<PostAuthSignInEmailData>,
) => createQueryKey("postAuthSignInEmail", options);

/**
 * Sign in with email and password
 */
export const postAuthSignInEmailOptions = (
  options: Options<PostAuthSignInEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthSignInEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthSignInEmailQueryKey(options),
  });
};

/**
 * Sign in with email and password
 */
export const postAuthSignInEmailMutation = (
  options?: Partial<Options<PostAuthSignInEmailData>>,
): UseMutationOptions<
  PostAuthSignInEmailResponse,
  PostAuthSignInEmailError,
  Options<PostAuthSignInEmailData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthSignInEmailResponse,
    PostAuthSignInEmailError,
    Options<PostAuthSignInEmailData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthSignInEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthForgetPasswordQueryKey = (
  options: Options<PostAuthForgetPasswordData>,
) => createQueryKey("postAuthForgetPassword", options);

/**
 * Send a password reset email to the user
 */
export const postAuthForgetPasswordOptions = (
  options: Options<PostAuthForgetPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthForgetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthForgetPasswordQueryKey(options),
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthForgetPasswordMutation = (
  options?: Partial<Options<PostAuthForgetPasswordData>>,
): UseMutationOptions<
  PostAuthForgetPasswordResponse,
  PostAuthForgetPasswordError,
  Options<PostAuthForgetPasswordData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthForgetPasswordResponse,
    PostAuthForgetPasswordError,
    Options<PostAuthForgetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthForgetPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthResetPasswordQueryKey = (
  options: Options<PostAuthResetPasswordData>,
) => createQueryKey("postAuthResetPassword", options);

/**
 * Reset the password for a user
 */
export const postAuthResetPasswordOptions = (
  options: Options<PostAuthResetPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthResetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthResetPasswordQueryKey(options),
  });
};

/**
 * Reset the password for a user
 */
export const postAuthResetPasswordMutation = (
  options?: Partial<Options<PostAuthResetPasswordData>>,
): UseMutationOptions<
  PostAuthResetPasswordResponse,
  PostAuthResetPasswordError,
  Options<PostAuthResetPasswordData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthResetPasswordResponse,
    PostAuthResetPasswordError,
    Options<PostAuthResetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthResetPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getAuthVerifyEmailQueryKey = (
  options: Options<GetAuthVerifyEmailData>,
) => createQueryKey("getAuthVerifyEmail", options);

/**
 * Verify the email of the user
 */
export const getAuthVerifyEmailOptions = (
  options: Options<GetAuthVerifyEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getAuthVerifyEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getAuthVerifyEmailQueryKey(options),
  });
};

export const postAuthSendVerificationEmailQueryKey = (
  options?: Options<PostAuthSendVerificationEmailData>,
) => createQueryKey("postAuthSendVerificationEmail", options);

/**
 * Send a verification email to the user
 */
export const postAuthSendVerificationEmailOptions = (
  options?: Options<PostAuthSendVerificationEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthSendVerificationEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthSendVerificationEmailQueryKey(options),
  });
};

/**
 * Send a verification email to the user
 */
export const postAuthSendVerificationEmailMutation = (
  options?: Partial<Options<PostAuthSendVerificationEmailData>>,
): UseMutationOptions<
  PostAuthSendVerificationEmailResponse,
  PostAuthSendVerificationEmailError,
  Options<PostAuthSendVerificationEmailData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthSendVerificationEmailResponse,
    PostAuthSendVerificationEmailError,
    Options<PostAuthSendVerificationEmailData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthSendVerificationEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthChangeEmailQueryKey = (
  options: Options<PostAuthChangeEmailData>,
) => createQueryKey("postAuthChangeEmail", options);

export const postAuthChangeEmailOptions = (
  options: Options<PostAuthChangeEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthChangeEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthChangeEmailQueryKey(options),
  });
};

export const postAuthChangeEmailMutation = (
  options?: Partial<Options<PostAuthChangeEmailData>>,
): UseMutationOptions<
  PostAuthChangeEmailResponse,
  PostAuthChangeEmailError,
  Options<PostAuthChangeEmailData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthChangeEmailResponse,
    PostAuthChangeEmailError,
    Options<PostAuthChangeEmailData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthChangeEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthChangePasswordQueryKey = (
  options: Options<PostAuthChangePasswordData>,
) => createQueryKey("postAuthChangePassword", options);

/**
 * Change the password of the user
 */
export const postAuthChangePasswordOptions = (
  options: Options<PostAuthChangePasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthChangePassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthChangePasswordQueryKey(options),
  });
};

/**
 * Change the password of the user
 */
export const postAuthChangePasswordMutation = (
  options?: Partial<Options<PostAuthChangePasswordData>>,
): UseMutationOptions<
  PostAuthChangePasswordResponse,
  PostAuthChangePasswordError,
  Options<PostAuthChangePasswordData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthChangePasswordResponse,
    PostAuthChangePasswordError,
    Options<PostAuthChangePasswordData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthChangePassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthUpdateUserQueryKey = (
  options?: Options<PostAuthUpdateUserData>,
) => createQueryKey("postAuthUpdateUser", options);

/**
 * Update the current user
 */
export const postAuthUpdateUserOptions = (
  options?: Options<PostAuthUpdateUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthUpdateUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthUpdateUserQueryKey(options),
  });
};

/**
 * Update the current user
 */
export const postAuthUpdateUserMutation = (
  options?: Partial<Options<PostAuthUpdateUserData>>,
): UseMutationOptions<
  PostAuthUpdateUserResponse,
  PostAuthUpdateUserError,
  Options<PostAuthUpdateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthUpdateUserResponse,
    PostAuthUpdateUserError,
    Options<PostAuthUpdateUserData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthUpdateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthDeleteUserQueryKey = (
  options: Options<PostAuthDeleteUserData>,
) => createQueryKey("postAuthDeleteUser", options);

/**
 * Delete the user
 */
export const postAuthDeleteUserOptions = (
  options: Options<PostAuthDeleteUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthDeleteUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthDeleteUserQueryKey(options),
  });
};

/**
 * Delete the user
 */
export const postAuthDeleteUserMutation = (
  options?: Partial<Options<PostAuthDeleteUserData>>,
): UseMutationOptions<
  PostAuthDeleteUserResponse,
  PostAuthDeleteUserError,
  Options<PostAuthDeleteUserData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthDeleteUserResponse,
    PostAuthDeleteUserError,
    Options<PostAuthDeleteUserData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthDeleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getAuthResetPasswordByTokenQueryKey = (
  options?: Options<GetAuthResetPasswordByTokenData>,
) => createQueryKey("getAuthResetPasswordByToken", options);

/**
 * Redirects the user to the callback URL with the token
 */
export const getAuthResetPasswordByTokenOptions = (
  options?: Options<GetAuthResetPasswordByTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getAuthResetPasswordByToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getAuthResetPasswordByTokenQueryKey(options),
  });
};

export const postAuthRequestPasswordResetQueryKey = (
  options: Options<PostAuthRequestPasswordResetData>,
) => createQueryKey("postAuthRequestPasswordReset", options);

/**
 * Send a password reset email to the user
 */
export const postAuthRequestPasswordResetOptions = (
  options: Options<PostAuthRequestPasswordResetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthRequestPasswordReset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthRequestPasswordResetQueryKey(options),
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthRequestPasswordResetMutation = (
  options?: Partial<Options<PostAuthRequestPasswordResetData>>,
): UseMutationOptions<
  PostAuthRequestPasswordResetResponse,
  PostAuthRequestPasswordResetError,
  Options<PostAuthRequestPasswordResetData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRequestPasswordResetResponse,
    PostAuthRequestPasswordResetError,
    Options<PostAuthRequestPasswordResetData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthRequestPasswordReset({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getAuthListSessionsQueryKey = (
  options?: Options<GetAuthListSessionsData>,
) => createQueryKey("getAuthListSessions", options);

/**
 * List all active sessions for the user
 */
export const getAuthListSessionsOptions = (
  options?: Options<GetAuthListSessionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getAuthListSessions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getAuthListSessionsQueryKey(options),
  });
};

export const postAuthRevokeSessionQueryKey = (
  options?: Options<PostAuthRevokeSessionData>,
) => createQueryKey("postAuthRevokeSession", options);

/**
 * Revoke a single session
 */
export const postAuthRevokeSessionOptions = (
  options?: Options<PostAuthRevokeSessionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthRevokeSession({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthRevokeSessionQueryKey(options),
  });
};

/**
 * Revoke a single session
 */
export const postAuthRevokeSessionMutation = (
  options?: Partial<Options<PostAuthRevokeSessionData>>,
): UseMutationOptions<
  PostAuthRevokeSessionResponse,
  PostAuthRevokeSessionError,
  Options<PostAuthRevokeSessionData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRevokeSessionResponse,
    PostAuthRevokeSessionError,
    Options<PostAuthRevokeSessionData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthRevokeSession({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthRevokeSessionsQueryKey = (
  options?: Options<PostAuthRevokeSessionsData>,
) => createQueryKey("postAuthRevokeSessions", options);

/**
 * Revoke all sessions for the user
 */
export const postAuthRevokeSessionsOptions = (
  options?: Options<PostAuthRevokeSessionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthRevokeSessions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthRevokeSessionsQueryKey(options),
  });
};

/**
 * Revoke all sessions for the user
 */
export const postAuthRevokeSessionsMutation = (
  options?: Partial<Options<PostAuthRevokeSessionsData>>,
): UseMutationOptions<
  PostAuthRevokeSessionsResponse,
  PostAuthRevokeSessionsError,
  Options<PostAuthRevokeSessionsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRevokeSessionsResponse,
    PostAuthRevokeSessionsError,
    Options<PostAuthRevokeSessionsData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthRevokeSessions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthRevokeOtherSessionsQueryKey = (
  options?: Options<PostAuthRevokeOtherSessionsData>,
) => createQueryKey("postAuthRevokeOtherSessions", options);

/**
 * Revoke all other sessions for the user except the current one
 */
export const postAuthRevokeOtherSessionsOptions = (
  options?: Options<PostAuthRevokeOtherSessionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthRevokeOtherSessions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthRevokeOtherSessionsQueryKey(options),
  });
};

/**
 * Revoke all other sessions for the user except the current one
 */
export const postAuthRevokeOtherSessionsMutation = (
  options?: Partial<Options<PostAuthRevokeOtherSessionsData>>,
): UseMutationOptions<
  PostAuthRevokeOtherSessionsResponse,
  PostAuthRevokeOtherSessionsError,
  Options<PostAuthRevokeOtherSessionsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRevokeOtherSessionsResponse,
    PostAuthRevokeOtherSessionsError,
    Options<PostAuthRevokeOtherSessionsData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthRevokeOtherSessions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthLinkSocialQueryKey = (
  options: Options<PostAuthLinkSocialData>,
) => createQueryKey("postAuthLinkSocial", options);

/**
 * Link a social account to the user
 */
export const postAuthLinkSocialOptions = (
  options: Options<PostAuthLinkSocialData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthLinkSocial({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthLinkSocialQueryKey(options),
  });
};

/**
 * Link a social account to the user
 */
export const postAuthLinkSocialMutation = (
  options?: Partial<Options<PostAuthLinkSocialData>>,
): UseMutationOptions<
  PostAuthLinkSocialResponse,
  PostAuthLinkSocialError,
  Options<PostAuthLinkSocialData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthLinkSocialResponse,
    PostAuthLinkSocialError,
    Options<PostAuthLinkSocialData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthLinkSocial({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getAuthListAccountsQueryKey = (
  options?: Options<GetAuthListAccountsData>,
) => createQueryKey("getAuthListAccounts", options);

/**
 * List all accounts linked to the user
 */
export const getAuthListAccountsOptions = (
  options?: Options<GetAuthListAccountsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getAuthListAccounts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getAuthListAccountsQueryKey(options),
  });
};

export const getAuthDeleteUserCallbackQueryKey = (
  options?: Options<GetAuthDeleteUserCallbackData>,
) => createQueryKey("getAuthDeleteUserCallback", options);

/**
 * Callback to complete user deletion with verification token
 */
export const getAuthDeleteUserCallbackOptions = (
  options?: Options<GetAuthDeleteUserCallbackData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getAuthDeleteUserCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getAuthDeleteUserCallbackQueryKey(options),
  });
};

export const postAuthUnlinkAccountQueryKey = (
  options: Options<PostAuthUnlinkAccountData>,
) => createQueryKey("postAuthUnlinkAccount", options);

/**
 * Unlink an account
 */
export const postAuthUnlinkAccountOptions = (
  options: Options<PostAuthUnlinkAccountData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthUnlinkAccount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthUnlinkAccountQueryKey(options),
  });
};

/**
 * Unlink an account
 */
export const postAuthUnlinkAccountMutation = (
  options?: Partial<Options<PostAuthUnlinkAccountData>>,
): UseMutationOptions<
  PostAuthUnlinkAccountResponse,
  PostAuthUnlinkAccountError,
  Options<PostAuthUnlinkAccountData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthUnlinkAccountResponse,
    PostAuthUnlinkAccountError,
    Options<PostAuthUnlinkAccountData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthUnlinkAccount({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthRefreshTokenQueryKey = (
  options: Options<PostAuthRefreshTokenData>,
) => createQueryKey("postAuthRefreshToken", options);

/**
 * Refresh the access token using a refresh token
 */
export const postAuthRefreshTokenOptions = (
  options: Options<PostAuthRefreshTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthRefreshToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthRefreshTokenQueryKey(options),
  });
};

/**
 * Refresh the access token using a refresh token
 */
export const postAuthRefreshTokenMutation = (
  options?: Partial<Options<PostAuthRefreshTokenData>>,
): UseMutationOptions<
  PostAuthRefreshTokenResponse,
  PostAuthRefreshTokenError,
  Options<PostAuthRefreshTokenData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRefreshTokenResponse,
    PostAuthRefreshTokenError,
    Options<PostAuthRefreshTokenData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthRefreshToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthGetAccessTokenQueryKey = (
  options: Options<PostAuthGetAccessTokenData>,
) => createQueryKey("postAuthGetAccessToken", options);

/**
 * Get a valid access token, doing a refresh if needed
 */
export const postAuthGetAccessTokenOptions = (
  options: Options<PostAuthGetAccessTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthGetAccessToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthGetAccessTokenQueryKey(options),
  });
};

/**
 * Get a valid access token, doing a refresh if needed
 */
export const postAuthGetAccessTokenMutation = (
  options?: Partial<Options<PostAuthGetAccessTokenData>>,
): UseMutationOptions<
  PostAuthGetAccessTokenResponse,
  PostAuthGetAccessTokenError,
  Options<PostAuthGetAccessTokenData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthGetAccessTokenResponse,
    PostAuthGetAccessTokenError,
    Options<PostAuthGetAccessTokenData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthGetAccessToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const postAuthAccountInfoQueryKey = (
  options: Options<PostAuthAccountInfoData>,
) => createQueryKey("postAuthAccountInfo", options);

/**
 * Get the account info provided by the provider
 */
export const postAuthAccountInfoOptions = (
  options: Options<PostAuthAccountInfoData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await postAuthAccountInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: postAuthAccountInfoQueryKey(options),
  });
};

/**
 * Get the account info provided by the provider
 */
export const postAuthAccountInfoMutation = (
  options?: Partial<Options<PostAuthAccountInfoData>>,
): UseMutationOptions<
  PostAuthAccountInfoResponse,
  PostAuthAccountInfoError,
  Options<PostAuthAccountInfoData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthAccountInfoResponse,
    PostAuthAccountInfoError,
    Options<PostAuthAccountInfoData>
  > = {
    mutationFn: async (localOptions) => {
      return await postAuthAccountInfo({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getAuthOkQueryKey = (options?: Options<GetAuthOkData>) =>
  createQueryKey("getAuthOk", options);

/**
 * Check if the API is working
 */
export const getAuthOkOptions = (options?: Options<GetAuthOkData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getAuthOk({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getAuthOkQueryKey(options),
  });
};

export const getAuthErrorQueryKey = (options?: Options<GetAuthErrorData>) =>
  createQueryKey("getAuthError", options);

/**
 * Displays an error page
 */
export const getAuthErrorOptions = (options?: Options<GetAuthErrorData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getAuthError({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getAuthErrorQueryKey(options),
  });
};
