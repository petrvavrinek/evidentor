// This file is auto-generated by @hey-api/openapi-ts

export type Address = {
  id: number;
  streetLine1: string;
  streetLine2: string | null;
  city: string;
  state: string | null;
  postalCode: string | null;
  country: string;
  createdAt: unknown;
  updatedAt: unknown;
};

export type Client = {
  id: number;
  companyName: string;
  contactName: string;
  email: string | null;
} & {
  address: {
    id: number;
    streetLine1: string;
    streetLine2: string | null;
    city: string;
    state: string | null;
    postalCode: string | null;
    country: string;
    createdAt: unknown;
    updatedAt: unknown;
  } | null;
  billing: {
    id: number;
    clientId: number;
    accountNumber: string;
    iban: string | null;
    swiftCode: string | null;
    variableSymbol: string | null;
    createdAt: unknown;
    updatedAt: unknown;
  } | null;
};

export type Client2 = Array<
  {
    id: number;
    companyName: string;
    contactName: string;
    email: string | null;
  } & {
    address: {
      id: number;
      streetLine1: string;
      streetLine2: string | null;
      city: string;
      state: string | null;
      postalCode: string | null;
      country: string;
      createdAt: unknown;
      updatedAt: unknown;
    } | null;
    billing: {
      id: number;
      clientId: number;
      accountNumber: string;
      iban: string | null;
      swiftCode: string | null;
      variableSymbol: string | null;
      createdAt: unknown;
      updatedAt: unknown;
    } | null;
  }
>;

export type Invoice = {
  id: number;
  amount: number;
  currency: "czk" | "eur" | "usd";
  dueDate: unknown | null;
  paidAt: unknown | null;
  sentAt: unknown | null;
  issuedAt: unknown;
  createdAt: unknown;
  updatedAt: unknown;
  ownerId: string | null;
  clientId: number | null;
  projectId: number | null;
  generatedFileId: string | null;
  language: "cs" | "en";
} & {
  id: number;
  client: {
    id: number;
    companyName: string;
    contactName: string;
    email: string | null;
    ownerId: string | null;
    addressId: number | null;
    createdAt: unknown;
  } | null;
  project: {
    id: number;
    title: string | null;
    ownerId: string | null;
    clientId: number | null;
    createdAt: unknown;
  } | null;
  items: Array<{
    id: number;
    timeEntryId: number | null;
    name: string;
    qty: number;
    unitPrice: number;
    invoiceId: number | null;
    timeEntry: {
      id: number;
      title: string | null;
      userId: string;
      projectId: number | null;
      projectTaskId: number | null;
      invoiceId: number | null;
      startAt: unknown | null;
      endAt: unknown | null;
      createdAt: unknown;
    } | null;
  }>;
};

export type Invoice2 = Array<
  {
    id: number;
    amount: number;
    currency: "czk" | "eur" | "usd";
    dueDate: unknown | null;
    paidAt: unknown | null;
    sentAt: unknown | null;
    issuedAt: unknown;
    createdAt: unknown;
    updatedAt: unknown;
    ownerId: string | null;
    clientId: number | null;
    projectId: number | null;
    generatedFileId: string | null;
    language: "cs" | "en";
  } & {
    id: number;
    client: {
      id: number;
      companyName: string;
      contactName: string;
      email: string | null;
      ownerId: string | null;
      addressId: number | null;
      createdAt: unknown;
    } | null;
    project: {
      id: number;
      title: string | null;
      ownerId: string | null;
      clientId: number | null;
      createdAt: unknown;
    } | null;
    items: Array<{
      id: number;
      timeEntryId: number | null;
      name: string;
      qty: number;
      unitPrice: number;
      invoiceId: number | null;
      timeEntry: {
        id: number;
        title: string | null;
        userId: string;
        projectId: number | null;
        projectTaskId: number | null;
        invoiceId: number | null;
        startAt: unknown | null;
        endAt: unknown | null;
        createdAt: unknown;
      } | null;
    }>;
  }
>;

export type ProjectTask = {
  id: number;
  title: string;
  description: string | null;
  createdAt: unknown;
  project: {
    id: number;
    title: string | null;
    createdAt: unknown;
    client: {
      id: number;
      companyName: string;
      contactName: string;
      email: string | null;
      ownerId: string | null;
      addressId: number | null;
      createdAt: unknown;
    } | null;
  };
};

export type ProjectTask2 = Array<{
  id: number;
  title: string;
  description: string | null;
  createdAt: unknown;
  project: {
    id: number;
    title: string | null;
    createdAt: unknown;
    client: {
      id: number;
      companyName: string;
      contactName: string;
      email: string | null;
      ownerId: string | null;
      addressId: number | null;
      createdAt: unknown;
    } | null;
  };
}>;

export type ProjectTaskCount = {
  count: number;
};

export type Project = {
  id: number;
  title: string | null;
  createdAt: unknown;
  client: {
    id: number;
    companyName: string;
    contactName: string;
    email: string | null;
    ownerId: string | null;
    addressId: number | null;
    createdAt: unknown;
  } | null;
};

export type Project2 = Array<{
  id: number;
  title: string | null;
  createdAt: unknown;
  client: {
    id: number;
    companyName: string;
    contactName: string;
    email: string | null;
    ownerId: string | null;
    addressId: number | null;
    createdAt: unknown;
  } | null;
}>;

export type ProjectCount = {
  count: number;
};

export type TimeEntry = {
  id: number;
  title: string | null;
  invoiceId: number | null;
  startAt: unknown | null;
  endAt: unknown | null;
  createdAt: unknown;
  project: {
    id: number;
    title: string | null;
    createdAt: unknown;
    client: {
      id: number;
      companyName: string;
      contactName: string;
      email: string | null;
      ownerId: string | null;
      addressId: number | null;
      createdAt: unknown;
    } | null;
  } | null;
  projectTask: {
    id: number;
    title: string;
    description: string | null;
    createdAt: unknown;
  } | null;
};

export type TimeEntry2 = Array<{
  id: number;
  title: string | null;
  invoiceId: number | null;
  startAt: unknown | null;
  endAt: unknown | null;
  createdAt: unknown;
  project: {
    id: number;
    title: string | null;
    createdAt: unknown;
    client: {
      id: number;
      companyName: string;
      contactName: string;
      email: string | null;
      ownerId: string | null;
      addressId: number | null;
      createdAt: unknown;
    } | null;
  } | null;
  projectTask: {
    id: number;
    title: string;
    description: string | null;
    createdAt: unknown;
  } | null;
}>;

export type TimeEntryDurationByDate = Array<{
  date: unknown | Date | number;
  duration: number;
}>;

export type User = {
  id?: string;
  name: string;
  email: string;
  emailVerified: boolean;
  image?: string;
  createdAt: string;
  updatedAt: string;
};

export type Session = {
  id?: string;
  expiresAt: string;
  token: string;
  createdAt: string;
  updatedAt: string;
  ipAddress?: string;
  userAgent?: string;
  userId: string;
};

export type Account = {
  id?: string;
  accountId: string;
  providerId: string;
  userId: string;
  accessToken?: string;
  refreshToken?: string;
  idToken?: string;
  accessTokenExpiresAt?: string;
  refreshTokenExpiresAt?: string;
  scope?: string;
  password?: string;
  createdAt: string;
  updatedAt: string;
};

export type Verification = {
  id?: string;
  identifier: string;
  value: string;
  expiresAt: string;
  createdAt?: string;
  updatedAt?: string;
};

export type GetClientsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/clients";
};

export type GetClientsResponses = {
  200: Client2;
};

export type GetClientsResponse = GetClientsResponses[keyof GetClientsResponses];

export type PostClientsData = {
  body: {
    companyName: string;
    contactName: string;
    email?: string | null;
  } & {
    address?: {
      streetLine1: string;
      streetLine2?: string | null;
      city: string;
      state?: string | null;
      postalCode?: string | null;
      country: string;
    };
    billing?: {
      accountNumber: string;
      iban?: string | null;
      swiftCode?: string | null;
      variableSymbol?: string | null;
    };
  };
  path?: never;
  query?: never;
  url: "/clients";
};

export type PostClientsResponses = {
  200: Client;
};

export type PostClientsResponse =
  PostClientsResponses[keyof PostClientsResponses];

export type DeleteClientsByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/clients/{id}";
};

export type DeleteClientsByIdResponses = {
  200: unknown;
};

export type GetClientsByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/clients/{id}";
};

export type GetClientsByIdResponses = {
  200: Client;
};

export type GetClientsByIdResponse =
  GetClientsByIdResponses[keyof GetClientsByIdResponses];

export type PatchClientsByIdData = {
  body: {
    companyName?: string;
    contactName?: string;
    email?: string | null;
  } & {
    address?: {
      streetLine1: string;
      streetLine2?: string | null;
      city: string;
      state?: string | null;
      postalCode?: string | null;
      country: string;
    };
    billing?: {
      accountNumber: string;
      iban?: string | null;
      swiftCode?: string | null;
      variableSymbol?: string | null;
    };
  };
  path: {
    id: number;
  };
  query?: never;
  url: "/clients/{id}";
};

export type PatchClientsByIdResponses = {
  200: Client;
};

export type PatchClientsByIdResponse =
  PatchClientsByIdResponses[keyof PatchClientsByIdResponses];

export type GetInvoicesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/invoices";
};

export type GetInvoicesResponses = {
  200: Invoice2;
};

export type GetInvoicesResponse =
  GetInvoicesResponses[keyof GetInvoicesResponses];

export type PostInvoicesData = {
  body: {
    dueDate: unknown | Date | number;
    currency: "czk" | "eur" | "usd";
    projectId: number;
    language: "cs" | "en";
  } & {
    items: Array<{
      name: string;
      qty: number;
      unitPrice: number;
      timeEntryId?: number | null;
    }>;
  };
  path?: never;
  query?: never;
  url: "/invoices";
};

export type PostInvoicesResponses = {
  200: Invoice;
};

export type PostInvoicesResponse =
  PostInvoicesResponses[keyof PostInvoicesResponses];

export type DeleteInvoicesByIdData = {
  body?: never;
  path: {
    id: string | number;
  };
  query?: never;
  url: "/invoices/{id}";
};

export type DeleteInvoicesByIdResponses = {
  200: {
    success: boolean;
  };
};

export type DeleteInvoicesByIdResponse =
  DeleteInvoicesByIdResponses[keyof DeleteInvoicesByIdResponses];

export type GetInvoicesByIdData = {
  body?: never;
  path: {
    id: string | number;
  };
  query?: never;
  url: "/invoices/{id}";
};

export type GetInvoicesByIdResponses = {
  200: Invoice;
};

export type GetInvoicesByIdResponse =
  GetInvoicesByIdResponses[keyof GetInvoicesByIdResponses];

export type GetInvoicesByIdGeneratedData = {
  body?: never;
  path: {
    id: string | number;
  };
  query?: never;
  url: "/invoices/{id}/generated";
};

export type GetInvoicesByIdGeneratedResponses = {
  200: unknown;
};

export type GetProjectTasksCountData = {
  body?: never;
  path?: never;
  query?: {
    project?: string | number;
    from?: unknown | Date | (string | number);
    to?: unknown | Date | (string | number);
  };
  url: "/project-tasks/count";
};

export type GetProjectTasksCountResponses = {
  200: ProjectTaskCount;
};

export type GetProjectTasksCountResponse =
  GetProjectTasksCountResponses[keyof GetProjectTasksCountResponses];

export type GetProjectTasksData = {
  body?: never;
  path?: never;
  query?: {
    project?: number;
  };
  url: "/project-tasks";
};

export type GetProjectTasksResponses = {
  200: ProjectTask2;
};

export type GetProjectTasksResponse =
  GetProjectTasksResponses[keyof GetProjectTasksResponses];

export type DeleteProjectTasksByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/project-tasks/{id}";
};

export type DeleteProjectTasksByIdResponses = {
  200: unknown;
};

export type PatchProjectTasksByIdData = {
  body: {
    title?: string;
    description?: string | null;
  };
  path: {
    id: number;
  };
  query?: never;
  url: "/project-tasks/{id}";
};

export type PatchProjectTasksByIdResponses = {
  200: unknown;
};

export type PostProjectTasksByIdData = {
  body: {
    title: string;
    description?: string | null;
  };
  path: {
    id: number;
  };
  query?: never;
  url: "/project-tasks/{id}";
};

export type PostProjectTasksByIdResponses = {
  200: ProjectTask;
};

export type PostProjectTasksByIdResponse =
  PostProjectTasksByIdResponses[keyof PostProjectTasksByIdResponses];

export type GetProjectsCountData = {
  body?: never;
  path?: never;
  query?: {
    client?: string | number;
    from?: unknown | Date | (string | number);
    to?: unknown | Date | (string | number);
  };
  url: "/projects/count";
};

export type GetProjectsCountResponses = {
  200: ProjectCount;
};

export type GetProjectsCountResponse =
  GetProjectsCountResponses[keyof GetProjectsCountResponses];

export type GetProjectsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/projects";
};

export type GetProjectsResponses = {
  200: Project2;
};

export type GetProjectsResponse =
  GetProjectsResponses[keyof GetProjectsResponses];

export type PostProjectsData = {
  body: {
    clientId?: number | null;
    title?: string | null;
  };
  path?: never;
  query?: never;
  url: "/projects";
};

export type PostProjectsResponses = {
  200: Project;
};

export type PostProjectsResponse =
  PostProjectsResponses[keyof PostProjectsResponses];

export type DeleteProjectsByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/projects/{id}";
};

export type DeleteProjectsByIdResponses = {
  200: unknown;
};

export type GetProjectsByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/projects/{id}";
};

export type GetProjectsByIdResponses = {
  200: Project;
};

export type GetProjectsByIdResponse =
  GetProjectsByIdResponses[keyof GetProjectsByIdResponses];

export type PatchProjectsByIdData = {
  body: {
    clientId?: number | null;
    title?: string | null;
  };
  path: {
    id: number;
  };
  query?: never;
  url: "/projects/{id}";
};

export type PatchProjectsByIdResponses = {
  200: unknown;
};

export type GetTimeEntriesActiveData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/time-entries/active";
};

export type GetTimeEntriesActiveResponses = {
  200: TimeEntry;
};

export type GetTimeEntriesActiveResponse =
  GetTimeEntriesActiveResponses[keyof GetTimeEntriesActiveResponses];

export type DeleteTimeEntriesByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/time-entries/{id}";
};

export type DeleteTimeEntriesByIdErrors = {
  /**
   * Time entry not found
   */
  404: unknown;
};

export type DeleteTimeEntriesByIdResponses = {
  /**
   * Time entry deleted
   */
  200: unknown;
};

export type GetTimeEntriesByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/time-entries/{id}";
};

export type GetTimeEntriesByIdResponses = {
  200: TimeEntry;
};

export type GetTimeEntriesByIdResponse =
  GetTimeEntriesByIdResponses[keyof GetTimeEntriesByIdResponses];

export type PatchTimeEntriesByIdData = {
  body: {
    title?: string;
    projectId?: (string | number) | null;
    projectTaskId?: number | null;
    invoiceId?: number | null;
    startAt?: unknown | Date | number;
    endAt?: (unknown | Date | number) | null;
  };
  path: {
    id: number;
  };
  query?: never;
  url: "/time-entries/{id}";
};

export type PatchTimeEntriesByIdResponses = {
  200: TimeEntry;
};

export type PatchTimeEntriesByIdResponse =
  PatchTimeEntriesByIdResponses[keyof PatchTimeEntriesByIdResponses];

export type GetTimeEntriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/time-entries";
};

export type GetTimeEntriesResponses = {
  200: TimeEntry2;
};

export type GetTimeEntriesResponse =
  GetTimeEntriesResponses[keyof GetTimeEntriesResponses];

export type PostTimeEntriesData = {
  body: {
    title: string;
    projectId: (string | number) | null;
    projectTaskId?: number | null;
    invoiceId?: number | null;
    startAt: unknown | Date | number;
    endAt: (unknown | Date | number) | null;
  };
  path?: never;
  query?: never;
  url: "/time-entries";
};

export type PostTimeEntriesResponses = {
  200: TimeEntry;
};

export type PostTimeEntriesResponse =
  PostTimeEntriesResponses[keyof PostTimeEntriesResponses];

export type GetTimeEntriesAnalyzeDurationByDateData = {
  body?: never;
  path?: never;
  query?: {
    projectId?: (string | number) | null;
    from?: unknown | Date | (string | number);
    to?: unknown | Date | (string | number);
  };
  url: "/time-entries/analyze/duration-by-date";
};

export type GetTimeEntriesAnalyzeDurationByDateResponses = {
  200: TimeEntryDurationByDate;
};

export type GetTimeEntriesAnalyzeDurationByDateResponse =
  GetTimeEntriesAnalyzeDurationByDateResponses[keyof GetTimeEntriesAnalyzeDurationByDateResponses];

export type GetCalendarsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/calendars";
};

export type GetCalendarsResponses = {
  200: unknown;
};

export type GetStatusData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/status";
};

export type GetStatusResponses = {
  200: unknown;
};

export type HeadStatusData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/status";
};

export type HeadStatusResponses = {
  200: unknown;
};

export type SocialSignInData = {
  body: {
    callbackURL?: string;
    newUserCallbackURL?: string;
    errorCallbackURL?: string;
    provider: string;
    disableRedirect?: string;
    idToken?: string;
    scopes?: string;
    requestSignUp?: string;
    loginHint?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/sign-in/social";
};

export type SocialSignInErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type SocialSignInError = SocialSignInErrors[keyof SocialSignInErrors];

export type SocialSignInResponses = {
  /**
   * Session response when idToken is provided
   */
  200: {
    redirect: false;
    /**
     * Session token
     */
    token: string;
  };
};

export type SocialSignInResponse =
  SocialSignInResponses[keyof SocialSignInResponses];

export type GetAuthGetSessionData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/get-session";
};

export type GetAuthGetSessionErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthGetSessionError =
  GetAuthGetSessionErrors[keyof GetAuthGetSessionErrors];

export type GetAuthGetSessionResponses = {
  /**
   * Success
   */
  200: {
    session: Session;
    user: User;
  };
};

export type GetAuthGetSessionResponse =
  GetAuthGetSessionResponses[keyof GetAuthGetSessionResponses];

export type PostAuthSignOutData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/auth/sign-out";
};

export type PostAuthSignOutErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthSignOutError =
  PostAuthSignOutErrors[keyof PostAuthSignOutErrors];

export type PostAuthSignOutResponses = {
  /**
   * Success
   */
  200: {
    success?: boolean;
  };
};

export type PostAuthSignOutResponse =
  PostAuthSignOutResponses[keyof PostAuthSignOutResponses];

export type PostAuthSignUpEmailData = {
  body?: {
    /**
     * The name of the user
     */
    name: string;
    /**
     * The email of the user
     */
    email: string;
    /**
     * The password of the user
     */
    password: string;
    /**
     * The profile image URL of the user
     */
    image?: string;
    /**
     * The URL to use for email verification callback
     */
    callbackURL?: string;
    /**
     * If this is false, the session will not be remembered. Default is `true`.
     */
    rememberMe?: boolean;
  };
  path?: never;
  query?: never;
  url: "/auth/sign-up/email";
};

export type PostAuthSignUpEmailErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthSignUpEmailError =
  PostAuthSignUpEmailErrors[keyof PostAuthSignUpEmailErrors];

export type PostAuthSignUpEmailResponses = {
  /**
   * Successfully created user
   */
  200: {
    /**
     * Authentication token for the session
     */
    token?: string;
    user: {
      /**
       * The unique identifier of the user
       */
      id: string;
      /**
       * The email address of the user
       */
      email: string;
      /**
       * The name of the user
       */
      name: string;
      /**
       * The profile image URL of the user
       */
      image?: string;
      /**
       * Whether the email has been verified
       */
      emailVerified: boolean;
      /**
       * When the user was created
       */
      createdAt: Date;
      /**
       * When the user was last updated
       */
      updatedAt: Date;
    };
  };
};

export type PostAuthSignUpEmailResponse =
  PostAuthSignUpEmailResponses[keyof PostAuthSignUpEmailResponses];

export type PostAuthSignInEmailData = {
  body: {
    /**
     * Email of the user
     */
    email: string;
    /**
     * Password of the user
     */
    password: string;
    callbackURL?: string;
    rememberMe?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/sign-in/email";
};

export type PostAuthSignInEmailErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthSignInEmailError =
  PostAuthSignInEmailErrors[keyof PostAuthSignInEmailErrors];

export type PostAuthSignInEmailResponses = {
  /**
   * Session response when idToken is provided
   */
  200: {
    redirect: false;
    /**
     * Session token
     */
    token: string;
    url?: null;
    user: {
      id: string;
      email: string;
      name?: string;
      image?: string;
      emailVerified: boolean;
      createdAt: Date;
      updatedAt: Date;
    };
  };
};

export type PostAuthSignInEmailResponse =
  PostAuthSignInEmailResponses[keyof PostAuthSignInEmailResponses];

export type PostAuthForgetPasswordData = {
  body: {
    /**
     * The email address of the user to send a password reset email to
     */
    email: string;
    redirectTo?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/forget-password";
};

export type PostAuthForgetPasswordErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthForgetPasswordError =
  PostAuthForgetPasswordErrors[keyof PostAuthForgetPasswordErrors];

export type PostAuthForgetPasswordResponses = {
  /**
   * Success
   */
  200: {
    status?: boolean;
    message?: string;
  };
};

export type PostAuthForgetPasswordResponse =
  PostAuthForgetPasswordResponses[keyof PostAuthForgetPasswordResponses];

export type PostAuthResetPasswordData = {
  body: {
    /**
     * The new password to set
     */
    newPassword: string;
    token?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/reset-password";
};

export type PostAuthResetPasswordErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthResetPasswordError =
  PostAuthResetPasswordErrors[keyof PostAuthResetPasswordErrors];

export type PostAuthResetPasswordResponses = {
  /**
   * Success
   */
  200: {
    status?: boolean;
  };
};

export type PostAuthResetPasswordResponse =
  PostAuthResetPasswordResponses[keyof PostAuthResetPasswordResponses];

export type GetAuthVerifyEmailData = {
  body?: never;
  path?: never;
  query: {
    /**
     * The token to verify the email
     */
    token: string;
    /**
     * The URL to redirect to after email verification
     */
    callbackURL?: string;
  };
  url: "/auth/verify-email";
};

export type GetAuthVerifyEmailErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthVerifyEmailError =
  GetAuthVerifyEmailErrors[keyof GetAuthVerifyEmailErrors];

export type GetAuthVerifyEmailResponses = {
  /**
   * Success
   */
  200: {
    user: {
      /**
       * User ID
       */
      id: string;
      /**
       * User email
       */
      email: string;
      /**
       * User name
       */
      name: string;
      /**
       * User image URL
       */
      image: string;
      /**
       * Indicates if the user email is verified
       */
      emailVerified: boolean;
      /**
       * User creation date
       */
      createdAt: string;
      /**
       * User update date
       */
      updatedAt: string;
    };
    /**
     * Indicates if the email was verified successfully
     */
    status: boolean;
  };
};

export type GetAuthVerifyEmailResponse =
  GetAuthVerifyEmailResponses[keyof GetAuthVerifyEmailResponses];

export type PostAuthSendVerificationEmailData = {
  body?: {
    /**
     * The email to send the verification email to
     */
    email: string;
    /**
     * The URL to use for email verification callback
     */
    callbackURL?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/send-verification-email";
};

export type PostAuthSendVerificationEmailErrors = {
  /**
   * Bad Request
   */
  400: {
    /**
     * Error message
     */
    message?: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthSendVerificationEmailError =
  PostAuthSendVerificationEmailErrors[keyof PostAuthSendVerificationEmailErrors];

export type PostAuthSendVerificationEmailResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if the email was sent successfully
     */
    status?: boolean;
  };
};

export type PostAuthSendVerificationEmailResponse =
  PostAuthSendVerificationEmailResponses[keyof PostAuthSendVerificationEmailResponses];

export type PostAuthChangeEmailData = {
  body: {
    /**
     * The new email address to set must be a valid email address
     */
    newEmail: string;
    callbackURL?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/change-email";
};

export type PostAuthChangeEmailErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthChangeEmailError =
  PostAuthChangeEmailErrors[keyof PostAuthChangeEmailErrors];

export type PostAuthChangeEmailResponses = {
  /**
   * Email change request processed successfully
   */
  200: {
    /**
     * Indicates if the request was successful
     */
    status: boolean;
    /**
     * Status message of the email change process
     */
    message?: "Email updated" | "Verification email sent";
  };
};

export type PostAuthChangeEmailResponse =
  PostAuthChangeEmailResponses[keyof PostAuthChangeEmailResponses];

export type PostAuthChangePasswordData = {
  body: {
    /**
     * The new password to set
     */
    newPassword: string;
    /**
     * The current password is required
     */
    currentPassword: string;
    revokeOtherSessions?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/change-password";
};

export type PostAuthChangePasswordErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthChangePasswordError =
  PostAuthChangePasswordErrors[keyof PostAuthChangePasswordErrors];

export type PostAuthChangePasswordResponses = {
  /**
   * Password successfully changed
   */
  200: {
    /**
     * New session token if other sessions were revoked
     */
    token?: string;
    user: {
      /**
       * The unique identifier of the user
       */
      id: string;
      /**
       * The email address of the user
       */
      email: string;
      /**
       * The name of the user
       */
      name: string;
      /**
       * The profile image URL of the user
       */
      image?: string;
      /**
       * Whether the email has been verified
       */
      emailVerified: boolean;
      /**
       * When the user was created
       */
      createdAt: Date;
      /**
       * When the user was last updated
       */
      updatedAt: Date;
    };
  };
};

export type PostAuthChangePasswordResponse =
  PostAuthChangePasswordResponses[keyof PostAuthChangePasswordResponses];

export type PostAuthUpdateUserData = {
  body?: {
    /**
     * The name of the user
     */
    name?: string;
    /**
     * The image of the user
     */
    image?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/update-user";
};

export type PostAuthUpdateUserErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthUpdateUserError =
  PostAuthUpdateUserErrors[keyof PostAuthUpdateUserErrors];

export type PostAuthUpdateUserResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if the update was successful
     */
    status?: boolean;
  };
};

export type PostAuthUpdateUserResponse =
  PostAuthUpdateUserResponses[keyof PostAuthUpdateUserResponses];

export type PostAuthDeleteUserData = {
  body: {
    callbackURL?: string;
    password?: string;
    token?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/delete-user";
};

export type PostAuthDeleteUserErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthDeleteUserError =
  PostAuthDeleteUserErrors[keyof PostAuthDeleteUserErrors];

export type PostAuthDeleteUserResponses = {
  /**
   * User deletion processed successfully
   */
  200: {
    /**
     * Indicates if the operation was successful
     */
    success: boolean;
    /**
     * Status message of the deletion process
     */
    message: "User deleted" | "Verification email sent";
  };
};

export type PostAuthDeleteUserResponse =
  PostAuthDeleteUserResponses[keyof PostAuthDeleteUserResponses];

export type GetAuthResetPasswordByTokenData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The URL to redirect the user to reset their password
     */
    callbackURL?: string;
  };
  url: "/auth/reset-password/{token}";
};

export type GetAuthResetPasswordByTokenErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthResetPasswordByTokenError =
  GetAuthResetPasswordByTokenErrors[keyof GetAuthResetPasswordByTokenErrors];

export type GetAuthResetPasswordByTokenResponses = {
  /**
   * Success
   */
  200: {
    token?: string;
  };
};

export type GetAuthResetPasswordByTokenResponse =
  GetAuthResetPasswordByTokenResponses[keyof GetAuthResetPasswordByTokenResponses];

export type PostAuthRequestPasswordResetData = {
  body: {
    /**
     * The email address of the user to send a password reset email to
     */
    email: string;
    redirectTo?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/request-password-reset";
};

export type PostAuthRequestPasswordResetErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRequestPasswordResetError =
  PostAuthRequestPasswordResetErrors[keyof PostAuthRequestPasswordResetErrors];

export type PostAuthRequestPasswordResetResponses = {
  /**
   * Success
   */
  200: {
    status?: boolean;
    message?: string;
  };
};

export type PostAuthRequestPasswordResetResponse =
  PostAuthRequestPasswordResetResponses[keyof PostAuthRequestPasswordResetResponses];

export type GetAuthListSessionsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/list-sessions";
};

export type GetAuthListSessionsErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthListSessionsError =
  GetAuthListSessionsErrors[keyof GetAuthListSessionsErrors];

export type GetAuthListSessionsResponses = {
  /**
   * Success
   */
  200: Array<Session>;
};

export type GetAuthListSessionsResponse =
  GetAuthListSessionsResponses[keyof GetAuthListSessionsResponses];

export type PostAuthRevokeSessionData = {
  body?: {
    /**
     * The token to revoke
     */
    token: string;
  };
  path?: never;
  query?: never;
  url: "/auth/revoke-session";
};

export type PostAuthRevokeSessionErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRevokeSessionError =
  PostAuthRevokeSessionErrors[keyof PostAuthRevokeSessionErrors];

export type PostAuthRevokeSessionResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if the session was revoked successfully
     */
    status: boolean;
  };
};

export type PostAuthRevokeSessionResponse =
  PostAuthRevokeSessionResponses[keyof PostAuthRevokeSessionResponses];

export type PostAuthRevokeSessionsData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/auth/revoke-sessions";
};

export type PostAuthRevokeSessionsErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRevokeSessionsError =
  PostAuthRevokeSessionsErrors[keyof PostAuthRevokeSessionsErrors];

export type PostAuthRevokeSessionsResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if all sessions were revoked successfully
     */
    status: boolean;
  };
};

export type PostAuthRevokeSessionsResponse =
  PostAuthRevokeSessionsResponses[keyof PostAuthRevokeSessionsResponses];

export type PostAuthRevokeOtherSessionsData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/auth/revoke-other-sessions";
};

export type PostAuthRevokeOtherSessionsErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRevokeOtherSessionsError =
  PostAuthRevokeOtherSessionsErrors[keyof PostAuthRevokeOtherSessionsErrors];

export type PostAuthRevokeOtherSessionsResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if all other sessions were revoked successfully
     */
    status: boolean;
  };
};

export type PostAuthRevokeOtherSessionsResponse =
  PostAuthRevokeOtherSessionsResponses[keyof PostAuthRevokeOtherSessionsResponses];

export type PostAuthLinkSocialData = {
  body: {
    callbackURL?: string;
    provider: string;
    idToken?: string;
    requestSignUp?: string;
    scopes?: string;
    errorCallbackURL?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/link-social";
};

export type PostAuthLinkSocialErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthLinkSocialError =
  PostAuthLinkSocialErrors[keyof PostAuthLinkSocialErrors];

export type PostAuthLinkSocialResponses = {
  /**
   * Success
   */
  200: {
    /**
     * The authorization URL to redirect the user to
     */
    url?: string;
    /**
     * Indicates if the user should be redirected to the authorization URL
     */
    redirect: boolean;
    status?: boolean;
  };
};

export type PostAuthLinkSocialResponse =
  PostAuthLinkSocialResponses[keyof PostAuthLinkSocialResponses];

export type GetAuthListAccountsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/list-accounts";
};

export type GetAuthListAccountsErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthListAccountsError =
  GetAuthListAccountsErrors[keyof GetAuthListAccountsErrors];

export type GetAuthListAccountsResponses = {
  /**
   * Success
   */
  200: Array<{
    id?: string;
    provider?: string;
    createdAt?: Date;
    updatedAt?: Date;
  }>;
};

export type GetAuthListAccountsResponse =
  GetAuthListAccountsResponses[keyof GetAuthListAccountsResponses];

export type GetAuthDeleteUserCallbackData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The token to verify the deletion request
     */
    token?: string;
    callbackURL?: string;
  };
  url: "/auth/delete-user/callback";
};

export type GetAuthDeleteUserCallbackErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthDeleteUserCallbackError =
  GetAuthDeleteUserCallbackErrors[keyof GetAuthDeleteUserCallbackErrors];

export type GetAuthDeleteUserCallbackResponses = {
  /**
   * User successfully deleted
   */
  200: {
    /**
     * Indicates if the deletion was successful
     */
    success: boolean;
    /**
     * Confirmation message
     */
    message: "User deleted";
  };
};

export type GetAuthDeleteUserCallbackResponse =
  GetAuthDeleteUserCallbackResponses[keyof GetAuthDeleteUserCallbackResponses];

export type PostAuthUnlinkAccountData = {
  body: {
    providerId: string;
    accountId?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/unlink-account";
};

export type PostAuthUnlinkAccountErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthUnlinkAccountError =
  PostAuthUnlinkAccountErrors[keyof PostAuthUnlinkAccountErrors];

export type PostAuthUnlinkAccountResponses = {
  /**
   * Success
   */
  200: {
    status?: boolean;
  };
};

export type PostAuthUnlinkAccountResponse =
  PostAuthUnlinkAccountResponses[keyof PostAuthUnlinkAccountResponses];

export type PostAuthRefreshTokenData = {
  body: {
    /**
     * The provider ID for the OAuth provider
     */
    providerId: string;
    accountId?: string;
    userId?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/refresh-token";
};

export type PostAuthRefreshTokenErrors = {
  /**
   * Invalid refresh token or provider configuration
   */
  400: unknown;
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRefreshTokenError =
  PostAuthRefreshTokenErrors[keyof PostAuthRefreshTokenErrors];

export type PostAuthRefreshTokenResponses = {
  /**
   * Access token refreshed successfully
   */
  200: {
    tokenType?: string;
    idToken?: string;
    accessToken?: string;
    refreshToken?: string;
    accessTokenExpiresAt?: Date;
    refreshTokenExpiresAt?: Date;
  };
};

export type PostAuthRefreshTokenResponse =
  PostAuthRefreshTokenResponses[keyof PostAuthRefreshTokenResponses];

export type PostAuthGetAccessTokenData = {
  body: {
    /**
     * The provider ID for the OAuth provider
     */
    providerId: string;
    accountId?: string;
    userId?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/get-access-token";
};

export type PostAuthGetAccessTokenErrors = {
  /**
   * Invalid refresh token or provider configuration
   */
  400: unknown;
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthGetAccessTokenError =
  PostAuthGetAccessTokenErrors[keyof PostAuthGetAccessTokenErrors];

export type PostAuthGetAccessTokenResponses = {
  /**
   * A Valid access token
   */
  200: {
    tokenType?: string;
    idToken?: string;
    accessToken?: string;
    refreshToken?: string;
    accessTokenExpiresAt?: Date;
    refreshTokenExpiresAt?: Date;
  };
};

export type PostAuthGetAccessTokenResponse =
  PostAuthGetAccessTokenResponses[keyof PostAuthGetAccessTokenResponses];

export type PostAuthAccountInfoData = {
  body: {
    /**
     * The provider given account id for which to get the account info
     */
    accountId: string;
  };
  path?: never;
  query?: never;
  url: "/auth/account-info";
};

export type PostAuthAccountInfoErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthAccountInfoError =
  PostAuthAccountInfoErrors[keyof PostAuthAccountInfoErrors];

export type PostAuthAccountInfoResponses = {
  /**
   * Success
   */
  200: {
    user: {
      id: string;
      name?: string;
      email?: string;
      image?: string;
      emailVerified: boolean;
    };
    data: {
      [key: string]: unknown;
    };
  };
};

export type PostAuthAccountInfoResponse =
  PostAuthAccountInfoResponses[keyof PostAuthAccountInfoResponses];

export type GetAuthOkData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/ok";
};

export type GetAuthOkErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthOkError = GetAuthOkErrors[keyof GetAuthOkErrors];

export type GetAuthOkResponses = {
  /**
   * API is working
   */
  200: {
    /**
     * Indicates if the API is working
     */
    ok: boolean;
  };
};

export type GetAuthOkResponse = GetAuthOkResponses[keyof GetAuthOkResponses];

export type GetAuthErrorData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/error";
};

export type GetAuthErrorErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthErrorError = GetAuthErrorErrors[keyof GetAuthErrorErrors];

export type GetAuthErrorResponses = {
  /**
   * The HTML content of the error page
   */
  200: string;
};

export type GetAuthErrorResponse =
  GetAuthErrorResponses[keyof GetAuthErrorResponses];

export type ClientOptions = {
  baseUrl: "http://localhost:3000" | (string & {});
};
