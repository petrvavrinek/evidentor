// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  GetV1ClientData,
  GetV1ClientResponses,
  PostV1ClientData,
  PostV1ClientResponses,
  DeleteV1ClientByIdData,
  DeleteV1ClientByIdResponses,
  GetV1ClientByIdData,
  GetV1ClientByIdResponses,
  PatchV1ClientByIdData,
  PatchV1ClientByIdResponses,
  GetV1ProjectData,
  GetV1ProjectResponses,
  PostV1ProjectData,
  PostV1ProjectResponses,
  DeleteV1ProjectByIdData,
  DeleteV1ProjectByIdResponses,
  GetV1ProjectByIdData,
  GetV1ProjectByIdResponses,
  PatchV1ProjectByIdData,
  PatchV1ProjectByIdResponses,
  GetV1TimeEntryActiveData,
  GetV1TimeEntryActiveResponses,
  GetV1TimeEntryActiveErrors,
  GetV1TimeEntryByIdData,
  GetV1TimeEntryByIdResponses,
  GetV1TimeEntryByIdErrors,
  PatchV1TimeEntryByIdData,
  PatchV1TimeEntryByIdResponses,
  PatchV1TimeEntryByIdErrors,
  PostV1TimeEntryData,
  PostV1TimeEntryResponses,
  PostV1TimeEntryErrors,
  GetStatusData,
  GetStatusResponses,
  SocialSignInData,
  SocialSignInResponses,
  SocialSignInErrors,
  GetAuthApiGetSessionData,
  GetAuthApiGetSessionResponses,
  GetAuthApiGetSessionErrors,
  PostAuthApiSignOutData,
  PostAuthApiSignOutResponses,
  PostAuthApiSignOutErrors,
  PostAuthApiSignUpEmailData,
  PostAuthApiSignUpEmailResponses,
  PostAuthApiSignUpEmailErrors,
  PostAuthApiSignInEmailData,
  PostAuthApiSignInEmailResponses,
  PostAuthApiSignInEmailErrors,
  PostAuthApiForgetPasswordData,
  PostAuthApiForgetPasswordResponses,
  PostAuthApiForgetPasswordErrors,
  PostAuthApiResetPasswordData,
  PostAuthApiResetPasswordResponses,
  PostAuthApiResetPasswordErrors,
  GetAuthApiVerifyEmailData,
  GetAuthApiVerifyEmailResponses,
  GetAuthApiVerifyEmailErrors,
  PostAuthApiSendVerificationEmailData,
  PostAuthApiSendVerificationEmailResponses,
  PostAuthApiSendVerificationEmailErrors,
  PostAuthApiChangeEmailData,
  PostAuthApiChangeEmailResponses,
  PostAuthApiChangeEmailErrors,
  PostAuthApiChangePasswordData,
  PostAuthApiChangePasswordResponses,
  PostAuthApiChangePasswordErrors,
  PostAuthApiUpdateUserData,
  PostAuthApiUpdateUserResponses,
  PostAuthApiUpdateUserErrors,
  PostAuthApiDeleteUserData,
  PostAuthApiDeleteUserResponses,
  PostAuthApiDeleteUserErrors,
  GetAuthApiResetPasswordByTokenData,
  GetAuthApiResetPasswordByTokenResponses,
  GetAuthApiResetPasswordByTokenErrors,
  PostAuthApiRequestPasswordResetData,
  PostAuthApiRequestPasswordResetResponses,
  PostAuthApiRequestPasswordResetErrors,
  GetAuthApiListSessionsData,
  GetAuthApiListSessionsResponses,
  GetAuthApiListSessionsErrors,
  PostAuthApiRevokeSessionData,
  PostAuthApiRevokeSessionResponses,
  PostAuthApiRevokeSessionErrors,
  PostAuthApiRevokeSessionsData,
  PostAuthApiRevokeSessionsResponses,
  PostAuthApiRevokeSessionsErrors,
  PostAuthApiRevokeOtherSessionsData,
  PostAuthApiRevokeOtherSessionsResponses,
  PostAuthApiRevokeOtherSessionsErrors,
  PostAuthApiLinkSocialData,
  PostAuthApiLinkSocialResponses,
  PostAuthApiLinkSocialErrors,
  GetAuthApiListAccountsData,
  GetAuthApiListAccountsResponses,
  GetAuthApiListAccountsErrors,
  GetAuthApiDeleteUserCallbackData,
  GetAuthApiDeleteUserCallbackResponses,
  GetAuthApiDeleteUserCallbackErrors,
  PostAuthApiUnlinkAccountData,
  PostAuthApiUnlinkAccountResponses,
  PostAuthApiUnlinkAccountErrors,
  PostAuthApiRefreshTokenData,
  PostAuthApiRefreshTokenResponses,
  PostAuthApiRefreshTokenErrors,
  PostAuthApiGetAccessTokenData,
  PostAuthApiGetAccessTokenResponses,
  PostAuthApiGetAccessTokenErrors,
  PostAuthApiAccountInfoData,
  PostAuthApiAccountInfoResponses,
  PostAuthApiAccountInfoErrors,
  GetAuthApiOkData,
  GetAuthApiOkResponses,
  GetAuthApiOkErrors,
  GetAuthApiErrorData,
  GetAuthApiErrorResponses,
  GetAuthApiErrorErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";
import {
  zSocialSignInResponse,
  zGetAuthApiGetSessionResponse,
  zPostAuthApiSignOutResponse,
  zPostAuthApiSignUpEmailResponse,
  zPostAuthApiSignInEmailResponse,
  zPostAuthApiForgetPasswordResponse,
  zPostAuthApiResetPasswordResponse,
  zGetAuthApiVerifyEmailResponse,
  zPostAuthApiSendVerificationEmailResponse,
  zPostAuthApiChangeEmailResponse,
  zPostAuthApiChangePasswordResponse,
  zPostAuthApiUpdateUserResponse,
  zPostAuthApiDeleteUserResponse,
  zGetAuthApiResetPasswordByTokenResponse,
  zPostAuthApiRequestPasswordResetResponse,
  zGetAuthApiListSessionsResponse,
  zPostAuthApiRevokeSessionResponse,
  zPostAuthApiRevokeSessionsResponse,
  zPostAuthApiRevokeOtherSessionsResponse,
  zPostAuthApiLinkSocialResponse,
  zGetAuthApiListAccountsResponse,
  zGetAuthApiDeleteUserCallbackResponse,
  zPostAuthApiUnlinkAccountResponse,
  zPostAuthApiRefreshTokenResponse,
  zPostAuthApiGetAccessTokenResponse,
  zPostAuthApiAccountInfoResponse,
  zGetAuthApiOkResponse,
  zGetAuthApiErrorResponse,
} from "./zod.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get all user-defined clients
 */
export const getV1Client = <ThrowOnError extends boolean = false>(
  options?: Options<GetV1ClientData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetV1ClientResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/client",
    ...options,
  });
};

/**
 * Create new user-defined client
 */
export const postV1Client = <ThrowOnError extends boolean = false>(
  options: Options<PostV1ClientData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostV1ClientResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/client",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete user-defined client, all projects containing this client will be unset
 */
export const deleteV1ClientById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteV1ClientByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteV1ClientByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/client/{id}",
    ...options,
  });
};

/**
 * Get user-defined client by ID
 */
export const getV1ClientById = <ThrowOnError extends boolean = false>(
  options: Options<GetV1ClientByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetV1ClientByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/client/{id}",
    ...options,
  });
};

/**
 * Update user-defined client data
 */
export const patchV1ClientById = <ThrowOnError extends boolean = false>(
  options: Options<PatchV1ClientByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchV1ClientByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/client/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get all user projects
 */
export const getV1Project = <ThrowOnError extends boolean = false>(
  options?: Options<GetV1ProjectData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetV1ProjectResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/project",
    ...options,
  });
};

/**
 * Create new user project
 */
export const postV1Project = <ThrowOnError extends boolean = false>(
  options: Options<PostV1ProjectData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostV1ProjectResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/project",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete user project, all time entries will be removed
 */
export const deleteV1ProjectById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteV1ProjectByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteV1ProjectByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/project/{id}",
    ...options,
  });
};

/**
 * Get user project by ID
 */
export const getV1ProjectById = <ThrowOnError extends boolean = false>(
  options: Options<GetV1ProjectByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetV1ProjectByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/project/{id}",
    ...options,
  });
};

/**
 * Update user project data
 */
export const patchV1ProjectById = <ThrowOnError extends boolean = false>(
  options: Options<PatchV1ProjectByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchV1ProjectByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/project/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Test description
 */
export const getV1TimeEntryActive = <ThrowOnError extends boolean = false>(
  options?: Options<GetV1TimeEntryActiveData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetV1TimeEntryActiveResponses,
    GetV1TimeEntryActiveErrors,
    ThrowOnError
  >({
    url: "/v1/time-entry/active",
    ...options,
  });
};

/**
 * Return time entry by ID
 */
export const getV1TimeEntryById = <ThrowOnError extends boolean = false>(
  options: Options<GetV1TimeEntryByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetV1TimeEntryByIdResponses,
    GetV1TimeEntryByIdErrors,
    ThrowOnError
  >({
    url: "/v1/time-entry/{id}",
    ...options,
  });
};

/**
 * Update existing time entry
 */
export const patchV1TimeEntryById = <ThrowOnError extends boolean = false>(
  options: Options<PatchV1TimeEntryByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchV1TimeEntryByIdResponses,
    PatchV1TimeEntryByIdErrors,
    ThrowOnError
  >({
    url: "/v1/time-entry/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create new time entry
 */
export const postV1TimeEntry = <ThrowOnError extends boolean = false>(
  options: Options<PostV1TimeEntryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostV1TimeEntryResponses,
    PostV1TimeEntryErrors,
    ThrowOnError
  >({
    url: "/v1/time-entry",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getStatus = <ThrowOnError extends boolean = false>(
  options?: Options<GetStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetStatusResponses,
    unknown,
    ThrowOnError
  >({
    url: "/status",
    ...options,
  });
};

/**
 * Sign in with a social provider
 */
export const socialSignIn = <ThrowOnError extends boolean = false>(
  options: Options<SocialSignInData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SocialSignInResponses,
    SocialSignInErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zSocialSignInResponse.parseAsync(data);
    },
    url: "/auth/api/sign-in/social",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get the current session
 */
export const getAuthApiGetSession = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthApiGetSessionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthApiGetSessionResponses,
    GetAuthApiGetSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zGetAuthApiGetSessionResponse.parseAsync(data);
    },
    url: "/auth/api/get-session",
    ...options,
  });
};

/**
 * Sign out the current user
 */
export const postAuthApiSignOut = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthApiSignOutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthApiSignOutResponses,
    PostAuthApiSignOutErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiSignOutResponse.parseAsync(data);
    },
    url: "/auth/api/sign-out",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sign up a user using email and password
 */
export const postAuthApiSignUpEmail = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthApiSignUpEmailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthApiSignUpEmailResponses,
    PostAuthApiSignUpEmailErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiSignUpEmailResponse.parseAsync(data);
    },
    url: "/auth/api/sign-up/email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sign in with email and password
 */
export const postAuthApiSignInEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthApiSignInEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthApiSignInEmailResponses,
    PostAuthApiSignInEmailErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiSignInEmailResponse.parseAsync(data);
    },
    url: "/auth/api/sign-in/email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthApiForgetPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthApiForgetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthApiForgetPasswordResponses,
    PostAuthApiForgetPasswordErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiForgetPasswordResponse.parseAsync(data);
    },
    url: "/auth/api/forget-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Reset the password for a user
 */
export const postAuthApiResetPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthApiResetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthApiResetPasswordResponses,
    PostAuthApiResetPasswordErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiResetPasswordResponse.parseAsync(data);
    },
    url: "/auth/api/reset-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Verify the email of the user
 */
export const getAuthApiVerifyEmail = <ThrowOnError extends boolean = false>(
  options: Options<GetAuthApiVerifyEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAuthApiVerifyEmailResponses,
    GetAuthApiVerifyEmailErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zGetAuthApiVerifyEmailResponse.parseAsync(data);
    },
    url: "/auth/api/verify-email",
    ...options,
  });
};

/**
 * Send a verification email to the user
 */
export const postAuthApiSendVerificationEmail = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthApiSendVerificationEmailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthApiSendVerificationEmailResponses,
    PostAuthApiSendVerificationEmailErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiSendVerificationEmailResponse.parseAsync(data);
    },
    url: "/auth/api/send-verification-email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postAuthApiChangeEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthApiChangeEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthApiChangeEmailResponses,
    PostAuthApiChangeEmailErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiChangeEmailResponse.parseAsync(data);
    },
    url: "/auth/api/change-email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Change the password of the user
 */
export const postAuthApiChangePassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthApiChangePasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthApiChangePasswordResponses,
    PostAuthApiChangePasswordErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiChangePasswordResponse.parseAsync(data);
    },
    url: "/auth/api/change-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update the current user
 */
export const postAuthApiUpdateUser = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthApiUpdateUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthApiUpdateUserResponses,
    PostAuthApiUpdateUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiUpdateUserResponse.parseAsync(data);
    },
    url: "/auth/api/update-user",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete the user
 */
export const postAuthApiDeleteUser = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthApiDeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthApiDeleteUserResponses,
    PostAuthApiDeleteUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiDeleteUserResponse.parseAsync(data);
    },
    url: "/auth/api/delete-user",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Redirects the user to the callback URL with the token
 */
export const getAuthApiResetPasswordByToken = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAuthApiResetPasswordByTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthApiResetPasswordByTokenResponses,
    GetAuthApiResetPasswordByTokenErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zGetAuthApiResetPasswordByTokenResponse.parseAsync(data);
    },
    url: "/auth/api/reset-password/{token}",
    ...options,
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthApiRequestPasswordReset = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthApiRequestPasswordResetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthApiRequestPasswordResetResponses,
    PostAuthApiRequestPasswordResetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiRequestPasswordResetResponse.parseAsync(data);
    },
    url: "/auth/api/request-password-reset",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all active sessions for the user
 */
export const getAuthApiListSessions = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthApiListSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthApiListSessionsResponses,
    GetAuthApiListSessionsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zGetAuthApiListSessionsResponse.parseAsync(data);
    },
    url: "/auth/api/list-sessions",
    ...options,
  });
};

/**
 * Revoke a single session
 */
export const postAuthApiRevokeSession = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthApiRevokeSessionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthApiRevokeSessionResponses,
    PostAuthApiRevokeSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiRevokeSessionResponse.parseAsync(data);
    },
    url: "/auth/api/revoke-session",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Revoke all sessions for the user
 */
export const postAuthApiRevokeSessions = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthApiRevokeSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthApiRevokeSessionsResponses,
    PostAuthApiRevokeSessionsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiRevokeSessionsResponse.parseAsync(data);
    },
    url: "/auth/api/revoke-sessions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Revoke all other sessions for the user except the current one
 */
export const postAuthApiRevokeOtherSessions = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthApiRevokeOtherSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthApiRevokeOtherSessionsResponses,
    PostAuthApiRevokeOtherSessionsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiRevokeOtherSessionsResponse.parseAsync(data);
    },
    url: "/auth/api/revoke-other-sessions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Link a social account to the user
 */
export const postAuthApiLinkSocial = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthApiLinkSocialData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthApiLinkSocialResponses,
    PostAuthApiLinkSocialErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiLinkSocialResponse.parseAsync(data);
    },
    url: "/auth/api/link-social",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all accounts linked to the user
 */
export const getAuthApiListAccounts = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthApiListAccountsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthApiListAccountsResponses,
    GetAuthApiListAccountsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zGetAuthApiListAccountsResponse.parseAsync(data);
    },
    url: "/auth/api/list-accounts",
    ...options,
  });
};

/**
 * Callback to complete user deletion with verification token
 */
export const getAuthApiDeleteUserCallback = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAuthApiDeleteUserCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthApiDeleteUserCallbackResponses,
    GetAuthApiDeleteUserCallbackErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zGetAuthApiDeleteUserCallbackResponse.parseAsync(data);
    },
    url: "/auth/api/delete-user/callback",
    ...options,
  });
};

/**
 * Unlink an account
 */
export const postAuthApiUnlinkAccount = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthApiUnlinkAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthApiUnlinkAccountResponses,
    PostAuthApiUnlinkAccountErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiUnlinkAccountResponse.parseAsync(data);
    },
    url: "/auth/api/unlink-account",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Refresh the access token using a refresh token
 */
export const postAuthApiRefreshToken = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthApiRefreshTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthApiRefreshTokenResponses,
    PostAuthApiRefreshTokenErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiRefreshTokenResponse.parseAsync(data);
    },
    url: "/auth/api/refresh-token",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a valid access token, doing a refresh if needed
 */
export const postAuthApiGetAccessToken = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthApiGetAccessTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthApiGetAccessTokenResponses,
    PostAuthApiGetAccessTokenErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiGetAccessTokenResponse.parseAsync(data);
    },
    url: "/auth/api/get-access-token",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get the account info provided by the provider
 */
export const postAuthApiAccountInfo = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthApiAccountInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthApiAccountInfoResponses,
    PostAuthApiAccountInfoErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zPostAuthApiAccountInfoResponse.parseAsync(data);
    },
    url: "/auth/api/account-info",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Check if the API is working
 */
export const getAuthApiOk = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthApiOkData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthApiOkResponses,
    GetAuthApiOkErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zGetAuthApiOkResponse.parseAsync(data);
    },
    url: "/auth/api/ok",
    ...options,
  });
};

/**
 * Displays an error page
 */
export const getAuthApiError = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthApiErrorData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthApiErrorResponses,
    GetAuthApiErrorErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zGetAuthApiErrorResponse.parseAsync(data);
    },
    url: "/auth/api/error",
    ...options,
  });
};
