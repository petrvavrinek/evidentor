// This file is auto-generated by @hey-api/openapi-ts

export type User = {
  id?: string;
  name?: string;
  email?: string;
  emailVerified?: boolean;
  image?: string;
  createdAt?: unknown;
  updatedAt?: unknown;
};

export type Session = {
  id?: string;
  expiresAt?: unknown;
  token?: string;
  createdAt?: unknown;
  updatedAt?: unknown;
  ipAddress?: string;
  userAgent?: string;
  userId?: string;
};

export type Account = {
  id?: string;
  accountId?: string;
  providerId?: string;
  userId?: string;
  accessToken?: string;
  refreshToken?: string;
  idToken?: string;
  accessTokenExpiresAt?: unknown;
  refreshTokenExpiresAt?: unknown;
  scope?: string;
  password?: string;
  createdAt?: unknown;
  updatedAt?: unknown;
};

export type Verification = {
  id?: string;
  identifier?: string;
  value?: string;
  expiresAt?: unknown;
  createdAt?: unknown;
  updatedAt?: unknown;
};

export type GetClientData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/client";
};

export type GetClientResponses = {
  200: Array<{
    id: number;
    companyName: string;
    contactName: string;
    email: string | unknown;
    ownerId: string | unknown;
    createdAt: unknown;
  }>;
};

export type GetClientResponse = GetClientResponses[keyof GetClientResponses];

export type PostClientData = {
  body: {
    companyName: string;
    contactName: string;
  };
  path?: never;
  query?: never;
  url: "/client";
};

export type PostClientResponses = {
  200: unknown;
};

export type DeleteClientByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/client/{id}";
};

export type DeleteClientByIdResponses = {
  200: unknown;
};

export type GetClientByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/client/{id}";
};

export type GetClientByIdResponses = {
  200: unknown;
};

export type PatchClientByIdData = {
  body: {
    companyName?: string;
    contactName?: string;
  };
  path: {
    id: number;
  };
  query?: never;
  url: "/client/{id}";
};

export type PatchClientByIdResponses = {
  200: unknown;
};

export type GetProjectData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/project";
};

export type GetProjectResponses = {
  200: unknown;
};

export type PostProjectData = {
  body: {
    title: string;
    clientId: number;
  };
  path?: never;
  query?: never;
  url: "/project";
};

export type PostProjectResponses = {
  200: unknown;
};

export type DeleteProjectByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/project/{id}";
};

export type DeleteProjectByIdResponses = {
  200: unknown;
};

export type GetProjectByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/project/{id}";
};

export type GetProjectByIdResponses = {
  200: unknown;
};

export type PatchProjectByIdData = {
  body: {
    title?: string;
    clientId?: number;
  };
  path: {
    id: number;
  };
  query?: never;
  url: "/project/{id}";
};

export type PatchProjectByIdResponses = {
  200: unknown;
};

export type GetTimeEntryActiveData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/time-entry/active";
};

export type GetTimeEntryActiveErrors = {
  /**
   * Active time entry does not exist
   */
  404: unknown;
};

export type GetTimeEntryActiveResponses = {
  /**
   * Active time entry found
   */
  200: unknown;
};

export type GetTimeEntryByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/time-entry/{id}";
};

export type GetTimeEntryByIdErrors = {
  /**
   * Time entry not found
   */
  404: unknown;
};

export type GetTimeEntryByIdResponses = {
  /**
   * Time entry found and returned
   */
  200: unknown;
};

export type PatchTimeEntryByIdData = {
  body: {
    title?: string;
    userId?: string;
    projectId?: number | unknown;
    startAt?: unknown | string | number;
    endAt?: (unknown | string | number) | unknown;
    createdAt?: unknown;
  };
  path: {
    id: number;
  };
  query?: never;
  url: "/time-entry/{id}";
};

export type PatchTimeEntryByIdErrors = {
  /**
   * Time entry not found
   */
  404: unknown;
};

export type PatchTimeEntryByIdResponses = {
  /**
   * Time entry updated
   */
  200: unknown;
};

export type PostTimeEntryData = {
  body: {
    title: string;
    userId: string;
    projectId: number | unknown;
    startAt: unknown | string | number;
    endAt: (unknown | string | number) | unknown;
    createdAt?: unknown;
  };
  path?: never;
  query?: never;
  url: "/time-entry";
};

export type PostTimeEntryErrors = {
  /**
   * Running time entry already exist
   */
  409: unknown;
};

export type PostTimeEntryResponses = {
  /**
   * Time entry created
   */
  201: unknown;
};

export type GetStatusData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/status";
};

export type GetStatusResponses = {
  200: unknown;
};

export type SocialSignInData = {
  body: {
    /**
     * Callback URL to redirect to after the user has signed in
     */
    callbackURL?: string;
    newUserCallbackURL?: string;
    /**
     * Callback URL to redirect to if an error happens
     */
    errorCallbackURL?: string;
    provider: string;
    /**
     * Disable automatic redirection to the provider. Useful for handling the redirection yourself
     */
    disableRedirect?: string;
    /**
     * ID token from the provider to sign in the user with id token
     */
    idToken?: string;
    /**
     * Array of scopes to request from the provider. This will override the default scopes passed.
     */
    scopes?: string;
    /**
     * Explicitly request sign-up. Useful when disableImplicitSignUp is true for this provider
     */
    requestSignUp?: string;
    /**
     * The login hint to use for the authorization code request
     */
    loginHint?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/sign-in/social";
};

export type SocialSignInErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type SocialSignInError = SocialSignInErrors[keyof SocialSignInErrors];

export type SocialSignInResponses = {
  /**
   * Session response when idToken is provided
   */
  200: {
    redirect: false;
    /**
     * Session token
     */
    token: string;
  };
};

export type SocialSignInResponse =
  SocialSignInResponses[keyof SocialSignInResponses];

export type GetAuthApiGetSessionData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/api/get-session";
};

export type GetAuthApiGetSessionErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthApiGetSessionError =
  GetAuthApiGetSessionErrors[keyof GetAuthApiGetSessionErrors];

export type GetAuthApiGetSessionResponses = {
  /**
   * Success
   */
  200: {
    session: Session;
    user: User;
  };
};

export type GetAuthApiGetSessionResponse =
  GetAuthApiGetSessionResponses[keyof GetAuthApiGetSessionResponses];

export type PostAuthApiSignOutData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/auth/api/sign-out";
};

export type PostAuthApiSignOutErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiSignOutError =
  PostAuthApiSignOutErrors[keyof PostAuthApiSignOutErrors];

export type PostAuthApiSignOutResponses = {
  /**
   * Success
   */
  200: {
    success?: boolean;
  };
};

export type PostAuthApiSignOutResponse =
  PostAuthApiSignOutResponses[keyof PostAuthApiSignOutResponses];

export type PostAuthApiSignUpEmailData = {
  body?: {
    /**
     * The name of the user
     */
    name: string;
    /**
     * The email of the user
     */
    email: string;
    /**
     * The password of the user
     */
    password: string;
    /**
     * The URL to use for email verification callback
     */
    callbackURL?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/sign-up/email";
};

export type PostAuthApiSignUpEmailErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiSignUpEmailError =
  PostAuthApiSignUpEmailErrors[keyof PostAuthApiSignUpEmailErrors];

export type PostAuthApiSignUpEmailResponses = {
  /**
   * Successfully created user
   */
  200: {
    /**
     * Authentication token for the session
     */
    token?: string | null;
    user: {
      /**
       * The unique identifier of the user
       */
      id: string;
      /**
       * The email address of the user
       */
      email: string;
      /**
       * The name of the user
       */
      name: string;
      /**
       * The profile image URL of the user
       */
      image?: string | null;
      /**
       * Whether the email has been verified
       */
      emailVerified: boolean;
      /**
       * When the user was created
       */
      createdAt: string;
      /**
       * When the user was last updated
       */
      updatedAt: string;
    };
  };
};

export type PostAuthApiSignUpEmailResponse =
  PostAuthApiSignUpEmailResponses[keyof PostAuthApiSignUpEmailResponses];

export type PostAuthApiSignInEmailData = {
  body: {
    /**
     * Email of the user
     */
    email: string;
    /**
     * Password of the user
     */
    password: string;
    /**
     * Callback URL to use as a redirect for email verification
     */
    callbackURL?: string;
    /**
     * If this is false, the session will not be remembered. Default is `true`.
     */
    rememberMe?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/sign-in/email";
};

export type PostAuthApiSignInEmailErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiSignInEmailError =
  PostAuthApiSignInEmailErrors[keyof PostAuthApiSignInEmailErrors];

export type PostAuthApiSignInEmailResponses = {
  /**
   * Session response when idToken is provided
   */
  200: {
    redirect: false;
    /**
     * Session token
     */
    token: string;
    url?: unknown | null;
    user: {
      id: string;
      email: string;
      name?: string | null;
      image?: string | null;
      emailVerified: boolean;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type PostAuthApiSignInEmailResponse =
  PostAuthApiSignInEmailResponses[keyof PostAuthApiSignInEmailResponses];

export type PostAuthApiForgetPasswordData = {
  body: {
    /**
     * The email address of the user to send a password reset email to
     */
    email: string;
    /**
     * The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN
     */
    redirectTo?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/forget-password";
};

export type PostAuthApiForgetPasswordErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiForgetPasswordError =
  PostAuthApiForgetPasswordErrors[keyof PostAuthApiForgetPasswordErrors];

export type PostAuthApiForgetPasswordResponses = {
  /**
   * Success
   */
  200: {
    status?: boolean;
    message?: string;
  };
};

export type PostAuthApiForgetPasswordResponse =
  PostAuthApiForgetPasswordResponses[keyof PostAuthApiForgetPasswordResponses];

export type PostAuthApiResetPasswordData = {
  body: {
    /**
     * The new password to set
     */
    newPassword: string;
    /**
     * The token to reset the password
     */
    token?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/reset-password";
};

export type PostAuthApiResetPasswordErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiResetPasswordError =
  PostAuthApiResetPasswordErrors[keyof PostAuthApiResetPasswordErrors];

export type PostAuthApiResetPasswordResponses = {
  /**
   * Success
   */
  200: {
    status?: boolean;
  };
};

export type PostAuthApiResetPasswordResponse =
  PostAuthApiResetPasswordResponses[keyof PostAuthApiResetPasswordResponses];

export type GetAuthApiVerifyEmailData = {
  body?: never;
  path?: never;
  query: {
    /**
     * The token to verify the email
     */
    token: string;
    /**
     * The URL to redirect to after email verification
     */
    callbackURL?: string;
  };
  url: "/auth/api/verify-email";
};

export type GetAuthApiVerifyEmailErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthApiVerifyEmailError =
  GetAuthApiVerifyEmailErrors[keyof GetAuthApiVerifyEmailErrors];

export type GetAuthApiVerifyEmailResponses = {
  /**
   * Success
   */
  200: {
    user: {
      /**
       * User ID
       */
      id: string;
      /**
       * User email
       */
      email: string;
      /**
       * User name
       */
      name: string;
      /**
       * User image URL
       */
      image: string;
      /**
       * Indicates if the user email is verified
       */
      emailVerified: boolean;
      /**
       * User creation date
       */
      createdAt: string;
      /**
       * User update date
       */
      updatedAt: string;
    };
    /**
     * Indicates if the email was verified successfully
     */
    status: boolean;
  };
};

export type GetAuthApiVerifyEmailResponse =
  GetAuthApiVerifyEmailResponses[keyof GetAuthApiVerifyEmailResponses];

export type PostAuthApiSendVerificationEmailData = {
  body?: {
    /**
     * The email to send the verification email to
     */
    email: string;
    /**
     * The URL to use for email verification callback
     */
    callbackURL?: string | null;
  };
  path?: never;
  query?: never;
  url: "/auth/api/send-verification-email";
};

export type PostAuthApiSendVerificationEmailErrors = {
  /**
   * Bad Request
   */
  400: {
    /**
     * Error message
     */
    message?: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiSendVerificationEmailError =
  PostAuthApiSendVerificationEmailErrors[keyof PostAuthApiSendVerificationEmailErrors];

export type PostAuthApiSendVerificationEmailResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if the email was sent successfully
     */
    status?: boolean;
  };
};

export type PostAuthApiSendVerificationEmailResponse =
  PostAuthApiSendVerificationEmailResponses[keyof PostAuthApiSendVerificationEmailResponses];

export type PostAuthApiChangeEmailData = {
  body: {
    /**
     * The new email to set
     */
    newEmail: string;
    /**
     * The URL to redirect to after email verification
     */
    callbackURL?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/change-email";
};

export type PostAuthApiChangeEmailErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiChangeEmailError =
  PostAuthApiChangeEmailErrors[keyof PostAuthApiChangeEmailErrors];

export type PostAuthApiChangeEmailResponses = {
  /**
   * Email change request processed successfully
   */
  200: {
    /**
     * Indicates if the request was successful
     */
    status: boolean;
    /**
     * Status message of the email change process
     */
    message?: "Email updated" | "Verification email sent";
  };
};

export type PostAuthApiChangeEmailResponse =
  PostAuthApiChangeEmailResponses[keyof PostAuthApiChangeEmailResponses];

export type PostAuthApiChangePasswordData = {
  body: {
    /**
     * The new password to set
     */
    newPassword: string;
    /**
     * The current password
     */
    currentPassword: string;
    /**
     * Revoke all other sessions
     */
    revokeOtherSessions?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/change-password";
};

export type PostAuthApiChangePasswordErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiChangePasswordError =
  PostAuthApiChangePasswordErrors[keyof PostAuthApiChangePasswordErrors];

export type PostAuthApiChangePasswordResponses = {
  /**
   * Password successfully changed
   */
  200: {
    /**
     * New session token if other sessions were revoked
     */
    token?: string | null;
    user: {
      /**
       * The unique identifier of the user
       */
      id: string;
      /**
       * The email address of the user
       */
      email: string;
      /**
       * The name of the user
       */
      name: string;
      /**
       * The profile image URL of the user
       */
      image?: string | null;
      /**
       * Whether the email has been verified
       */
      emailVerified: boolean;
      /**
       * When the user was created
       */
      createdAt: string;
      /**
       * When the user was last updated
       */
      updatedAt: string;
    };
  };
};

export type PostAuthApiChangePasswordResponse =
  PostAuthApiChangePasswordResponses[keyof PostAuthApiChangePasswordResponses];

export type PostAuthApiUpdateUserData = {
  body?: {
    /**
     * The name of the user
     */
    name?: string;
    /**
     * The image of the user
     */
    image?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/update-user";
};

export type PostAuthApiUpdateUserErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiUpdateUserError =
  PostAuthApiUpdateUserErrors[keyof PostAuthApiUpdateUserErrors];

export type PostAuthApiUpdateUserResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if the update was successful
     */
    status?: boolean;
  };
};

export type PostAuthApiUpdateUserResponse =
  PostAuthApiUpdateUserResponses[keyof PostAuthApiUpdateUserResponses];

export type PostAuthApiDeleteUserData = {
  body: {
    callbackURL?: string;
    password?: string;
    token?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/delete-user";
};

export type PostAuthApiDeleteUserErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiDeleteUserError =
  PostAuthApiDeleteUserErrors[keyof PostAuthApiDeleteUserErrors];

export type PostAuthApiDeleteUserResponses = {
  /**
   * User deletion processed successfully
   */
  200: {
    /**
     * Indicates if the operation was successful
     */
    success: boolean;
    /**
     * Status message of the deletion process
     */
    message: "User deleted" | "Verification email sent";
  };
};

export type PostAuthApiDeleteUserResponse =
  PostAuthApiDeleteUserResponses[keyof PostAuthApiDeleteUserResponses];

export type GetAuthApiResetPasswordByTokenData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The URL to redirect the user to reset their password
     */
    callbackURL?: string;
  };
  url: "/auth/api/reset-password/{token}";
};

export type GetAuthApiResetPasswordByTokenErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthApiResetPasswordByTokenError =
  GetAuthApiResetPasswordByTokenErrors[keyof GetAuthApiResetPasswordByTokenErrors];

export type GetAuthApiResetPasswordByTokenResponses = {
  /**
   * Success
   */
  200: {
    token?: string;
  };
};

export type GetAuthApiResetPasswordByTokenResponse =
  GetAuthApiResetPasswordByTokenResponses[keyof GetAuthApiResetPasswordByTokenResponses];

export type PostAuthApiRequestPasswordResetData = {
  body: {
    /**
     * The email address of the user to send a password reset email to
     */
    email: string;
    /**
     * The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN
     */
    redirectTo?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/request-password-reset";
};

export type PostAuthApiRequestPasswordResetErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiRequestPasswordResetError =
  PostAuthApiRequestPasswordResetErrors[keyof PostAuthApiRequestPasswordResetErrors];

export type PostAuthApiRequestPasswordResetResponses = {
  /**
   * Success
   */
  200: {
    status?: boolean;
    message?: string;
  };
};

export type PostAuthApiRequestPasswordResetResponse =
  PostAuthApiRequestPasswordResetResponses[keyof PostAuthApiRequestPasswordResetResponses];

export type GetAuthApiListSessionsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/api/list-sessions";
};

export type GetAuthApiListSessionsErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthApiListSessionsError =
  GetAuthApiListSessionsErrors[keyof GetAuthApiListSessionsErrors];

export type GetAuthApiListSessionsResponses = {
  /**
   * Success
   */
  200: Array<Session>;
};

export type GetAuthApiListSessionsResponse =
  GetAuthApiListSessionsResponses[keyof GetAuthApiListSessionsResponses];

export type PostAuthApiRevokeSessionData = {
  body?: {
    /**
     * The token to revoke
     */
    token: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/revoke-session";
};

export type PostAuthApiRevokeSessionErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiRevokeSessionError =
  PostAuthApiRevokeSessionErrors[keyof PostAuthApiRevokeSessionErrors];

export type PostAuthApiRevokeSessionResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if the session was revoked successfully
     */
    status: boolean;
  };
};

export type PostAuthApiRevokeSessionResponse =
  PostAuthApiRevokeSessionResponses[keyof PostAuthApiRevokeSessionResponses];

export type PostAuthApiRevokeSessionsData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/auth/api/revoke-sessions";
};

export type PostAuthApiRevokeSessionsErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiRevokeSessionsError =
  PostAuthApiRevokeSessionsErrors[keyof PostAuthApiRevokeSessionsErrors];

export type PostAuthApiRevokeSessionsResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if all sessions were revoked successfully
     */
    status: boolean;
  };
};

export type PostAuthApiRevokeSessionsResponse =
  PostAuthApiRevokeSessionsResponses[keyof PostAuthApiRevokeSessionsResponses];

export type PostAuthApiRevokeOtherSessionsData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/auth/api/revoke-other-sessions";
};

export type PostAuthApiRevokeOtherSessionsErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiRevokeOtherSessionsError =
  PostAuthApiRevokeOtherSessionsErrors[keyof PostAuthApiRevokeOtherSessionsErrors];

export type PostAuthApiRevokeOtherSessionsResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if all other sessions were revoked successfully
     */
    status: boolean;
  };
};

export type PostAuthApiRevokeOtherSessionsResponse =
  PostAuthApiRevokeOtherSessionsResponses[keyof PostAuthApiRevokeOtherSessionsResponses];

export type PostAuthApiLinkSocialData = {
  body: {
    /**
     * The URL to redirect to after the user has signed in
     */
    callbackURL?: string;
    provider: string;
    /**
     * Additional scopes to request from the provider
     */
    scopes?: string;
    /**
     * The URL to redirect to if there is an error during the link process
     */
    errorCallbackURL?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/link-social";
};

export type PostAuthApiLinkSocialErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiLinkSocialError =
  PostAuthApiLinkSocialErrors[keyof PostAuthApiLinkSocialErrors];

export type PostAuthApiLinkSocialResponses = {
  /**
   * Success
   */
  200: {
    /**
     * The authorization URL to redirect the user to
     */
    url: string;
    /**
     * Indicates if the user should be redirected to the authorization URL
     */
    redirect: boolean;
  };
};

export type PostAuthApiLinkSocialResponse =
  PostAuthApiLinkSocialResponses[keyof PostAuthApiLinkSocialResponses];

export type GetAuthApiListAccountsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/api/list-accounts";
};

export type GetAuthApiListAccountsErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthApiListAccountsError =
  GetAuthApiListAccountsErrors[keyof GetAuthApiListAccountsErrors];

export type GetAuthApiListAccountsResponses = {
  /**
   * Success
   */
  200: Array<{
    id?: string;
    provider?: string;
    createdAt?: string;
    updatedAt?: string;
  }>;
};

export type GetAuthApiListAccountsResponse =
  GetAuthApiListAccountsResponses[keyof GetAuthApiListAccountsResponses];

export type GetAuthApiDeleteUserCallbackData = {
  body?: never;
  path?: never;
  query?: {
    token?: string;
    callbackURL?: string;
  };
  url: "/auth/api/delete-user/callback";
};

export type GetAuthApiDeleteUserCallbackErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthApiDeleteUserCallbackError =
  GetAuthApiDeleteUserCallbackErrors[keyof GetAuthApiDeleteUserCallbackErrors];

export type GetAuthApiDeleteUserCallbackResponses = {
  /**
   * User successfully deleted
   */
  200: {
    /**
     * Indicates if the deletion was successful
     */
    success: boolean;
    /**
     * Confirmation message
     */
    message: "User deleted";
  };
};

export type GetAuthApiDeleteUserCallbackResponse =
  GetAuthApiDeleteUserCallbackResponses[keyof GetAuthApiDeleteUserCallbackResponses];

export type PostAuthApiUnlinkAccountData = {
  body: {
    providerId: string;
    accountId?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/unlink-account";
};

export type PostAuthApiUnlinkAccountErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiUnlinkAccountError =
  PostAuthApiUnlinkAccountErrors[keyof PostAuthApiUnlinkAccountErrors];

export type PostAuthApiUnlinkAccountResponses = {
  /**
   * Success
   */
  200: {
    status?: boolean;
  };
};

export type PostAuthApiUnlinkAccountResponse =
  PostAuthApiUnlinkAccountResponses[keyof PostAuthApiUnlinkAccountResponses];

export type PostAuthApiRefreshTokenData = {
  body: {
    /**
     * The provider ID for the OAuth provider
     */
    providerId: string;
    /**
     * The account ID associated with the refresh token
     */
    accountId?: string;
    /**
     * The user ID associated with the account
     */
    userId?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/refresh-token";
};

export type PostAuthApiRefreshTokenErrors = {
  /**
   * Invalid refresh token or provider configuration
   */
  400: unknown;
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiRefreshTokenError =
  PostAuthApiRefreshTokenErrors[keyof PostAuthApiRefreshTokenErrors];

export type PostAuthApiRefreshTokenResponses = {
  /**
   * Access token refreshed successfully
   */
  200: {
    tokenType?: string;
    idToken?: string;
    accessToken?: string;
    refreshToken?: string;
    accessTokenExpiresAt?: string;
    refreshTokenExpiresAt?: string;
  };
};

export type PostAuthApiRefreshTokenResponse =
  PostAuthApiRefreshTokenResponses[keyof PostAuthApiRefreshTokenResponses];

export type PostAuthApiGetAccessTokenData = {
  body: {
    /**
     * The provider ID for the OAuth provider
     */
    providerId: string;
    /**
     * The account ID associated with the refresh token
     */
    accountId?: string;
    /**
     * The user ID associated with the account
     */
    userId?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/get-access-token";
};

export type PostAuthApiGetAccessTokenErrors = {
  /**
   * Invalid refresh token or provider configuration
   */
  400: unknown;
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiGetAccessTokenError =
  PostAuthApiGetAccessTokenErrors[keyof PostAuthApiGetAccessTokenErrors];

export type PostAuthApiGetAccessTokenResponses = {
  /**
   * A Valid access token
   */
  200: {
    tokenType?: string;
    idToken?: string;
    accessToken?: string;
    refreshToken?: string;
    accessTokenExpiresAt?: string;
    refreshTokenExpiresAt?: string;
  };
};

export type PostAuthApiGetAccessTokenResponse =
  PostAuthApiGetAccessTokenResponses[keyof PostAuthApiGetAccessTokenResponses];

export type PostAuthApiAccountInfoData = {
  body: {
    /**
     * The provider given account id for which to get the account info
     */
    accountId: string;
  };
  path?: never;
  query?: never;
  url: "/auth/api/account-info";
};

export type PostAuthApiAccountInfoErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthApiAccountInfoError =
  PostAuthApiAccountInfoErrors[keyof PostAuthApiAccountInfoErrors];

export type PostAuthApiAccountInfoResponses = {
  /**
   * Success
   */
  200: {
    user: {
      id: string;
      name?: string;
      email?: string;
      image?: string;
      emailVerified: boolean;
    };
    data: {
      [key: string]: unknown;
    };
  };
};

export type PostAuthApiAccountInfoResponse =
  PostAuthApiAccountInfoResponses[keyof PostAuthApiAccountInfoResponses];

export type GetAuthApiOkData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/api/ok";
};

export type GetAuthApiOkErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthApiOkError = GetAuthApiOkErrors[keyof GetAuthApiOkErrors];

export type GetAuthApiOkResponses = {
  /**
   * API is working
   */
  200: {
    /**
     * Indicates if the API is working
     */
    ok: boolean;
  };
};

export type GetAuthApiOkResponse =
  GetAuthApiOkResponses[keyof GetAuthApiOkResponses];

export type GetAuthApiErrorData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/api/error";
};

export type GetAuthApiErrorErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthApiErrorError =
  GetAuthApiErrorErrors[keyof GetAuthApiErrorErrors];

export type GetAuthApiErrorResponses = {
  /**
   * The HTML content of the error page
   */
  200: string;
};

export type GetAuthApiErrorResponse =
  GetAuthApiErrorResponses[keyof GetAuthApiErrorResponses];

export type ClientOptions = {
  baseUrl: "http://localhost:3000" | (string & {});
};
