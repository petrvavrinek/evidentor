// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getClient,
  postClient,
  deleteClientById,
  getClientById,
  patchClientById,
  getProject,
  postProject,
  deleteProjectById,
  getProjectById,
  patchProjectById,
  getTimeEntryActive,
  deleteTimeEntryById,
  getTimeEntryById,
  patchTimeEntryById,
  getTimeEntry,
  postTimeEntry,
  getProjectTask,
  deleteProjectTaskById,
  patchProjectTaskById,
  postProjectTaskById,
  getStatus,
  socialSignIn,
  getAuthGetSession,
  postAuthSignOut,
  postAuthSignUpEmail,
  postAuthSignInEmail,
  postAuthForgetPassword,
  postAuthResetPassword,
  getAuthVerifyEmail,
  postAuthSendVerificationEmail,
  postAuthChangeEmail,
  postAuthChangePassword,
  postAuthUpdateUser,
  postAuthDeleteUser,
  getAuthResetPasswordByToken,
  postAuthRequestPasswordReset,
  getAuthListSessions,
  postAuthRevokeSession,
  postAuthRevokeSessions,
  postAuthRevokeOtherSessions,
  postAuthLinkSocial,
  getAuthListAccounts,
  getAuthDeleteUserCallback,
  postAuthUnlinkAccount,
  postAuthRefreshToken,
  postAuthGetAccessToken,
  postAuthAccountInfo,
  getAuthOk,
  getAuthError,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  GetClientData,
  PostClientData,
  PostClientResponse,
  DeleteClientByIdData,
  GetClientByIdData,
  PatchClientByIdData,
  PatchClientByIdResponse,
  GetProjectData,
  PostProjectData,
  PostProjectResponse,
  DeleteProjectByIdData,
  GetProjectByIdData,
  PatchProjectByIdData,
  GetTimeEntryActiveData,
  DeleteTimeEntryByIdData,
  GetTimeEntryByIdData,
  PatchTimeEntryByIdData,
  PatchTimeEntryByIdResponse,
  GetTimeEntryData,
  PostTimeEntryData,
  PostTimeEntryResponse,
  GetProjectTaskData,
  DeleteProjectTaskByIdData,
  PatchProjectTaskByIdData,
  PostProjectTaskByIdData,
  PostProjectTaskByIdResponse,
  GetStatusData,
  SocialSignInData,
  SocialSignInError,
  SocialSignInResponse,
  GetAuthGetSessionData,
  PostAuthSignOutData,
  PostAuthSignOutError,
  PostAuthSignOutResponse,
  PostAuthSignUpEmailData,
  PostAuthSignUpEmailError,
  PostAuthSignUpEmailResponse,
  PostAuthSignInEmailData,
  PostAuthSignInEmailError,
  PostAuthSignInEmailResponse,
  PostAuthForgetPasswordData,
  PostAuthForgetPasswordError,
  PostAuthForgetPasswordResponse,
  PostAuthResetPasswordData,
  PostAuthResetPasswordError,
  PostAuthResetPasswordResponse,
  GetAuthVerifyEmailData,
  PostAuthSendVerificationEmailData,
  PostAuthSendVerificationEmailError,
  PostAuthSendVerificationEmailResponse,
  PostAuthChangeEmailData,
  PostAuthChangeEmailError,
  PostAuthChangeEmailResponse,
  PostAuthChangePasswordData,
  PostAuthChangePasswordError,
  PostAuthChangePasswordResponse,
  PostAuthUpdateUserData,
  PostAuthUpdateUserError,
  PostAuthUpdateUserResponse,
  PostAuthDeleteUserData,
  PostAuthDeleteUserError,
  PostAuthDeleteUserResponse,
  GetAuthResetPasswordByTokenData,
  PostAuthRequestPasswordResetData,
  PostAuthRequestPasswordResetError,
  PostAuthRequestPasswordResetResponse,
  GetAuthListSessionsData,
  PostAuthRevokeSessionData,
  PostAuthRevokeSessionError,
  PostAuthRevokeSessionResponse,
  PostAuthRevokeSessionsData,
  PostAuthRevokeSessionsError,
  PostAuthRevokeSessionsResponse,
  PostAuthRevokeOtherSessionsData,
  PostAuthRevokeOtherSessionsError,
  PostAuthRevokeOtherSessionsResponse,
  PostAuthLinkSocialData,
  PostAuthLinkSocialError,
  PostAuthLinkSocialResponse,
  GetAuthListAccountsData,
  GetAuthDeleteUserCallbackData,
  PostAuthUnlinkAccountData,
  PostAuthUnlinkAccountError,
  PostAuthUnlinkAccountResponse,
  PostAuthRefreshTokenData,
  PostAuthRefreshTokenError,
  PostAuthRefreshTokenResponse,
  PostAuthGetAccessTokenData,
  PostAuthGetAccessTokenError,
  PostAuthGetAccessTokenResponse,
  PostAuthAccountInfoData,
  PostAuthAccountInfoError,
  PostAuthAccountInfoResponse,
  GetAuthOkData,
  GetAuthErrorData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getClientQueryKey = (options?: Options<GetClientData>) =>
  createQueryKey("getClient", options);

/**
 * Get all user-defined clients
 */
export const getClientOptions = (options?: Options<GetClientData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClient({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getClientQueryKey(options),
  });
};

export const postClientQueryKey = (options: Options<PostClientData>) =>
  createQueryKey("postClient", options);

/**
 * Create new user-defined client
 */
export const postClientOptions = (options: Options<PostClientData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postClient({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postClientQueryKey(options),
  });
};

/**
 * Create new user-defined client
 */
export const postClientMutation = (
  options?: Partial<Options<PostClientData>>,
): UseMutationOptions<
  PostClientResponse,
  DefaultError,
  Options<PostClientData>
> => {
  const mutationOptions: UseMutationOptions<
    PostClientResponse,
    DefaultError,
    Options<PostClientData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postClient({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete user-defined client, all projects containing this client will be unset
 */
export const deleteClientByIdMutation = (
  options?: Partial<Options<DeleteClientByIdData>>,
): UseMutationOptions<unknown, DefaultError, Options<DeleteClientByIdData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteClientByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteClientById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getClientByIdQueryKey = (options: Options<GetClientByIdData>) =>
  createQueryKey("getClientById", options);

/**
 * Get user-defined client by ID
 */
export const getClientByIdOptions = (options: Options<GetClientByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClientById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getClientByIdQueryKey(options),
  });
};

/**
 * Update user-defined client data
 */
export const patchClientByIdMutation = (
  options?: Partial<Options<PatchClientByIdData>>,
): UseMutationOptions<
  PatchClientByIdResponse,
  DefaultError,
  Options<PatchClientByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchClientByIdResponse,
    DefaultError,
    Options<PatchClientByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchClientById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProjectQueryKey = (options?: Options<GetProjectData>) =>
  createQueryKey("getProject", options);

/**
 * Get all user projects
 */
export const getProjectOptions = (options?: Options<GetProjectData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProject({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProjectQueryKey(options),
  });
};

export const postProjectQueryKey = (options: Options<PostProjectData>) =>
  createQueryKey("postProject", options);

/**
 * Create new user project
 */
export const postProjectOptions = (options: Options<PostProjectData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postProject({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postProjectQueryKey(options),
  });
};

/**
 * Create new user project
 */
export const postProjectMutation = (
  options?: Partial<Options<PostProjectData>>,
): UseMutationOptions<
  PostProjectResponse,
  DefaultError,
  Options<PostProjectData>
> => {
  const mutationOptions: UseMutationOptions<
    PostProjectResponse,
    DefaultError,
    Options<PostProjectData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postProject({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete user project, all time entries will be removed
 */
export const deleteProjectByIdMutation = (
  options?: Partial<Options<DeleteProjectByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteProjectByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteProjectByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteProjectById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProjectByIdQueryKey = (options: Options<GetProjectByIdData>) =>
  createQueryKey("getProjectById", options);

/**
 * Get user project by ID
 */
export const getProjectByIdOptions = (options: Options<GetProjectByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProjectById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProjectByIdQueryKey(options),
  });
};

/**
 * Update user project data
 */
export const patchProjectByIdMutation = (
  options?: Partial<Options<PatchProjectByIdData>>,
): UseMutationOptions<unknown, DefaultError, Options<PatchProjectByIdData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PatchProjectByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchProjectById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getTimeEntryActiveQueryKey = (
  options?: Options<GetTimeEntryActiveData>,
) => createQueryKey("getTimeEntryActive", options);

/**
 * Get active time entry
 */
export const getTimeEntryActiveOptions = (
  options?: Options<GetTimeEntryActiveData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTimeEntryActive({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTimeEntryActiveQueryKey(options),
  });
};

/**
 * Delete time entry
 */
export const deleteTimeEntryByIdMutation = (
  options?: Partial<Options<DeleteTimeEntryByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteTimeEntryByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteTimeEntryByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteTimeEntryById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getTimeEntryByIdQueryKey = (
  options: Options<GetTimeEntryByIdData>,
) => createQueryKey("getTimeEntryById", options);

/**
 * Return time entry by ID
 */
export const getTimeEntryByIdOptions = (
  options: Options<GetTimeEntryByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTimeEntryById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTimeEntryByIdQueryKey(options),
  });
};

/**
 * Update existing time entry
 */
export const patchTimeEntryByIdMutation = (
  options?: Partial<Options<PatchTimeEntryByIdData>>,
): UseMutationOptions<
  PatchTimeEntryByIdResponse,
  DefaultError,
  Options<PatchTimeEntryByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchTimeEntryByIdResponse,
    DefaultError,
    Options<PatchTimeEntryByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchTimeEntryById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getTimeEntryQueryKey = (options?: Options<GetTimeEntryData>) =>
  createQueryKey("getTimeEntry", options);

export const getTimeEntryOptions = (options?: Options<GetTimeEntryData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTimeEntry({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTimeEntryQueryKey(options),
  });
};

export const postTimeEntryQueryKey = (options: Options<PostTimeEntryData>) =>
  createQueryKey("postTimeEntry", options);

/**
 * Create new time entry
 */
export const postTimeEntryOptions = (options: Options<PostTimeEntryData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postTimeEntry({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postTimeEntryQueryKey(options),
  });
};

/**
 * Create new time entry
 */
export const postTimeEntryMutation = (
  options?: Partial<Options<PostTimeEntryData>>,
): UseMutationOptions<
  PostTimeEntryResponse,
  DefaultError,
  Options<PostTimeEntryData>
> => {
  const mutationOptions: UseMutationOptions<
    PostTimeEntryResponse,
    DefaultError,
    Options<PostTimeEntryData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postTimeEntry({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProjectTaskQueryKey = (options?: Options<GetProjectTaskData>) =>
  createQueryKey("getProjectTask", options);

export const getProjectTaskOptions = (
  options?: Options<GetProjectTaskData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProjectTask({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProjectTaskQueryKey(options),
  });
};

/**
 * Delete project task by ID
 */
export const deleteProjectTaskByIdMutation = (
  options?: Partial<Options<DeleteProjectTaskByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteProjectTaskByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteProjectTaskByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteProjectTaskById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const patchProjectTaskByIdMutation = (
  options?: Partial<Options<PatchProjectTaskByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PatchProjectTaskByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PatchProjectTaskByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchProjectTaskById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postProjectTaskByIdQueryKey = (
  options: Options<PostProjectTaskByIdData>,
) => createQueryKey("postProjectTaskById", options);

/**
 * Create new project task
 */
export const postProjectTaskByIdOptions = (
  options: Options<PostProjectTaskByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postProjectTaskById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postProjectTaskByIdQueryKey(options),
  });
};

/**
 * Create new project task
 */
export const postProjectTaskByIdMutation = (
  options?: Partial<Options<PostProjectTaskByIdData>>,
): UseMutationOptions<
  PostProjectTaskByIdResponse,
  DefaultError,
  Options<PostProjectTaskByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PostProjectTaskByIdResponse,
    DefaultError,
    Options<PostProjectTaskByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postProjectTaskById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getStatusQueryKey = (options?: Options<GetStatusData>) =>
  createQueryKey("getStatus", options);

export const getStatusOptions = (options?: Options<GetStatusData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getStatusQueryKey(options),
  });
};

export const socialSignInQueryKey = (options: Options<SocialSignInData>) =>
  createQueryKey("socialSignIn", options);

/**
 * Sign in with a social provider
 */
export const socialSignInOptions = (options: Options<SocialSignInData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await socialSignIn({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: socialSignInQueryKey(options),
  });
};

/**
 * Sign in with a social provider
 */
export const socialSignInMutation = (
  options?: Partial<Options<SocialSignInData>>,
): UseMutationOptions<
  SocialSignInResponse,
  SocialSignInError,
  Options<SocialSignInData>
> => {
  const mutationOptions: UseMutationOptions<
    SocialSignInResponse,
    SocialSignInError,
    Options<SocialSignInData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await socialSignIn({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthGetSessionQueryKey = (
  options?: Options<GetAuthGetSessionData>,
) => createQueryKey("getAuthGetSession", options);

/**
 * Get the current session
 */
export const getAuthGetSessionOptions = (
  options?: Options<GetAuthGetSessionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthGetSession({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthGetSessionQueryKey(options),
  });
};

export const postAuthSignOutQueryKey = (
  options?: Options<PostAuthSignOutData>,
) => createQueryKey("postAuthSignOut", options);

/**
 * Sign out the current user
 */
export const postAuthSignOutOptions = (
  options?: Options<PostAuthSignOutData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthSignOut({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthSignOutQueryKey(options),
  });
};

/**
 * Sign out the current user
 */
export const postAuthSignOutMutation = (
  options?: Partial<Options<PostAuthSignOutData>>,
): UseMutationOptions<
  PostAuthSignOutResponse,
  PostAuthSignOutError,
  Options<PostAuthSignOutData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthSignOutResponse,
    PostAuthSignOutError,
    Options<PostAuthSignOutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthSignOut({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthSignUpEmailQueryKey = (
  options?: Options<PostAuthSignUpEmailData>,
) => createQueryKey("postAuthSignUpEmail", options);

/**
 * Sign up a user using email and password
 */
export const postAuthSignUpEmailOptions = (
  options?: Options<PostAuthSignUpEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthSignUpEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthSignUpEmailQueryKey(options),
  });
};

/**
 * Sign up a user using email and password
 */
export const postAuthSignUpEmailMutation = (
  options?: Partial<Options<PostAuthSignUpEmailData>>,
): UseMutationOptions<
  PostAuthSignUpEmailResponse,
  PostAuthSignUpEmailError,
  Options<PostAuthSignUpEmailData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthSignUpEmailResponse,
    PostAuthSignUpEmailError,
    Options<PostAuthSignUpEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthSignUpEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthSignInEmailQueryKey = (
  options: Options<PostAuthSignInEmailData>,
) => createQueryKey("postAuthSignInEmail", options);

/**
 * Sign in with email and password
 */
export const postAuthSignInEmailOptions = (
  options: Options<PostAuthSignInEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthSignInEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthSignInEmailQueryKey(options),
  });
};

/**
 * Sign in with email and password
 */
export const postAuthSignInEmailMutation = (
  options?: Partial<Options<PostAuthSignInEmailData>>,
): UseMutationOptions<
  PostAuthSignInEmailResponse,
  PostAuthSignInEmailError,
  Options<PostAuthSignInEmailData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthSignInEmailResponse,
    PostAuthSignInEmailError,
    Options<PostAuthSignInEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthSignInEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthForgetPasswordQueryKey = (
  options: Options<PostAuthForgetPasswordData>,
) => createQueryKey("postAuthForgetPassword", options);

/**
 * Send a password reset email to the user
 */
export const postAuthForgetPasswordOptions = (
  options: Options<PostAuthForgetPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthForgetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthForgetPasswordQueryKey(options),
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthForgetPasswordMutation = (
  options?: Partial<Options<PostAuthForgetPasswordData>>,
): UseMutationOptions<
  PostAuthForgetPasswordResponse,
  PostAuthForgetPasswordError,
  Options<PostAuthForgetPasswordData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthForgetPasswordResponse,
    PostAuthForgetPasswordError,
    Options<PostAuthForgetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthForgetPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthResetPasswordQueryKey = (
  options: Options<PostAuthResetPasswordData>,
) => createQueryKey("postAuthResetPassword", options);

/**
 * Reset the password for a user
 */
export const postAuthResetPasswordOptions = (
  options: Options<PostAuthResetPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthResetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthResetPasswordQueryKey(options),
  });
};

/**
 * Reset the password for a user
 */
export const postAuthResetPasswordMutation = (
  options?: Partial<Options<PostAuthResetPasswordData>>,
): UseMutationOptions<
  PostAuthResetPasswordResponse,
  PostAuthResetPasswordError,
  Options<PostAuthResetPasswordData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthResetPasswordResponse,
    PostAuthResetPasswordError,
    Options<PostAuthResetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthResetPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthVerifyEmailQueryKey = (
  options: Options<GetAuthVerifyEmailData>,
) => createQueryKey("getAuthVerifyEmail", options);

/**
 * Verify the email of the user
 */
export const getAuthVerifyEmailOptions = (
  options: Options<GetAuthVerifyEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthVerifyEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthVerifyEmailQueryKey(options),
  });
};

export const postAuthSendVerificationEmailQueryKey = (
  options?: Options<PostAuthSendVerificationEmailData>,
) => createQueryKey("postAuthSendVerificationEmail", options);

/**
 * Send a verification email to the user
 */
export const postAuthSendVerificationEmailOptions = (
  options?: Options<PostAuthSendVerificationEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthSendVerificationEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthSendVerificationEmailQueryKey(options),
  });
};

/**
 * Send a verification email to the user
 */
export const postAuthSendVerificationEmailMutation = (
  options?: Partial<Options<PostAuthSendVerificationEmailData>>,
): UseMutationOptions<
  PostAuthSendVerificationEmailResponse,
  PostAuthSendVerificationEmailError,
  Options<PostAuthSendVerificationEmailData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthSendVerificationEmailResponse,
    PostAuthSendVerificationEmailError,
    Options<PostAuthSendVerificationEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthSendVerificationEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthChangeEmailQueryKey = (
  options: Options<PostAuthChangeEmailData>,
) => createQueryKey("postAuthChangeEmail", options);

export const postAuthChangeEmailOptions = (
  options: Options<PostAuthChangeEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthChangeEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthChangeEmailQueryKey(options),
  });
};

export const postAuthChangeEmailMutation = (
  options?: Partial<Options<PostAuthChangeEmailData>>,
): UseMutationOptions<
  PostAuthChangeEmailResponse,
  PostAuthChangeEmailError,
  Options<PostAuthChangeEmailData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthChangeEmailResponse,
    PostAuthChangeEmailError,
    Options<PostAuthChangeEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthChangeEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthChangePasswordQueryKey = (
  options: Options<PostAuthChangePasswordData>,
) => createQueryKey("postAuthChangePassword", options);

/**
 * Change the password of the user
 */
export const postAuthChangePasswordOptions = (
  options: Options<PostAuthChangePasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthChangePassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthChangePasswordQueryKey(options),
  });
};

/**
 * Change the password of the user
 */
export const postAuthChangePasswordMutation = (
  options?: Partial<Options<PostAuthChangePasswordData>>,
): UseMutationOptions<
  PostAuthChangePasswordResponse,
  PostAuthChangePasswordError,
  Options<PostAuthChangePasswordData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthChangePasswordResponse,
    PostAuthChangePasswordError,
    Options<PostAuthChangePasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthChangePassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthUpdateUserQueryKey = (
  options?: Options<PostAuthUpdateUserData>,
) => createQueryKey("postAuthUpdateUser", options);

/**
 * Update the current user
 */
export const postAuthUpdateUserOptions = (
  options?: Options<PostAuthUpdateUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthUpdateUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthUpdateUserQueryKey(options),
  });
};

/**
 * Update the current user
 */
export const postAuthUpdateUserMutation = (
  options?: Partial<Options<PostAuthUpdateUserData>>,
): UseMutationOptions<
  PostAuthUpdateUserResponse,
  PostAuthUpdateUserError,
  Options<PostAuthUpdateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthUpdateUserResponse,
    PostAuthUpdateUserError,
    Options<PostAuthUpdateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthUpdateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthDeleteUserQueryKey = (
  options: Options<PostAuthDeleteUserData>,
) => createQueryKey("postAuthDeleteUser", options);

/**
 * Delete the user
 */
export const postAuthDeleteUserOptions = (
  options: Options<PostAuthDeleteUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthDeleteUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthDeleteUserQueryKey(options),
  });
};

/**
 * Delete the user
 */
export const postAuthDeleteUserMutation = (
  options?: Partial<Options<PostAuthDeleteUserData>>,
): UseMutationOptions<
  PostAuthDeleteUserResponse,
  PostAuthDeleteUserError,
  Options<PostAuthDeleteUserData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthDeleteUserResponse,
    PostAuthDeleteUserError,
    Options<PostAuthDeleteUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthDeleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthResetPasswordByTokenQueryKey = (
  options?: Options<GetAuthResetPasswordByTokenData>,
) => createQueryKey("getAuthResetPasswordByToken", options);

/**
 * Redirects the user to the callback URL with the token
 */
export const getAuthResetPasswordByTokenOptions = (
  options?: Options<GetAuthResetPasswordByTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthResetPasswordByToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthResetPasswordByTokenQueryKey(options),
  });
};

export const postAuthRequestPasswordResetQueryKey = (
  options: Options<PostAuthRequestPasswordResetData>,
) => createQueryKey("postAuthRequestPasswordReset", options);

/**
 * Send a password reset email to the user
 */
export const postAuthRequestPasswordResetOptions = (
  options: Options<PostAuthRequestPasswordResetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthRequestPasswordReset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthRequestPasswordResetQueryKey(options),
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthRequestPasswordResetMutation = (
  options?: Partial<Options<PostAuthRequestPasswordResetData>>,
): UseMutationOptions<
  PostAuthRequestPasswordResetResponse,
  PostAuthRequestPasswordResetError,
  Options<PostAuthRequestPasswordResetData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRequestPasswordResetResponse,
    PostAuthRequestPasswordResetError,
    Options<PostAuthRequestPasswordResetData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthRequestPasswordReset({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthListSessionsQueryKey = (
  options?: Options<GetAuthListSessionsData>,
) => createQueryKey("getAuthListSessions", options);

/**
 * List all active sessions for the user
 */
export const getAuthListSessionsOptions = (
  options?: Options<GetAuthListSessionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthListSessions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthListSessionsQueryKey(options),
  });
};

export const postAuthRevokeSessionQueryKey = (
  options?: Options<PostAuthRevokeSessionData>,
) => createQueryKey("postAuthRevokeSession", options);

/**
 * Revoke a single session
 */
export const postAuthRevokeSessionOptions = (
  options?: Options<PostAuthRevokeSessionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthRevokeSession({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthRevokeSessionQueryKey(options),
  });
};

/**
 * Revoke a single session
 */
export const postAuthRevokeSessionMutation = (
  options?: Partial<Options<PostAuthRevokeSessionData>>,
): UseMutationOptions<
  PostAuthRevokeSessionResponse,
  PostAuthRevokeSessionError,
  Options<PostAuthRevokeSessionData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRevokeSessionResponse,
    PostAuthRevokeSessionError,
    Options<PostAuthRevokeSessionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthRevokeSession({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthRevokeSessionsQueryKey = (
  options?: Options<PostAuthRevokeSessionsData>,
) => createQueryKey("postAuthRevokeSessions", options);

/**
 * Revoke all sessions for the user
 */
export const postAuthRevokeSessionsOptions = (
  options?: Options<PostAuthRevokeSessionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthRevokeSessions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthRevokeSessionsQueryKey(options),
  });
};

/**
 * Revoke all sessions for the user
 */
export const postAuthRevokeSessionsMutation = (
  options?: Partial<Options<PostAuthRevokeSessionsData>>,
): UseMutationOptions<
  PostAuthRevokeSessionsResponse,
  PostAuthRevokeSessionsError,
  Options<PostAuthRevokeSessionsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRevokeSessionsResponse,
    PostAuthRevokeSessionsError,
    Options<PostAuthRevokeSessionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthRevokeSessions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthRevokeOtherSessionsQueryKey = (
  options?: Options<PostAuthRevokeOtherSessionsData>,
) => createQueryKey("postAuthRevokeOtherSessions", options);

/**
 * Revoke all other sessions for the user except the current one
 */
export const postAuthRevokeOtherSessionsOptions = (
  options?: Options<PostAuthRevokeOtherSessionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthRevokeOtherSessions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthRevokeOtherSessionsQueryKey(options),
  });
};

/**
 * Revoke all other sessions for the user except the current one
 */
export const postAuthRevokeOtherSessionsMutation = (
  options?: Partial<Options<PostAuthRevokeOtherSessionsData>>,
): UseMutationOptions<
  PostAuthRevokeOtherSessionsResponse,
  PostAuthRevokeOtherSessionsError,
  Options<PostAuthRevokeOtherSessionsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRevokeOtherSessionsResponse,
    PostAuthRevokeOtherSessionsError,
    Options<PostAuthRevokeOtherSessionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthRevokeOtherSessions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthLinkSocialQueryKey = (
  options: Options<PostAuthLinkSocialData>,
) => createQueryKey("postAuthLinkSocial", options);

/**
 * Link a social account to the user
 */
export const postAuthLinkSocialOptions = (
  options: Options<PostAuthLinkSocialData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthLinkSocial({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthLinkSocialQueryKey(options),
  });
};

/**
 * Link a social account to the user
 */
export const postAuthLinkSocialMutation = (
  options?: Partial<Options<PostAuthLinkSocialData>>,
): UseMutationOptions<
  PostAuthLinkSocialResponse,
  PostAuthLinkSocialError,
  Options<PostAuthLinkSocialData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthLinkSocialResponse,
    PostAuthLinkSocialError,
    Options<PostAuthLinkSocialData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthLinkSocial({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthListAccountsQueryKey = (
  options?: Options<GetAuthListAccountsData>,
) => createQueryKey("getAuthListAccounts", options);

/**
 * List all accounts linked to the user
 */
export const getAuthListAccountsOptions = (
  options?: Options<GetAuthListAccountsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthListAccounts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthListAccountsQueryKey(options),
  });
};

export const getAuthDeleteUserCallbackQueryKey = (
  options?: Options<GetAuthDeleteUserCallbackData>,
) => createQueryKey("getAuthDeleteUserCallback", options);

/**
 * Callback to complete user deletion with verification token
 */
export const getAuthDeleteUserCallbackOptions = (
  options?: Options<GetAuthDeleteUserCallbackData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthDeleteUserCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthDeleteUserCallbackQueryKey(options),
  });
};

export const postAuthUnlinkAccountQueryKey = (
  options: Options<PostAuthUnlinkAccountData>,
) => createQueryKey("postAuthUnlinkAccount", options);

/**
 * Unlink an account
 */
export const postAuthUnlinkAccountOptions = (
  options: Options<PostAuthUnlinkAccountData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthUnlinkAccount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthUnlinkAccountQueryKey(options),
  });
};

/**
 * Unlink an account
 */
export const postAuthUnlinkAccountMutation = (
  options?: Partial<Options<PostAuthUnlinkAccountData>>,
): UseMutationOptions<
  PostAuthUnlinkAccountResponse,
  PostAuthUnlinkAccountError,
  Options<PostAuthUnlinkAccountData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthUnlinkAccountResponse,
    PostAuthUnlinkAccountError,
    Options<PostAuthUnlinkAccountData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthUnlinkAccount({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthRefreshTokenQueryKey = (
  options: Options<PostAuthRefreshTokenData>,
) => createQueryKey("postAuthRefreshToken", options);

/**
 * Refresh the access token using a refresh token
 */
export const postAuthRefreshTokenOptions = (
  options: Options<PostAuthRefreshTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthRefreshToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthRefreshTokenQueryKey(options),
  });
};

/**
 * Refresh the access token using a refresh token
 */
export const postAuthRefreshTokenMutation = (
  options?: Partial<Options<PostAuthRefreshTokenData>>,
): UseMutationOptions<
  PostAuthRefreshTokenResponse,
  PostAuthRefreshTokenError,
  Options<PostAuthRefreshTokenData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRefreshTokenResponse,
    PostAuthRefreshTokenError,
    Options<PostAuthRefreshTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthRefreshToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthGetAccessTokenQueryKey = (
  options: Options<PostAuthGetAccessTokenData>,
) => createQueryKey("postAuthGetAccessToken", options);

/**
 * Get a valid access token, doing a refresh if needed
 */
export const postAuthGetAccessTokenOptions = (
  options: Options<PostAuthGetAccessTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthGetAccessToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthGetAccessTokenQueryKey(options),
  });
};

/**
 * Get a valid access token, doing a refresh if needed
 */
export const postAuthGetAccessTokenMutation = (
  options?: Partial<Options<PostAuthGetAccessTokenData>>,
): UseMutationOptions<
  PostAuthGetAccessTokenResponse,
  PostAuthGetAccessTokenError,
  Options<PostAuthGetAccessTokenData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthGetAccessTokenResponse,
    PostAuthGetAccessTokenError,
    Options<PostAuthGetAccessTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthGetAccessToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthAccountInfoQueryKey = (
  options: Options<PostAuthAccountInfoData>,
) => createQueryKey("postAuthAccountInfo", options);

/**
 * Get the account info provided by the provider
 */
export const postAuthAccountInfoOptions = (
  options: Options<PostAuthAccountInfoData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthAccountInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthAccountInfoQueryKey(options),
  });
};

/**
 * Get the account info provided by the provider
 */
export const postAuthAccountInfoMutation = (
  options?: Partial<Options<PostAuthAccountInfoData>>,
): UseMutationOptions<
  PostAuthAccountInfoResponse,
  PostAuthAccountInfoError,
  Options<PostAuthAccountInfoData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthAccountInfoResponse,
    PostAuthAccountInfoError,
    Options<PostAuthAccountInfoData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthAccountInfo({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthOkQueryKey = (options?: Options<GetAuthOkData>) =>
  createQueryKey("getAuthOk", options);

/**
 * Check if the API is working
 */
export const getAuthOkOptions = (options?: Options<GetAuthOkData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthOk({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthOkQueryKey(options),
  });
};

export const getAuthErrorQueryKey = (options?: Options<GetAuthErrorData>) =>
  createQueryKey("getAuthError", options);

/**
 * Displays an error page
 */
export const getAuthErrorOptions = (options?: Options<GetAuthErrorData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthError({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthErrorQueryKey(options),
  });
};
