// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getClient,
  postClient,
  deleteClientById,
  getClientById,
  patchClientById,
  getProject,
  postProject,
  deleteProjectById,
  getProjectById,
  patchProjectById,
  getTimeEntryActive,
  getTimeEntryById,
  patchTimeEntryById,
  postTimeEntry,
  getStatus,
  socialSignIn,
  getAuthApiGetSession,
  postAuthApiSignOut,
  postAuthApiSignUpEmail,
  postAuthApiSignInEmail,
  postAuthApiForgetPassword,
  postAuthApiResetPassword,
  getAuthApiVerifyEmail,
  postAuthApiSendVerificationEmail,
  postAuthApiChangeEmail,
  postAuthApiChangePassword,
  postAuthApiUpdateUser,
  postAuthApiDeleteUser,
  getAuthApiResetPasswordByToken,
  postAuthApiRequestPasswordReset,
  getAuthApiListSessions,
  postAuthApiRevokeSession,
  postAuthApiRevokeSessions,
  postAuthApiRevokeOtherSessions,
  postAuthApiLinkSocial,
  getAuthApiListAccounts,
  getAuthApiDeleteUserCallback,
  postAuthApiUnlinkAccount,
  postAuthApiRefreshToken,
  postAuthApiGetAccessToken,
  postAuthApiAccountInfo,
  getAuthApiOk,
  getAuthApiError,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  GetClientData,
  PostClientData,
  DeleteClientByIdData,
  GetClientByIdData,
  PatchClientByIdData,
  GetProjectData,
  PostProjectData,
  DeleteProjectByIdData,
  GetProjectByIdData,
  PatchProjectByIdData,
  GetTimeEntryActiveData,
  GetTimeEntryByIdData,
  PatchTimeEntryByIdData,
  PostTimeEntryData,
  GetStatusData,
  SocialSignInData,
  SocialSignInError,
  SocialSignInResponse,
  GetAuthApiGetSessionData,
  PostAuthApiSignOutData,
  PostAuthApiSignOutError,
  PostAuthApiSignOutResponse,
  PostAuthApiSignUpEmailData,
  PostAuthApiSignUpEmailError,
  PostAuthApiSignUpEmailResponse,
  PostAuthApiSignInEmailData,
  PostAuthApiSignInEmailError,
  PostAuthApiSignInEmailResponse,
  PostAuthApiForgetPasswordData,
  PostAuthApiForgetPasswordError,
  PostAuthApiForgetPasswordResponse,
  PostAuthApiResetPasswordData,
  PostAuthApiResetPasswordError,
  PostAuthApiResetPasswordResponse,
  GetAuthApiVerifyEmailData,
  PostAuthApiSendVerificationEmailData,
  PostAuthApiSendVerificationEmailError,
  PostAuthApiSendVerificationEmailResponse,
  PostAuthApiChangeEmailData,
  PostAuthApiChangeEmailError,
  PostAuthApiChangeEmailResponse,
  PostAuthApiChangePasswordData,
  PostAuthApiChangePasswordError,
  PostAuthApiChangePasswordResponse,
  PostAuthApiUpdateUserData,
  PostAuthApiUpdateUserError,
  PostAuthApiUpdateUserResponse,
  PostAuthApiDeleteUserData,
  PostAuthApiDeleteUserError,
  PostAuthApiDeleteUserResponse,
  GetAuthApiResetPasswordByTokenData,
  PostAuthApiRequestPasswordResetData,
  PostAuthApiRequestPasswordResetError,
  PostAuthApiRequestPasswordResetResponse,
  GetAuthApiListSessionsData,
  PostAuthApiRevokeSessionData,
  PostAuthApiRevokeSessionError,
  PostAuthApiRevokeSessionResponse,
  PostAuthApiRevokeSessionsData,
  PostAuthApiRevokeSessionsError,
  PostAuthApiRevokeSessionsResponse,
  PostAuthApiRevokeOtherSessionsData,
  PostAuthApiRevokeOtherSessionsError,
  PostAuthApiRevokeOtherSessionsResponse,
  PostAuthApiLinkSocialData,
  PostAuthApiLinkSocialError,
  PostAuthApiLinkSocialResponse,
  GetAuthApiListAccountsData,
  GetAuthApiDeleteUserCallbackData,
  PostAuthApiUnlinkAccountData,
  PostAuthApiUnlinkAccountError,
  PostAuthApiUnlinkAccountResponse,
  PostAuthApiRefreshTokenData,
  PostAuthApiRefreshTokenError,
  PostAuthApiRefreshTokenResponse,
  PostAuthApiGetAccessTokenData,
  PostAuthApiGetAccessTokenError,
  PostAuthApiGetAccessTokenResponse,
  PostAuthApiAccountInfoData,
  PostAuthApiAccountInfoError,
  PostAuthApiAccountInfoResponse,
  GetAuthApiOkData,
  GetAuthApiErrorData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getClientQueryKey = (options?: Options<GetClientData>) =>
  createQueryKey("getClient", options);

/**
 * Get all user-defined clients
 */
export const getClientOptions = (options?: Options<GetClientData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClient({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getClientQueryKey(options),
  });
};

export const postClientQueryKey = (options: Options<PostClientData>) =>
  createQueryKey("postClient", options);

/**
 * Create new user-defined client
 */
export const postClientOptions = (options: Options<PostClientData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postClient({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postClientQueryKey(options),
  });
};

/**
 * Create new user-defined client
 */
export const postClientMutation = (
  options?: Partial<Options<PostClientData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostClientData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostClientData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postClient({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete user-defined client, all projects containing this client will be unset
 */
export const deleteClientByIdMutation = (
  options?: Partial<Options<DeleteClientByIdData>>,
): UseMutationOptions<unknown, DefaultError, Options<DeleteClientByIdData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteClientByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteClientById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getClientByIdQueryKey = (options: Options<GetClientByIdData>) =>
  createQueryKey("getClientById", options);

/**
 * Get user-defined client by ID
 */
export const getClientByIdOptions = (options: Options<GetClientByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getClientById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getClientByIdQueryKey(options),
  });
};

/**
 * Update user-defined client data
 */
export const patchClientByIdMutation = (
  options?: Partial<Options<PatchClientByIdData>>,
): UseMutationOptions<unknown, DefaultError, Options<PatchClientByIdData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PatchClientByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchClientById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProjectQueryKey = (options?: Options<GetProjectData>) =>
  createQueryKey("getProject", options);

/**
 * Get all user projects
 */
export const getProjectOptions = (options?: Options<GetProjectData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProject({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProjectQueryKey(options),
  });
};

export const postProjectQueryKey = (options: Options<PostProjectData>) =>
  createQueryKey("postProject", options);

/**
 * Create new user project
 */
export const postProjectOptions = (options: Options<PostProjectData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postProject({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postProjectQueryKey(options),
  });
};

/**
 * Create new user project
 */
export const postProjectMutation = (
  options?: Partial<Options<PostProjectData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostProjectData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostProjectData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postProject({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete user project, all time entries will be removed
 */
export const deleteProjectByIdMutation = (
  options?: Partial<Options<DeleteProjectByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteProjectByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteProjectByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteProjectById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProjectByIdQueryKey = (options: Options<GetProjectByIdData>) =>
  createQueryKey("getProjectById", options);

/**
 * Get user project by ID
 */
export const getProjectByIdOptions = (options: Options<GetProjectByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProjectById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProjectByIdQueryKey(options),
  });
};

/**
 * Update user project data
 */
export const patchProjectByIdMutation = (
  options?: Partial<Options<PatchProjectByIdData>>,
): UseMutationOptions<unknown, DefaultError, Options<PatchProjectByIdData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PatchProjectByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchProjectById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getTimeEntryActiveQueryKey = (
  options?: Options<GetTimeEntryActiveData>,
) => createQueryKey("getTimeEntryActive", options);

/**
 * Test description
 */
export const getTimeEntryActiveOptions = (
  options?: Options<GetTimeEntryActiveData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTimeEntryActive({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTimeEntryActiveQueryKey(options),
  });
};

export const getTimeEntryByIdQueryKey = (
  options: Options<GetTimeEntryByIdData>,
) => createQueryKey("getTimeEntryById", options);

/**
 * Return time entry by ID
 */
export const getTimeEntryByIdOptions = (
  options: Options<GetTimeEntryByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTimeEntryById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTimeEntryByIdQueryKey(options),
  });
};

/**
 * Update existing time entry
 */
export const patchTimeEntryByIdMutation = (
  options?: Partial<Options<PatchTimeEntryByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PatchTimeEntryByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PatchTimeEntryByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchTimeEntryById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postTimeEntryQueryKey = (options: Options<PostTimeEntryData>) =>
  createQueryKey("postTimeEntry", options);

/**
 * Create new time entry
 */
export const postTimeEntryOptions = (options: Options<PostTimeEntryData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postTimeEntry({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postTimeEntryQueryKey(options),
  });
};

/**
 * Create new time entry
 */
export const postTimeEntryMutation = (
  options?: Partial<Options<PostTimeEntryData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostTimeEntryData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostTimeEntryData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postTimeEntry({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getStatusQueryKey = (options?: Options<GetStatusData>) =>
  createQueryKey("getStatus", options);

export const getStatusOptions = (options?: Options<GetStatusData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getStatusQueryKey(options),
  });
};

export const socialSignInQueryKey = (options: Options<SocialSignInData>) =>
  createQueryKey("socialSignIn", options);

/**
 * Sign in with a social provider
 */
export const socialSignInOptions = (options: Options<SocialSignInData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await socialSignIn({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: socialSignInQueryKey(options),
  });
};

/**
 * Sign in with a social provider
 */
export const socialSignInMutation = (
  options?: Partial<Options<SocialSignInData>>,
): UseMutationOptions<
  SocialSignInResponse,
  SocialSignInError,
  Options<SocialSignInData>
> => {
  const mutationOptions: UseMutationOptions<
    SocialSignInResponse,
    SocialSignInError,
    Options<SocialSignInData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await socialSignIn({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthApiGetSessionQueryKey = (
  options?: Options<GetAuthApiGetSessionData>,
) => createQueryKey("getAuthApiGetSession", options);

/**
 * Get the current session
 */
export const getAuthApiGetSessionOptions = (
  options?: Options<GetAuthApiGetSessionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthApiGetSession({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthApiGetSessionQueryKey(options),
  });
};

export const postAuthApiSignOutQueryKey = (
  options?: Options<PostAuthApiSignOutData>,
) => createQueryKey("postAuthApiSignOut", options);

/**
 * Sign out the current user
 */
export const postAuthApiSignOutOptions = (
  options?: Options<PostAuthApiSignOutData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiSignOut({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiSignOutQueryKey(options),
  });
};

/**
 * Sign out the current user
 */
export const postAuthApiSignOutMutation = (
  options?: Partial<Options<PostAuthApiSignOutData>>,
): UseMutationOptions<
  PostAuthApiSignOutResponse,
  PostAuthApiSignOutError,
  Options<PostAuthApiSignOutData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiSignOutResponse,
    PostAuthApiSignOutError,
    Options<PostAuthApiSignOutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiSignOut({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiSignUpEmailQueryKey = (
  options?: Options<PostAuthApiSignUpEmailData>,
) => createQueryKey("postAuthApiSignUpEmail", options);

/**
 * Sign up a user using email and password
 */
export const postAuthApiSignUpEmailOptions = (
  options?: Options<PostAuthApiSignUpEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiSignUpEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiSignUpEmailQueryKey(options),
  });
};

/**
 * Sign up a user using email and password
 */
export const postAuthApiSignUpEmailMutation = (
  options?: Partial<Options<PostAuthApiSignUpEmailData>>,
): UseMutationOptions<
  PostAuthApiSignUpEmailResponse,
  PostAuthApiSignUpEmailError,
  Options<PostAuthApiSignUpEmailData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiSignUpEmailResponse,
    PostAuthApiSignUpEmailError,
    Options<PostAuthApiSignUpEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiSignUpEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiSignInEmailQueryKey = (
  options: Options<PostAuthApiSignInEmailData>,
) => createQueryKey("postAuthApiSignInEmail", options);

/**
 * Sign in with email and password
 */
export const postAuthApiSignInEmailOptions = (
  options: Options<PostAuthApiSignInEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiSignInEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiSignInEmailQueryKey(options),
  });
};

/**
 * Sign in with email and password
 */
export const postAuthApiSignInEmailMutation = (
  options?: Partial<Options<PostAuthApiSignInEmailData>>,
): UseMutationOptions<
  PostAuthApiSignInEmailResponse,
  PostAuthApiSignInEmailError,
  Options<PostAuthApiSignInEmailData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiSignInEmailResponse,
    PostAuthApiSignInEmailError,
    Options<PostAuthApiSignInEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiSignInEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiForgetPasswordQueryKey = (
  options: Options<PostAuthApiForgetPasswordData>,
) => createQueryKey("postAuthApiForgetPassword", options);

/**
 * Send a password reset email to the user
 */
export const postAuthApiForgetPasswordOptions = (
  options: Options<PostAuthApiForgetPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiForgetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiForgetPasswordQueryKey(options),
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthApiForgetPasswordMutation = (
  options?: Partial<Options<PostAuthApiForgetPasswordData>>,
): UseMutationOptions<
  PostAuthApiForgetPasswordResponse,
  PostAuthApiForgetPasswordError,
  Options<PostAuthApiForgetPasswordData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiForgetPasswordResponse,
    PostAuthApiForgetPasswordError,
    Options<PostAuthApiForgetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiForgetPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiResetPasswordQueryKey = (
  options: Options<PostAuthApiResetPasswordData>,
) => createQueryKey("postAuthApiResetPassword", options);

/**
 * Reset the password for a user
 */
export const postAuthApiResetPasswordOptions = (
  options: Options<PostAuthApiResetPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiResetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiResetPasswordQueryKey(options),
  });
};

/**
 * Reset the password for a user
 */
export const postAuthApiResetPasswordMutation = (
  options?: Partial<Options<PostAuthApiResetPasswordData>>,
): UseMutationOptions<
  PostAuthApiResetPasswordResponse,
  PostAuthApiResetPasswordError,
  Options<PostAuthApiResetPasswordData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiResetPasswordResponse,
    PostAuthApiResetPasswordError,
    Options<PostAuthApiResetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiResetPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthApiVerifyEmailQueryKey = (
  options: Options<GetAuthApiVerifyEmailData>,
) => createQueryKey("getAuthApiVerifyEmail", options);

/**
 * Verify the email of the user
 */
export const getAuthApiVerifyEmailOptions = (
  options: Options<GetAuthApiVerifyEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthApiVerifyEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthApiVerifyEmailQueryKey(options),
  });
};

export const postAuthApiSendVerificationEmailQueryKey = (
  options?: Options<PostAuthApiSendVerificationEmailData>,
) => createQueryKey("postAuthApiSendVerificationEmail", options);

/**
 * Send a verification email to the user
 */
export const postAuthApiSendVerificationEmailOptions = (
  options?: Options<PostAuthApiSendVerificationEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiSendVerificationEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiSendVerificationEmailQueryKey(options),
  });
};

/**
 * Send a verification email to the user
 */
export const postAuthApiSendVerificationEmailMutation = (
  options?: Partial<Options<PostAuthApiSendVerificationEmailData>>,
): UseMutationOptions<
  PostAuthApiSendVerificationEmailResponse,
  PostAuthApiSendVerificationEmailError,
  Options<PostAuthApiSendVerificationEmailData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiSendVerificationEmailResponse,
    PostAuthApiSendVerificationEmailError,
    Options<PostAuthApiSendVerificationEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiSendVerificationEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiChangeEmailQueryKey = (
  options: Options<PostAuthApiChangeEmailData>,
) => createQueryKey("postAuthApiChangeEmail", options);

export const postAuthApiChangeEmailOptions = (
  options: Options<PostAuthApiChangeEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiChangeEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiChangeEmailQueryKey(options),
  });
};

export const postAuthApiChangeEmailMutation = (
  options?: Partial<Options<PostAuthApiChangeEmailData>>,
): UseMutationOptions<
  PostAuthApiChangeEmailResponse,
  PostAuthApiChangeEmailError,
  Options<PostAuthApiChangeEmailData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiChangeEmailResponse,
    PostAuthApiChangeEmailError,
    Options<PostAuthApiChangeEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiChangeEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiChangePasswordQueryKey = (
  options: Options<PostAuthApiChangePasswordData>,
) => createQueryKey("postAuthApiChangePassword", options);

/**
 * Change the password of the user
 */
export const postAuthApiChangePasswordOptions = (
  options: Options<PostAuthApiChangePasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiChangePassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiChangePasswordQueryKey(options),
  });
};

/**
 * Change the password of the user
 */
export const postAuthApiChangePasswordMutation = (
  options?: Partial<Options<PostAuthApiChangePasswordData>>,
): UseMutationOptions<
  PostAuthApiChangePasswordResponse,
  PostAuthApiChangePasswordError,
  Options<PostAuthApiChangePasswordData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiChangePasswordResponse,
    PostAuthApiChangePasswordError,
    Options<PostAuthApiChangePasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiChangePassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiUpdateUserQueryKey = (
  options?: Options<PostAuthApiUpdateUserData>,
) => createQueryKey("postAuthApiUpdateUser", options);

/**
 * Update the current user
 */
export const postAuthApiUpdateUserOptions = (
  options?: Options<PostAuthApiUpdateUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiUpdateUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiUpdateUserQueryKey(options),
  });
};

/**
 * Update the current user
 */
export const postAuthApiUpdateUserMutation = (
  options?: Partial<Options<PostAuthApiUpdateUserData>>,
): UseMutationOptions<
  PostAuthApiUpdateUserResponse,
  PostAuthApiUpdateUserError,
  Options<PostAuthApiUpdateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiUpdateUserResponse,
    PostAuthApiUpdateUserError,
    Options<PostAuthApiUpdateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiUpdateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiDeleteUserQueryKey = (
  options: Options<PostAuthApiDeleteUserData>,
) => createQueryKey("postAuthApiDeleteUser", options);

/**
 * Delete the user
 */
export const postAuthApiDeleteUserOptions = (
  options: Options<PostAuthApiDeleteUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiDeleteUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiDeleteUserQueryKey(options),
  });
};

/**
 * Delete the user
 */
export const postAuthApiDeleteUserMutation = (
  options?: Partial<Options<PostAuthApiDeleteUserData>>,
): UseMutationOptions<
  PostAuthApiDeleteUserResponse,
  PostAuthApiDeleteUserError,
  Options<PostAuthApiDeleteUserData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiDeleteUserResponse,
    PostAuthApiDeleteUserError,
    Options<PostAuthApiDeleteUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiDeleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthApiResetPasswordByTokenQueryKey = (
  options?: Options<GetAuthApiResetPasswordByTokenData>,
) => createQueryKey("getAuthApiResetPasswordByToken", options);

/**
 * Redirects the user to the callback URL with the token
 */
export const getAuthApiResetPasswordByTokenOptions = (
  options?: Options<GetAuthApiResetPasswordByTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthApiResetPasswordByToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthApiResetPasswordByTokenQueryKey(options),
  });
};

export const postAuthApiRequestPasswordResetQueryKey = (
  options: Options<PostAuthApiRequestPasswordResetData>,
) => createQueryKey("postAuthApiRequestPasswordReset", options);

/**
 * Send a password reset email to the user
 */
export const postAuthApiRequestPasswordResetOptions = (
  options: Options<PostAuthApiRequestPasswordResetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiRequestPasswordReset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiRequestPasswordResetQueryKey(options),
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthApiRequestPasswordResetMutation = (
  options?: Partial<Options<PostAuthApiRequestPasswordResetData>>,
): UseMutationOptions<
  PostAuthApiRequestPasswordResetResponse,
  PostAuthApiRequestPasswordResetError,
  Options<PostAuthApiRequestPasswordResetData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiRequestPasswordResetResponse,
    PostAuthApiRequestPasswordResetError,
    Options<PostAuthApiRequestPasswordResetData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiRequestPasswordReset({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthApiListSessionsQueryKey = (
  options?: Options<GetAuthApiListSessionsData>,
) => createQueryKey("getAuthApiListSessions", options);

/**
 * List all active sessions for the user
 */
export const getAuthApiListSessionsOptions = (
  options?: Options<GetAuthApiListSessionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthApiListSessions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthApiListSessionsQueryKey(options),
  });
};

export const postAuthApiRevokeSessionQueryKey = (
  options?: Options<PostAuthApiRevokeSessionData>,
) => createQueryKey("postAuthApiRevokeSession", options);

/**
 * Revoke a single session
 */
export const postAuthApiRevokeSessionOptions = (
  options?: Options<PostAuthApiRevokeSessionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiRevokeSession({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiRevokeSessionQueryKey(options),
  });
};

/**
 * Revoke a single session
 */
export const postAuthApiRevokeSessionMutation = (
  options?: Partial<Options<PostAuthApiRevokeSessionData>>,
): UseMutationOptions<
  PostAuthApiRevokeSessionResponse,
  PostAuthApiRevokeSessionError,
  Options<PostAuthApiRevokeSessionData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiRevokeSessionResponse,
    PostAuthApiRevokeSessionError,
    Options<PostAuthApiRevokeSessionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiRevokeSession({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiRevokeSessionsQueryKey = (
  options?: Options<PostAuthApiRevokeSessionsData>,
) => createQueryKey("postAuthApiRevokeSessions", options);

/**
 * Revoke all sessions for the user
 */
export const postAuthApiRevokeSessionsOptions = (
  options?: Options<PostAuthApiRevokeSessionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiRevokeSessions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiRevokeSessionsQueryKey(options),
  });
};

/**
 * Revoke all sessions for the user
 */
export const postAuthApiRevokeSessionsMutation = (
  options?: Partial<Options<PostAuthApiRevokeSessionsData>>,
): UseMutationOptions<
  PostAuthApiRevokeSessionsResponse,
  PostAuthApiRevokeSessionsError,
  Options<PostAuthApiRevokeSessionsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiRevokeSessionsResponse,
    PostAuthApiRevokeSessionsError,
    Options<PostAuthApiRevokeSessionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiRevokeSessions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiRevokeOtherSessionsQueryKey = (
  options?: Options<PostAuthApiRevokeOtherSessionsData>,
) => createQueryKey("postAuthApiRevokeOtherSessions", options);

/**
 * Revoke all other sessions for the user except the current one
 */
export const postAuthApiRevokeOtherSessionsOptions = (
  options?: Options<PostAuthApiRevokeOtherSessionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiRevokeOtherSessions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiRevokeOtherSessionsQueryKey(options),
  });
};

/**
 * Revoke all other sessions for the user except the current one
 */
export const postAuthApiRevokeOtherSessionsMutation = (
  options?: Partial<Options<PostAuthApiRevokeOtherSessionsData>>,
): UseMutationOptions<
  PostAuthApiRevokeOtherSessionsResponse,
  PostAuthApiRevokeOtherSessionsError,
  Options<PostAuthApiRevokeOtherSessionsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiRevokeOtherSessionsResponse,
    PostAuthApiRevokeOtherSessionsError,
    Options<PostAuthApiRevokeOtherSessionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiRevokeOtherSessions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiLinkSocialQueryKey = (
  options: Options<PostAuthApiLinkSocialData>,
) => createQueryKey("postAuthApiLinkSocial", options);

/**
 * Link a social account to the user
 */
export const postAuthApiLinkSocialOptions = (
  options: Options<PostAuthApiLinkSocialData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiLinkSocial({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiLinkSocialQueryKey(options),
  });
};

/**
 * Link a social account to the user
 */
export const postAuthApiLinkSocialMutation = (
  options?: Partial<Options<PostAuthApiLinkSocialData>>,
): UseMutationOptions<
  PostAuthApiLinkSocialResponse,
  PostAuthApiLinkSocialError,
  Options<PostAuthApiLinkSocialData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiLinkSocialResponse,
    PostAuthApiLinkSocialError,
    Options<PostAuthApiLinkSocialData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiLinkSocial({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthApiListAccountsQueryKey = (
  options?: Options<GetAuthApiListAccountsData>,
) => createQueryKey("getAuthApiListAccounts", options);

/**
 * List all accounts linked to the user
 */
export const getAuthApiListAccountsOptions = (
  options?: Options<GetAuthApiListAccountsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthApiListAccounts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthApiListAccountsQueryKey(options),
  });
};

export const getAuthApiDeleteUserCallbackQueryKey = (
  options?: Options<GetAuthApiDeleteUserCallbackData>,
) => createQueryKey("getAuthApiDeleteUserCallback", options);

/**
 * Callback to complete user deletion with verification token
 */
export const getAuthApiDeleteUserCallbackOptions = (
  options?: Options<GetAuthApiDeleteUserCallbackData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthApiDeleteUserCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthApiDeleteUserCallbackQueryKey(options),
  });
};

export const postAuthApiUnlinkAccountQueryKey = (
  options: Options<PostAuthApiUnlinkAccountData>,
) => createQueryKey("postAuthApiUnlinkAccount", options);

/**
 * Unlink an account
 */
export const postAuthApiUnlinkAccountOptions = (
  options: Options<PostAuthApiUnlinkAccountData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiUnlinkAccount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiUnlinkAccountQueryKey(options),
  });
};

/**
 * Unlink an account
 */
export const postAuthApiUnlinkAccountMutation = (
  options?: Partial<Options<PostAuthApiUnlinkAccountData>>,
): UseMutationOptions<
  PostAuthApiUnlinkAccountResponse,
  PostAuthApiUnlinkAccountError,
  Options<PostAuthApiUnlinkAccountData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiUnlinkAccountResponse,
    PostAuthApiUnlinkAccountError,
    Options<PostAuthApiUnlinkAccountData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiUnlinkAccount({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiRefreshTokenQueryKey = (
  options: Options<PostAuthApiRefreshTokenData>,
) => createQueryKey("postAuthApiRefreshToken", options);

/**
 * Refresh the access token using a refresh token
 */
export const postAuthApiRefreshTokenOptions = (
  options: Options<PostAuthApiRefreshTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiRefreshToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiRefreshTokenQueryKey(options),
  });
};

/**
 * Refresh the access token using a refresh token
 */
export const postAuthApiRefreshTokenMutation = (
  options?: Partial<Options<PostAuthApiRefreshTokenData>>,
): UseMutationOptions<
  PostAuthApiRefreshTokenResponse,
  PostAuthApiRefreshTokenError,
  Options<PostAuthApiRefreshTokenData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiRefreshTokenResponse,
    PostAuthApiRefreshTokenError,
    Options<PostAuthApiRefreshTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiRefreshToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiGetAccessTokenQueryKey = (
  options: Options<PostAuthApiGetAccessTokenData>,
) => createQueryKey("postAuthApiGetAccessToken", options);

/**
 * Get a valid access token, doing a refresh if needed
 */
export const postAuthApiGetAccessTokenOptions = (
  options: Options<PostAuthApiGetAccessTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiGetAccessToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiGetAccessTokenQueryKey(options),
  });
};

/**
 * Get a valid access token, doing a refresh if needed
 */
export const postAuthApiGetAccessTokenMutation = (
  options?: Partial<Options<PostAuthApiGetAccessTokenData>>,
): UseMutationOptions<
  PostAuthApiGetAccessTokenResponse,
  PostAuthApiGetAccessTokenError,
  Options<PostAuthApiGetAccessTokenData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiGetAccessTokenResponse,
    PostAuthApiGetAccessTokenError,
    Options<PostAuthApiGetAccessTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiGetAccessToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthApiAccountInfoQueryKey = (
  options: Options<PostAuthApiAccountInfoData>,
) => createQueryKey("postAuthApiAccountInfo", options);

/**
 * Get the account info provided by the provider
 */
export const postAuthApiAccountInfoOptions = (
  options: Options<PostAuthApiAccountInfoData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthApiAccountInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthApiAccountInfoQueryKey(options),
  });
};

/**
 * Get the account info provided by the provider
 */
export const postAuthApiAccountInfoMutation = (
  options?: Partial<Options<PostAuthApiAccountInfoData>>,
): UseMutationOptions<
  PostAuthApiAccountInfoResponse,
  PostAuthApiAccountInfoError,
  Options<PostAuthApiAccountInfoData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthApiAccountInfoResponse,
    PostAuthApiAccountInfoError,
    Options<PostAuthApiAccountInfoData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthApiAccountInfo({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthApiOkQueryKey = (options?: Options<GetAuthApiOkData>) =>
  createQueryKey("getAuthApiOk", options);

/**
 * Check if the API is working
 */
export const getAuthApiOkOptions = (options?: Options<GetAuthApiOkData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthApiOk({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthApiOkQueryKey(options),
  });
};

export const getAuthApiErrorQueryKey = (
  options?: Options<GetAuthApiErrorData>,
) => createQueryKey("getAuthApiError", options);

/**
 * Displays an error page
 */
export const getAuthApiErrorOptions = (
  options?: Options<GetAuthApiErrorData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthApiError({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthApiErrorQueryKey(options),
  });
};
