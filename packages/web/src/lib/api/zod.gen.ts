// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zUser = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  emailVerified: z.boolean().optional(),
  image: z.string().optional(),
  createdAt: z.unknown().optional(),
  updatedAt: z.unknown().optional(),
});

export const zSession = z.object({
  id: z.string().optional(),
  expiresAt: z.unknown().optional(),
  token: z.string().optional(),
  createdAt: z.unknown().optional(),
  updatedAt: z.unknown().optional(),
  ipAddress: z.string().optional(),
  userAgent: z.string().optional(),
  userId: z.string().optional(),
});

export const zAccount = z.object({
  id: z.string().optional(),
  accountId: z.string().optional(),
  providerId: z.string().optional(),
  userId: z.string().optional(),
  accessToken: z.string().optional(),
  refreshToken: z.string().optional(),
  idToken: z.string().optional(),
  accessTokenExpiresAt: z.unknown().optional(),
  refreshTokenExpiresAt: z.unknown().optional(),
  scope: z.string().optional(),
  password: z.string().optional(),
  createdAt: z.unknown().optional(),
  updatedAt: z.unknown().optional(),
});

export const zVerification = z.object({
  id: z.string().optional(),
  identifier: z.string().optional(),
  value: z.string().optional(),
  expiresAt: z.unknown().optional(),
  createdAt: z.unknown().optional(),
  updatedAt: z.unknown().optional(),
});

export const zPostV1ClientData = z.object({
  name: z.string(),
});

export const zDeleteV1ClientByIdParameterId = z.number();

export const zGetV1ClientByIdParameterId = z.number();

export const zPatchV1ClientByIdData = z.object({
  name: z.string().optional(),
});

export const zPatchV1ClientByIdParameterId = z.number();

export const zPostV1ProjectData = z.object({
  title: z.string(),
  clientId: z.number(),
});

export const zDeleteV1ProjectByIdParameterId = z.number();

export const zGetV1ProjectByIdParameterId = z.number();

export const zPatchV1ProjectByIdData = z.object({
  title: z.string().optional(),
  clientId: z.number().optional(),
});

export const zPatchV1ProjectByIdParameterId = z.number();

export const zGetV1TimeEntryByIdParameterId = z.number();

export const zPatchV1TimeEntryByIdData = z.object({
  title: z.string().optional(),
  userId: z.string().optional(),
  projectId: z.union([z.number(), z.unknown()]).optional(),
  startAt: z.union([z.unknown(), z.string().datetime(), z.number()]).optional(),
  endAt: z
    .union([
      z.union([z.unknown(), z.string().datetime(), z.number()]),
      z.unknown(),
    ])
    .optional(),
  createdAt: z.unknown().optional(),
});

export const zPatchV1TimeEntryByIdParameterId = z.number();

export const zPostV1TimeEntryData = z.object({
  title: z.string(),
  userId: z.string(),
  projectId: z.union([z.number(), z.unknown()]),
  startAt: z.union([z.unknown(), z.string().datetime(), z.number()]),
  endAt: z.union([
    z.union([z.unknown(), z.string().datetime(), z.number()]),
    z.unknown(),
  ]),
  createdAt: z.unknown().optional(),
});

export const zSocialSignInData = z.object({
  callbackURL: z.string().optional(),
  newUserCallbackURL: z.string().optional(),
  errorCallbackURL: z.string().optional(),
  provider: z.string(),
  disableRedirect: z.string().optional(),
  idToken: z.string().optional(),
  scopes: z.string().optional(),
  requestSignUp: z.string().optional(),
  loginHint: z.string().optional(),
});

/**
 * Session response when idToken is provided
 */
export const zSocialSignInResponse = z.object({
  redirect: z.unknown(),
  token: z.string(),
});

/**
 * Success
 */
export const zGetAuthApiGetSessionResponse = z.object({
  session: zSession,
  user: zUser,
});

export const zPostAuthApiSignOutData = z.object({});

/**
 * Success
 */
export const zPostAuthApiSignOutResponse = z.object({
  success: z.boolean().optional(),
});

export const zPostAuthApiSignUpEmailData = z.object({
  name: z.string(),
  email: z.string(),
  password: z.string(),
  callbackURL: z.string().optional(),
});

/**
 * Successfully created user
 */
export const zPostAuthApiSignUpEmailResponse = z.object({
  token: z.union([z.string(), z.null()]).optional(),
  user: z.object({
    id: z.string(),
    email: z.string().email(),
    name: z.string(),
    image: z.union([z.string().url(), z.null()]).optional(),
    emailVerified: z.boolean(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
  }),
});

export const zPostAuthApiSignInEmailData = z.object({
  email: z.string(),
  password: z.string(),
  callbackURL: z.string().optional(),
  rememberMe: z.string().optional(),
});

/**
 * Session response when idToken is provided
 */
export const zPostAuthApiSignInEmailResponse = z.object({
  redirect: z.unknown(),
  token: z.string(),
  url: z.union([z.unknown(), z.null()]).optional(),
  user: z.object({
    id: z.string(),
    email: z.string(),
    name: z.union([z.string(), z.null()]).optional(),
    image: z.union([z.string(), z.null()]).optional(),
    emailVerified: z.boolean(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
  }),
});

export const zPostAuthApiForgetPasswordData = z.object({
  email: z.string(),
  redirectTo: z.string().optional(),
});

/**
 * Success
 */
export const zPostAuthApiForgetPasswordResponse = z.object({
  status: z.boolean().optional(),
  message: z.string().optional(),
});

export const zPostAuthApiResetPasswordData = z.object({
  newPassword: z.string(),
  token: z.string().optional(),
});

/**
 * Success
 */
export const zPostAuthApiResetPasswordResponse = z.object({
  status: z.boolean().optional(),
});

/**
 * The token to verify the email
 */
export const zGetAuthApiVerifyEmailParameterToken = z.string();

/**
 * The URL to redirect to after email verification
 */
export const zGetAuthApiVerifyEmailParameterCallbackUrl = z.string();

/**
 * Success
 */
export const zGetAuthApiVerifyEmailResponse = z.object({
  user: z.object({
    id: z.string(),
    email: z.string(),
    name: z.string(),
    image: z.string(),
    emailVerified: z.boolean(),
    createdAt: z.string(),
    updatedAt: z.string(),
  }),
  status: z.boolean(),
});

export const zPostAuthApiSendVerificationEmailData = z.object({
  email: z.string(),
  callbackURL: z.union([z.string(), z.null()]).optional(),
});

/**
 * Success
 */
export const zPostAuthApiSendVerificationEmailResponse = z.object({
  status: z.boolean().optional(),
});

export const zPostAuthApiChangeEmailData = z.object({
  newEmail: z.string(),
  callbackURL: z.string().optional(),
});

/**
 * Email change request processed successfully
 */
export const zPostAuthApiChangeEmailResponse = z.object({
  status: z.boolean(),
  message: z.enum(["Email updated", "Verification email sent"]).optional(),
});

export const zPostAuthApiChangePasswordData = z.object({
  newPassword: z.string(),
  currentPassword: z.string(),
  revokeOtherSessions: z.string().optional(),
});

/**
 * Password successfully changed
 */
export const zPostAuthApiChangePasswordResponse = z.object({
  token: z.union([z.string(), z.null()]).optional(),
  user: z.object({
    id: z.string(),
    email: z.string().email(),
    name: z.string(),
    image: z.union([z.string().url(), z.null()]).optional(),
    emailVerified: z.boolean(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
  }),
});

export const zPostAuthApiUpdateUserData = z.object({
  name: z.string().optional(),
  image: z.string().optional(),
});

/**
 * Success
 */
export const zPostAuthApiUpdateUserResponse = z.object({
  status: z.boolean().optional(),
});

export const zPostAuthApiDeleteUserData = z.object({
  callbackURL: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
});

/**
 * User deletion processed successfully
 */
export const zPostAuthApiDeleteUserResponse = z.object({
  success: z.boolean(),
  message: z.enum(["User deleted", "Verification email sent"]),
});

/**
 * The URL to redirect the user to reset their password
 */
export const zGetAuthApiResetPasswordByTokenParameterCallbackUrl = z.string();

/**
 * Success
 */
export const zGetAuthApiResetPasswordByTokenResponse = z.object({
  token: z.string().optional(),
});

export const zPostAuthApiRequestPasswordResetData = z.object({
  email: z.string(),
  redirectTo: z.string().optional(),
});

/**
 * Success
 */
export const zPostAuthApiRequestPasswordResetResponse = z.object({
  status: z.boolean().optional(),
  message: z.string().optional(),
});

/**
 * Success
 */
export const zGetAuthApiListSessionsResponse = z.array(zSession);

export const zPostAuthApiRevokeSessionData = z.object({
  token: z.string(),
});

/**
 * Success
 */
export const zPostAuthApiRevokeSessionResponse = z.object({
  status: z.boolean(),
});

export const zPostAuthApiRevokeSessionsData = z.object({});

/**
 * Success
 */
export const zPostAuthApiRevokeSessionsResponse = z.object({
  status: z.boolean(),
});

export const zPostAuthApiRevokeOtherSessionsData = z.object({});

/**
 * Success
 */
export const zPostAuthApiRevokeOtherSessionsResponse = z.object({
  status: z.boolean(),
});

export const zPostAuthApiLinkSocialData = z.object({
  callbackURL: z.string().optional(),
  provider: z.string(),
  scopes: z.string().optional(),
  errorCallbackURL: z.string().optional(),
});

/**
 * Success
 */
export const zPostAuthApiLinkSocialResponse = z.object({
  url: z.string(),
  redirect: z.boolean(),
});

/**
 * Success
 */
export const zGetAuthApiListAccountsResponse = z.array(
  z.object({
    id: z.string().optional(),
    provider: z.string().optional(),
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
  }),
);

export const zGetAuthApiDeleteUserCallbackParameterToken = z.string();

export const zGetAuthApiDeleteUserCallbackParameterCallbackUrl = z.string();

/**
 * User successfully deleted
 */
export const zGetAuthApiDeleteUserCallbackResponse = z.object({
  success: z.boolean(),
  message: z.enum(["User deleted"]),
});

export const zPostAuthApiUnlinkAccountData = z.object({
  providerId: z.string(),
  accountId: z.string().optional(),
});

/**
 * Success
 */
export const zPostAuthApiUnlinkAccountResponse = z.object({
  status: z.boolean().optional(),
});

export const zPostAuthApiRefreshTokenData = z.object({
  providerId: z.string(),
  accountId: z.string().optional(),
  userId: z.string().optional(),
});

/**
 * Access token refreshed successfully
 */
export const zPostAuthApiRefreshTokenResponse = z.object({
  tokenType: z.string().optional(),
  idToken: z.string().optional(),
  accessToken: z.string().optional(),
  refreshToken: z.string().optional(),
  accessTokenExpiresAt: z.string().datetime().optional(),
  refreshTokenExpiresAt: z.string().datetime().optional(),
});

export const zPostAuthApiGetAccessTokenData = z.object({
  providerId: z.string(),
  accountId: z.string().optional(),
  userId: z.string().optional(),
});

/**
 * A Valid access token
 */
export const zPostAuthApiGetAccessTokenResponse = z.object({
  tokenType: z.string().optional(),
  idToken: z.string().optional(),
  accessToken: z.string().optional(),
  refreshToken: z.string().optional(),
  accessTokenExpiresAt: z.string().datetime().optional(),
  refreshTokenExpiresAt: z.string().datetime().optional(),
});

export const zPostAuthApiAccountInfoData = z.object({
  accountId: z.string(),
});

/**
 * Success
 */
export const zPostAuthApiAccountInfoResponse = z.object({
  user: z.object({
    id: z.string(),
    name: z.string().optional(),
    email: z.string().optional(),
    image: z.string().optional(),
    emailVerified: z.boolean(),
  }),
  data: z.object({}),
});

/**
 * API is working
 */
export const zGetAuthApiOkResponse = z.object({
  ok: z.boolean(),
});

/**
 * The HTML content of the error page
 */
export const zGetAuthApiErrorResponse = z.string();
